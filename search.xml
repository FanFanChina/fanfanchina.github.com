<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前缀和</title>
      <link href="/2022/02/18/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/Q_%E5%89%8D%E7%BC%80%E5%92%8C/"/>
      <url>/2022/02/18/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/Q_%E5%89%8D%E7%BC%80%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.acwing.com/problem/content/797/">前缀和</a></strong></p><h1><code>题目解析</code></h1><p><strong>01.借用S[ i ]表示前i个数的和，S[ 0 ] = 0</strong></p><p><strong>02.S数组可以在需求和的数组读入时一并算出</strong></p><h1><code>完整代码</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">int</span> n,m,a[N],s[N];</span><br><span class="line">    s[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        s[i]=s[i<span class="number">-1</span>]+a[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        cout&lt;&lt;s[r]-s[l<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>反思总结</code></h1><p><strong>01.cout&lt;&lt;s[r]-s[l-1]而不是cout&lt;&lt;s[r]-s[l]</strong></p>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数的三次方根</title>
      <link href="/2022/02/18/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/S_%E6%95%B0%E7%9A%84%E4%B8%89%E6%AC%A1%E6%96%B9%E6%A0%B9/"/>
      <url>/2022/02/18/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/S_%E6%95%B0%E7%9A%84%E4%B8%89%E6%AC%A1%E6%96%B9%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.acwing.com/problem/content/description/792/">数的三次方根</a></strong></p><h1><code>题目解析</code></h1><p><strong>01.用二分去逼近</strong></p><h1><code>完整代码</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">double</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">double</span> l = <span class="number">-10000</span>, r = <span class="number">10000</span>;   <span class="comment">//n的3次方根一点在n的范围内</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; <span class="number">1e-8</span>)            <span class="comment">//多精确2位</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid * mid * mid &gt; n)</span><br><span class="line">            r = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf"</span>, l);               <span class="comment">//默认保留小数点后6位</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>反思总结</code></h1><p><strong>无</strong></p>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子矩阵的和</title>
      <link href="/2022/02/18/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/Z_%E5%AD%90%E7%9F%A9%E9%98%B5%E7%9A%84%E5%92%8C/"/>
      <url>/2022/02/18/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/Z_%E5%AD%90%E7%9F%A9%E9%98%B5%E7%9A%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.acwing.com/problem/content/description/798/">子矩阵的和</a></strong></p><h1><code>题目解析</code></h1><p><strong>01.容斥原理的运用</strong></p><p><strong>02.S[i] [j] 表示1、1到i、j区域的面积</strong></p><h1><code>完整代码</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, q, g[N][N], s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n,&amp;m,&amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;g[i][j]);</span><br><span class="line">            s[i][j] = s[i<span class="number">-1</span>][j] + s[i][j<span class="number">-1</span>]-s[i<span class="number">-1</span>][j<span class="number">-1</span>]+g[i][j];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">        cout &lt;&lt; s[x2][y2] - s[x2][y1 - <span class="number">1</span>] - s[x1 - <span class="number">1</span>][y2] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>反思总结</code></h1><p><strong>01.前缀和：s[i] [j] = s[i-1] [j] + s[i] [j-1]-s[i-1] [j-1]+g[i] [j];</strong></p>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数的范围</title>
      <link href="/2022/02/17/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/S_%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4/"/>
      <url>/2022/02/17/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/S_%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.acwing.com/problem/content/791/">数的范围</a></strong></p><h1><code>题目解析</code></h1><p><strong>01.常规的二分搜索</strong></p><h1><code>完整代码</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], n, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> p;</span><br><span class="line">        cin &gt;&gt; p;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">-1</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span> (l + <span class="number">1</span> != r)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[mid] &lt; p)</span><br><span class="line">                l = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (r==n||a[r]!=p)</span><br><span class="line">            cout &lt;&lt; <span class="string">"-1 -1"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            cout &lt;&lt; r &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            <span class="keyword">int</span> r = n;</span><br><span class="line">            <span class="keyword">while</span> (l + <span class="number">1</span> != r)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (a[mid] &gt; p)</span><br><span class="line">                    r = mid;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    l = mid;</span><br><span class="line">            }</span><br><span class="line">            cout &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>反思总结</code></h1><p><strong>01.确定左右边界点</strong></p><p><strong>02.确定红蓝范围</strong></p><p><strong>03.小于L等，大于R等</strong></p>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>飞行员兄弟</title>
      <link href="/2022/02/15/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/F_%E9%A3%9E%E8%A1%8C%E5%91%98%E5%85%84%E5%BC%9F/"/>
      <url>/2022/02/15/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/F_%E9%A3%9E%E8%A1%8C%E5%91%98%E5%85%84%E5%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.acwing.com/problem/content/description/118/">飞行员兄弟</a></strong></p><h1><code>题目解析</code></h1><p><strong>01.一共16个把手，将±图转化为01图，用 k：0——2^16-1来枚举所有按的方式</strong></p><p><strong>02.图的状态也可以一用int state来存储</strong></p><h1><code>完整代码</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calcu</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">4</span>+y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transOne</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    state^=(<span class="number">1</span>&lt;&lt;<span class="built_in">calcu</span>(x,y));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transAll</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">transOne</span>(x,i);</span><br><span class="line">        <span class="built_in">transOne</span>(i,y);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">transOne</span>(x,y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    {</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(s[j]==<span class="string">'+'</span>)</span><br><span class="line">                state|=<span class="number">1</span>&lt;&lt;<span class="built_in">calcu</span>(i,j);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; <span class="number">16</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> step=<span class="number">0</span>,backup=state;</span><br><span class="line">        vector&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(i&gt;&gt;<span class="built_in">calcu</span>(j,k)&amp;<span class="number">1</span>)</span><br><span class="line">                {</span><br><span class="line">                    <span class="built_in">transAll</span>(j,k);</span><br><span class="line">                    res.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(j,k));</span><br><span class="line">                    step++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(!state)</span><br><span class="line">        {</span><br><span class="line">            cout&lt;&lt;step&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.<span class="built_in">size</span>();i++)</span><br><span class="line">                cout&lt;&lt;res[i].first + <span class="number">1</span>&lt;&lt;<span class="string">' '</span>&lt;&lt;res[i].second + <span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">        }</span><br><span class="line">        state=backup;</span><br><span class="line">        res.<span class="built_in">clear</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>反思总结</code></h1><p><strong>01.vector &lt;pair&lt;int,int&gt; &gt;  的使用</strong></p><p><strong>02.位运算——异或</strong></p>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01背包</title>
      <link href="/2022/02/15/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/L_%E9%9B%B6%E4%B8%80%E8%83%8C%E5%8C%85/"/>
      <url>/2022/02/15/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/L_%E9%9B%B6%E4%B8%80%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.acwing.com/problem/content/2/">01背包</a></strong></p><h1><code>题目解析</code></h1><h2 id="状态表示"><code>状态表示</code></h2><p><strong>集合：只考虑前i件物品，且体积不超过j的选法的集合</strong></p><p><strong>属性：选法的价值的MAX</strong></p><h2 id="状态计算"><code>状态计算</code></h2><p><strong>划分：</strong></p><p><strong>不同点：对于当前最后有一个物品即第i个物品可以选可以不选</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合一：不选择第i个物品</span></span><br><span class="line">f[i][j]=f[i<span class="number">-1</span>][j]</span><br><span class="line"><span class="comment">//集合二：不选择第i个物品</span></span><br><span class="line">f[i][j]=f[i<span class="number">-1</span>][j-v[i]]+w[i]</span><br></pre></td></tr></tbody></table></figure><p><strong>MAX</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取两个集合最大值填入f[i][j]</span></span><br><span class="line">f[i][j]=<span class="built_in">max</span>(f[i<span class="number">-1</span>][j],f[i<span class="number">-1</span>][j-v[i]]+w[i])</span><br></pre></td></tr></tbody></table></figure><h1><code>完整代码</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> f[N][N];</span><br><span class="line"><span class="keyword">int</span> v[N], w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">{</span><br><span class="line">f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">if</span> (j &gt;= v[i])</span><br><span class="line">{</span><br><span class="line">f[i][j] = f[i - <span class="number">1</span>][j - v[i]] + w[i];</span><br><span class="line">}</span><br><span class="line">f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i][j]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; f[n][m];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>反思总结</code></h1><p><strong>无</strong></p>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2022/02/15/Z_%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/W_%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2022/02/15/Z_%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/W_%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1><code>置1</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> setbit(x,y)  x|=(1&lt;&lt;y)</span></span><br></pre></td></tr></tbody></table></figure><h1><code>置0</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrbit(x,y)  x&amp;=~(1&lt;&lt;y)</span></span><br></pre></td></tr></tbody></table></figure><h1><code>取反</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reversebit(x,y)  x^=(1&lt;&lt;y)</span></span><br></pre></td></tr></tbody></table></figure><h1><code>查看</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getbit(x,y)   ((x) &gt;&gt; (y)&amp;1)</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Z_杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带分数</title>
      <link href="/2022/02/14/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/D_%E5%B8%A6%E5%88%86%E6%95%B0/"/>
      <url>/2022/02/14/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/D_%E5%B8%A6%E5%88%86%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.acwing.com/problem/content/1211/">带分数</a></strong></p><h1><code>题目解析</code></h1><p><strong>01.直接对a,b,c暴力枚举也可以写</strong></p><p><strong>02.对分式变形 b = n * c - a * c ,这样只用枚举a和c</strong></p><h1><code>完整代码</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">bool</span> sta[N], temp[N];</span><br><span class="line"><span class="keyword">int</span> n, res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> b = n * c - a * c;</span><br><span class="line">    <span class="keyword">if</span> (!a || !b || !c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(temp, sta, <span class="keyword">sizeof</span> sta);</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> t = b % <span class="number">10</span>;</span><br><span class="line">        b /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (temp[t]||t==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;        <span class="comment">//确保t!=0</span></span><br><span class="line">        temp[t] = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!temp[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_c</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> a, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (u &gt;= <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>(a, c)) res++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!sta[i])</span><br><span class="line">        {</span><br><span class="line">            sta[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs_c</span>(u + <span class="number">1</span>, a, c * <span class="number">10</span> + i);</span><br><span class="line">            sta[i] = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_a</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (a &gt;= n) <span class="keyword">return</span>;    <span class="comment">//a必然小于n</span></span><br><span class="line">    <span class="keyword">if</span> (a) <span class="built_in">dfs_c</span>(u, a, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!sta[i])</span><br><span class="line">        {</span><br><span class="line">            sta[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs_a</span>(u + <span class="number">1</span>, a * <span class="number">10</span> + i);</span><br><span class="line">            sta[i] = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs_a</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>反思总结</code></h1><p><strong>01.记录状态的sta数组也可以用一个int的state替代，这样不用恢复现场，在遍历时也方便点</strong></p><p><strong>02.对a搜索树的叶节点上再对c搜索</strong></p><p><strong>03.要确保第一次dfs_a() 时return条件为 a&lt;n</strong></p>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻硬币</title>
      <link href="/2022/02/14/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/F_%E7%BF%BB%E7%A1%AC%E5%B8%81/"/>
      <url>/2022/02/14/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/F_%E7%BF%BB%E7%A1%AC%E5%B8%81/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.acwing.com/problem/content/1210/">翻硬币</a></strong></p><h1><code>题目解析</code></h1><p><strong>01.这种题目不要乱想，手动模拟即可</strong></p><p><strong>02.ooo——&gt;oox这种情况不会出现</strong></p><h1><code>完整代码</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    string s1 , s2;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; s1&gt;&gt;s2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.<span class="built_in">size</span>();i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(s1[i]!=s2[i])</span><br><span class="line">        {</span><br><span class="line">            s1[i+<span class="number">1</span>]=<span class="string">'o'</span>+(<span class="string">'*'</span>-s1[i+<span class="number">1</span>]);<span class="comment">//忽略第i个硬币的反转，因为对后面没有影响</span></span><br><span class="line">            ans++;</span><br><span class="line">        }        </span><br><span class="line">    }</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>反思总结</code></h1><p><strong>01.反转相邻两个硬币时，其实可以忽略第一个</strong></p><p><strong>02.反转可以用（A &lt;–&gt; B）：T=‘A’+(‘B’-T)</strong></p>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归实现组合型枚举</title>
      <link href="/2022/02/13/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/D_%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E7%BB%84%E5%90%88%E5%9E%8B%E6%9E%9A%E4%B8%BE/"/>
      <url>/2022/02/13/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/D_%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E7%BB%84%E5%90%88%E5%9E%8B%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.acwing.com/problem/content/95/">递归实现组合型枚举</a></strong></p><h1><code>题目解析</code></h1><p><strong>01.每层函数选一个数字，for循环每次的起始位置不断后移</strong></p><p><strong>02. S——选择的数、U——已选个数、State——选数状态</strong></p><h1><code>完整代码</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> u,<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (u == k)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">if</span> (state &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = s; i &lt; n; i++)</span><br><span class="line"><span class="built_in">dfs</span>(i+<span class="number">1</span>, u + <span class="number">1</span>, state | <span class="number">1</span> &lt;&lt; i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>反思总结</code></h1><p><strong>01.最关键的就是随着函数往下递 for 循环会后移起始位置</strong></p><p><strong>02.如果每次for都 i=0开始，那么就是随机选&lt;=3个数</strong></p>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>费解的开关</title>
      <link href="/2022/02/13/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/F_%E8%B4%B9%E8%A7%A3%E7%9A%84%E5%BC%80%E5%85%B3/"/>
      <url>/2022/02/13/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/F_%E8%B4%B9%E8%A7%A3%E7%9A%84%E5%BC%80%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.acwing.com/problem/content/description/97/">费解的开关</a></strong></p><h1><code>题目解析</code></h1><p><strong>01.如果用BFS代码很长，时间大概在1.5S左右</strong></p><p><strong>02.本题可以用递推的方法, 0行——4行</strong></p><h1><code>完整代码</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> map[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> dx[] = { <span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span> }, dy[] = { <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span> };</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">turn</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> tx = x + dx[i];</span><br><span class="line"><span class="keyword">int</span> ty = y + dy[i];</span><br><span class="line"><span class="keyword">if</span> (tx &gt;= <span class="number">0</span> &amp;&amp; tx &lt; <span class="number">5</span> &amp;&amp; ty &gt;= <span class="number">0</span> &amp;&amp; ty &lt; <span class="number">5</span>)</span><br><span class="line">map[tx][ty] ^= <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> ans = INF;</span><br><span class="line"><span class="comment">//枚举第一行的按法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1</span> &lt;&lt; <span class="number">5</span>; k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> temp[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="built_in">memcpy</span>(temp, map, <span class="keyword">sizeof</span> map);</span><br><span class="line"><span class="comment">//按第一行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (k &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">turn</span>(<span class="number">0</span>, i);</span><br><span class="line">res++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//递推</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (map[i][j] == <span class="string">'0'</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">turn</span>(i + <span class="number">1</span>, j);</span><br><span class="line">res++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> is_successful = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//判断最后一行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (map[<span class="number">4</span>][i] == <span class="string">'0'</span>)</span><br><span class="line">{</span><br><span class="line">is_successful = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//更新最小值</span></span><br><span class="line"><span class="keyword">if</span> (is_successful) ans = <span class="built_in">min</span>(res, ans);</span><br><span class="line"><span class="built_in">memcpy</span>(map, temp, <span class="keyword">sizeof</span> temp);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//返回最小值</span></span><br><span class="line"><span class="keyword">if</span> (ans &gt; <span class="number">6</span>) <span class="keyword">return</span> - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">cin &gt;&gt; map[i];</span><br><span class="line">cout &lt;&lt; <span class="built_in">work</span>() &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>反思总结</code></h1><p><strong>01.连成一块的数字需要用字符数组保存</strong></p><p><strong>02.使用C语言的memcpy函数就不要用string数组</strong></p><p><strong>03.异或数字1不仅对数字1和0管用，对字符1和0也管用</strong></p>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归实现排列型枚举</title>
      <link href="/2022/02/11/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/D_%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%88%97%E5%9E%8B%E6%9E%9A%E4%B8%BE/"/>
      <url>/2022/02/11/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/D_%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%88%97%E5%9E%8B%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.acwing.com/problem/content/96/">递归实现排列型枚举</a></strong></p><h1><code>题目解析</code></h1><p><strong>01.因为是全排列，所以我们需要用数组记录选入的数，一个state记录转状态</strong></p><p><strong>02.选完之后我们需要恢复原来的状态，dfs经典的回溯模型</strong></p><h1><code>完整代码（一）</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],book[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(step&gt;n)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            cout&lt;&lt;a[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(!book[i])</span><br><span class="line">        {</span><br><span class="line">            a[step]=i;</span><br><span class="line">            book[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(step+<span class="number">1</span>);</span><br><span class="line">            book[i]=<span class="number">0</span>;<span class="comment">//回溯</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>完整代码（二）</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], n;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (k == n)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            cout &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!(state &gt;&gt; i &amp; <span class="number">1</span>))</span><br><span class="line">        {</span><br><span class="line">            a[k] = i+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(k + <span class="number">1</span>, state | (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//状态写dfs函数的参数里面就不费事写回溯了，原调函数会保留数据</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归实现指数型枚举</title>
      <link href="/2022/02/11/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/D_%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%8C%87%E6%95%B0%E5%9E%8B%E6%9E%9A%E4%B8%BE/"/>
      <url>/2022/02/11/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/D_%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%8C%87%E6%95%B0%E5%9E%8B%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.acwing.com/problem/content/94/">递归实现指数型枚举</a></strong></p><h1><code>题目解析</code></h1><p><strong>01.数据范围：1≤n≤15（n&lt;=30），所以可以使用递归,2的n次方</strong></p><p><strong>02.抛弃使用数组记录选择的数字，使用int 型数state的比特位记录</strong></p><p><strong>03.二叉搜索树</strong></p><p><strong>04.看与——&amp;、置或 ——|</strong></p><h1><code>完整代码（一）</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (k == n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (state &gt;&gt; i &amp; <span class="number">1</span>)<span class="comment">//看state的第i位是否为1，为1则输出</span></span><br><span class="line">cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">dfs</span>(k + <span class="number">1</span>, state);</span><br><span class="line"><span class="built_in">dfs</span>(k + <span class="number">1</span>, state | <span class="number">1</span> &lt;&lt; k);<span class="comment">//state的第k位置为1</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>完整代码（二）</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">bool</span> state[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (k == n+<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (state[i])</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">state[k] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">dfs</span>(k + <span class="number">1</span>);</span><br><span class="line">state[k] = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">dfs</span>(k + <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单斐波那契</title>
      <link href="/2022/02/11/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/J_%E7%AE%80%E5%8D%95%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91/"/>
      <url>/2022/02/11/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/J_%E7%AE%80%E5%8D%95%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.acwing.com/problem/content/description/719/">简单斐波那契</a></strong></p><h1><code>题目解析</code></h1><p><strong>01.使用数组打表递推</strong></p><p><strong>02.递归函数现算</strong></p><p><strong>03.递归+剪枝</strong></p><h1><code>完整代码（一）</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打表</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">50</span>];</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    f[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">50</span>;i++)</span><br><span class="line">        f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cout&lt;&lt;f[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>完整代码（二）</code></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        cout&lt;&lt;a&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">int</span> t=a+b;</span><br><span class="line">        a=b;b=t;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 打表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闫氏DP分析法</title>
      <link href="/2022/02/09/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/DP/Y_%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/"/>
      <url>/2022/02/09/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/DP/Y_%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1><code>整体思路</code></h1><p><img src="https://pic.imgdb.cn/item/62036a0b2ab3f51d91044798.jpg" alt=""></p><h1><code>01背包问题</code></h1><p><strong>题目：<a href="https://www.acwing.com/problem/content/2/">01背包问题</a></strong></p><h2 id="状态表示"><code>状态表示</code></h2><p><strong>集合：只考虑前i件物品，且体积不超过j的选法的集合</strong></p><p><strong>属性：选法的价值的MAX</strong></p><h2 id="状态计算"><code>状态计算</code></h2><p><strong>划分：</strong></p><p><strong>不同点：对于当前最后有一个物品即第i个物品可以选可以不选</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合一：不选择第i个物品</span></span><br><span class="line">f[i][j]=f[i<span class="number">-1</span>][j]</span><br><span class="line"><span class="comment">//集合二：不选择第i个物品</span></span><br><span class="line">f[i][j]=f[i<span class="number">-1</span>][j-v[i]]+w[i]</span><br></pre></td></tr></tbody></table></figure><p><strong>MAX</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取两个集合最大值填入f[i][j]</span></span><br><span class="line">f[i][j]=<span class="built_in">max</span>(f[i<span class="number">-1</span>][j],f[i<span class="number">-1</span>][j-v[i]]+w[i])</span><br></pre></td></tr></tbody></table></figure><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> f[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> v[MAX], w[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">{</span><br><span class="line">f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">if</span> (j &gt;= v[i])</span><br><span class="line">{</span><br><span class="line">f[i][j] = f[i - <span class="number">1</span>][j - v[i]] + w[i];</span><br><span class="line">}</span><br><span class="line">f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>优化写法</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//优化f[i][j]、v[i]、w[i]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dp[N];</span><br><span class="line"><span class="keyword">int</span> v, w;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line">cin &gt;&gt; v &gt;&gt; w;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= v; j--)</span><br><span class="line">dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v] + w);</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; dp[m];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双向排序</title>
      <link href="/2022/01/20/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/Math/S_%E5%8F%8C%E5%90%91%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/01/20/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/Math/S_%E5%8F%8C%E5%90%91%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="https://www.dotcpp.com/oj/problem2611.html">双向排序</a></strong></p><h1><code>题目解析</code></h1><h2 id="解题思想"><code>解题思想</code></h2><p><strong>01.如果暴力使用sort进行排序，则会时间超限</strong><br><strong>02.所以我们首先要对指令输入进行分类压缩</strong><br><strong>03.压缩完毕后观察指令执行的形式和特点，设计算法</strong></p><h3 id="第一个指令的压缩"><code>第一个指令的压缩</code></h3><p><strong>原因：因为原本的序列为升序，所以第一条指令必须是降序才会起效（top的大小为指令的条数，初始值为0）</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p, q;</span><br><span class="line">cin &gt;&gt; p &gt;&gt; q;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (top)<span class="comment">//只有先输入0指令才会输入1指令</span></span><br><span class="line">{</span><br><span class="line">          </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="连续相同指令的压缩"><code>连续相同指令的压缩</code></h3><p><strong>原因：因为连续相同的指令执行的总过程等效于长度最大的那条指令</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (top &amp;&amp; stk[top].first == <span class="number">0</span>)</span><br><span class="line">q = <span class="built_in">max</span>(stk[top--].second, q);</span><br></pre></td></tr></tbody></table></figure><h3 id="更长的降指令，对前面两条指令的抵消的压缩"><code>更长的降指令，对前面两条指令的抵消的压缩</code></h3><p><strong>例子：12345</strong></p><p><strong>（0，3）——32145</strong></p><p><strong>（1，2）——31245</strong></p><p><strong>（0，4）——43215</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (top &gt;= <span class="number">2</span> &amp;&amp; stk[top - <span class="number">1</span>].second &lt;= q)</span><br><span class="line">   top -= <span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure><p><strong>Note：不难发现压缩之后的指令，无论是对前缀进行升排序还是对后缀进行降排序，这两类的指令执行的长度都越来越小，我们可以发现含有这种趋势的指令在执行时，某些数按规律的被固定住，例子如下：</strong></p><p><img src="https://pic.imgdb.cn/item/61eac9f02ab3f51d9101c655.jpg" alt=""></p><p><strong>所以我们借用left和right和k（k=n）去固定这些数</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> left = <span class="number">1</span>, right = n, k = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (stk[i].first == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> (left &lt; right&amp;&amp;right&gt;stk[i].second)</span><br><span class="line">ans[right--] = k--;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; left&lt;stk[i].second)</span><br><span class="line">ans[left++] = k--;</span><br><span class="line"><span class="keyword">if</span> (left &gt; right)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>对于指令执行完之后，数未能全部固定完的情况，如上图1未固定（虽然在正确位置），我们要再做相同的处理</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (top % <span class="number">2</span>)</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">ans[left++] = k--;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">ans[right--] = k--;</span><br></pre></td></tr></tbody></table></figure><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;stk[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n, m, ans[MAX];</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> p, q;</span><br><span class="line">cin &gt;&gt; p &gt;&gt; q;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (top &amp;&amp; stk[top].first == <span class="number">0</span>)</span><br><span class="line">q = <span class="built_in">max</span>(stk[top--].second, q);</span><br><span class="line"><span class="keyword">while</span> (top &gt;= <span class="number">2</span> &amp;&amp; stk[top - <span class="number">1</span>].second &lt;= q)</span><br><span class="line">top -= <span class="number">2</span>;</span><br><span class="line">stk[++top] = { <span class="number">0</span>,q };</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (top)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (top &amp;&amp; stk[top].first == <span class="number">1</span>)</span><br><span class="line">q = <span class="built_in">min</span>(stk[top--].second, q);</span><br><span class="line"><span class="keyword">while</span> (top &gt;= <span class="number">2</span> &amp;&amp; stk[top - <span class="number">1</span>].second &gt;= q)</span><br><span class="line">top -= <span class="number">2</span>;</span><br><span class="line">stk[++top] = { <span class="number">1</span>,q };</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">1</span>, right = n, k = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (stk[i].first == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> (left &lt; right&amp;&amp;right&gt;stk[i].second)</span><br><span class="line">ans[right--] = k--;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; left&lt;stk[i].second)</span><br><span class="line">ans[left++] = k--;</span><br><span class="line"><span class="keyword">if</span> (left &gt; right)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (top % <span class="number">2</span>)</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">ans[left++] = k--;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">ans[right--] = k--;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cout &lt;&lt; ans[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杨辉三角</title>
      <link href="/2022/01/20/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/Math/Y_%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
      <url>/2022/01/20/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/Math/Y_%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="https://www.dotcpp.com/oj/problem2610.html">杨辉三角形</a></strong></p><h2 id="题目解析"><code>题目解析</code></h2><h3 id="数学性质"><code>数学性质</code></h3><p><strong>01.杨辉三角一般构造方法——第一纵行和右斜行均为1，其余位置的数等于上面数加上上面的数的前一个数的和</strong></p><p><strong>02.杨辉三角左右对称，并且中间位置的数最大</strong></p><p><strong>03.如果抛去右半边，杨辉三角每一个数的大小等于一个组合数 C（ R , K），K为斜行数、R为横行数，每一斜行的第一个数对应的组合数R = 2 x K</strong></p><p><strong>04. 若 n 存在于杨辉三角中，那么n一定会在n行或n行之前出现</strong></p><h3 id="完整代码"><code>完整代码</code></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">LL res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = a, j = <span class="number">1</span>; j &lt;= b; i--, j++)</span><br><span class="line">{</span><br><span class="line">res = res * i / j;</span><br><span class="line"><span class="keyword">if</span> (res &gt; n)</span><br><span class="line"><span class="keyword">return</span> res;     <span class="comment">// 大于n已无意义，防爆LL</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">2</span> * k;</span><br><span class="line"><span class="keyword">int</span> r = <span class="built_in">max</span>(n, l);</span><br><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">C</span>(m, k) &gt;= n)</span><br><span class="line">r = m;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">l = m + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">C</span>(r, k) == n)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="number">1ll</span> * (<span class="number">1</span>+r)*r/<span class="number">2</span> + k + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">16</span>;; i--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(i))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="关键点"><code>关键点</code></h3><p><strong>01.使用组合数构造杨辉三角，使用二分法查找</strong></p><p><strong>02.计算组合数时防爆LL，边乘边除，并且时时判断是否大于n</strong></p>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra</title>
      <link href="/2021/12/09/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/"/>
      <url>/2021/12/09/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>Dijkstra算法——单源最短路径算法</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> map[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> book[MAX], dis[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">book[s] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">dis[i] = map[s][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//找最小并标记</span></span><br><span class="line"><span class="keyword">int</span> temp = INF, t = s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (book[j] == <span class="number">0</span> &amp;&amp; dis[j] &lt; temp)</span><br><span class="line">{</span><br><span class="line">t = j;</span><br><span class="line">temp = dis[j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (t == s)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">book[t] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//t的邻接点借东风</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span> (book[j] == <span class="number">0</span> &amp;&amp; map[t][j] != INF)</span><br><span class="line"><span class="keyword">if</span> (dis[j] &gt; dis[t] + map[t][j])</span><br><span class="line">dis[j] = dis[t] + map[t][j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memset</span>(map, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(map));</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">map[a][b] = <span class="built_in">min</span>(map[a][b], c);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">map[s][s] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dijkstra</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cout &lt;&lt; dis[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试样例</span></span><br><span class="line"><span class="comment">//5 8</span></span><br><span class="line"><span class="comment">//1 2 2</span></span><br><span class="line"><span class="comment">//1 3 5</span></span><br><span class="line"><span class="comment">//2 3 2</span></span><br><span class="line"><span class="comment">//2 4 6</span></span><br><span class="line"><span class="comment">//3 4 7</span></span><br><span class="line"><span class="comment">//4 3 2</span></span><br><span class="line"><span class="comment">//3 5 1</span></span><br><span class="line"><span class="comment">//4 5 4</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//0 2 4 8 5</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Summary：</strong></p><p><strong>01.初始化</strong></p><p><strong>02.找最小</strong></p><p><strong>03.借东风</strong></p>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> SP </tag>
            
            <tag> Dijkstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Heavy Transportation</title>
      <link href="/2021/12/07/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Heavy%20Transportation/"/>
      <url>/2021/12/07/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Heavy%20Transportation/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="http://poj.org/problem?id=1797">Heavy Transportation</a></strong></p><p><strong>Note：某条路的最大承重量其实是该条路的最小边</strong></p>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> SP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>灌溉</title>
      <link href="/2021/12/06/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/G_%E7%81%8C%E6%BA%89/"/>
      <url>/2021/12/06/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/G_%E7%81%8C%E6%BA%89/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 101</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> map[MAX][MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">map[a][b] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span> (k--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (map[i][j] == t)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">1</span>)</span><br><span class="line">map[i - <span class="number">1</span>][j] = t+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> &lt;= n)</span><br><span class="line">map[i + <span class="number">1</span>][j] = t+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">1</span>)</span><br><span class="line">map[i][j - <span class="number">1</span>] = t+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (j + <span class="number">1</span> &lt;= m)</span><br><span class="line">map[i][j + <span class="number">1</span>] = t+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">t++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (map[i][j])</span><br><span class="line">cnt++;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; cnt;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除字符</title>
      <link href="/2021/12/06/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/S_%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6/"/>
      <url>/2021/12/06/L_%E8%93%9D%E6%A1%A5%E6%9D%AF/S_%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">cin &gt;&gt; s &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (s[i] &gt; s[i + <span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line">s.<span class="built_in">erase</span>(i, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; s;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> L_蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朴素贝叶斯性别判定系统</title>
      <link href="/2021/11/09/S_%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/P_%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/11/09/S_%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/P_%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><code>引言</code></h2><p><strong>根据朴素贝叶斯分类算法而作的性别判定系统</strong></p><p><strong>数据来源：网络爬虫</strong></p><p><strong>链接: <a href="https://www.aliyundrive.com/s/jPTWyWZ7hwt">train.txt</a></strong></p><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;comutil.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"comsuppw.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 21000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> p1, p0;<span class="comment">//先验概率</span></span><br><span class="line"><span class="keyword">double</span> sum1, sum0;<span class="comment">//总和统计</span></span><br><span class="line"><span class="keyword">int</span> statMan[MAX];<span class="comment">//统计数组(男)</span></span><br><span class="line"><span class="keyword">int</span> statWoman[MAX];<span class="comment">//统计数组(女)</span></span><br><span class="line">vector &lt;wstring&gt; manName;<span class="comment">//Name向量(男)</span></span><br><span class="line">vector &lt;wstring&gt; womanName;<span class="comment">//Name向量(女)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interFace</span><span class="params">()</span></span>;<span class="comment">//界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">duceDate</span><span class="params">()</span></span>;<span class="comment">//引入数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">statDate</span><span class="params">()</span></span>;<span class="comment">//统计数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleDate</span><span class="params">()</span></span>;<span class="comment">//处理数据</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pMan</span><span class="params">(<span class="keyword">wchar_t</span> w)</span></span>;<span class="comment">//概率函数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pWoman</span><span class="params">(<span class="keyword">wchar_t</span> w)</span></span>;<span class="comment">//概率函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">judgeDate</span><span class="params">(string s)</span></span>;<span class="comment">//判断数据</span></span><br><span class="line"><span class="function">wstring <span class="title">converse</span><span class="params">(<span class="keyword">const</span> string&amp; s)</span></span>;<span class="comment">//string转wstring</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">duceDate</span>();</span><br><span class="line"><span class="built_in">statDate</span>();</span><br><span class="line"><span class="built_in">interFace</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interFace</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"系统加载中"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">700</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">"."</span>;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">"系统加载成功！\n"</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"****************************"</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"*  朴素贝叶斯性别预测系统  *"</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"*     输入姓名预测性别     *"</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"*     输入over程序结束     *"</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"****************************"</span> &lt;&lt; endl;</span><br><span class="line">string s = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">while</span> (s != <span class="string">"over"</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"--&gt; "</span>;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="string">"over"</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">judgeDate</span>(s);</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; <span class="string">"已结束,下次再见"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">duceDate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++)</span><br><span class="line">statMan[i] = statWoman[i] = <span class="number">1</span>;</span><br><span class="line"><span class="function">ifstream <span class="title">f</span><span class="params">(<span class="string">"train.txt"</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!f.<span class="built_in">is_open</span>())</span><br><span class="line">cout &lt;&lt; <span class="string">"The file can not open"</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">int</span> gender;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">12000</span>; i++)</span><br><span class="line">{</span><br><span class="line">f &gt;&gt; temp &gt;&gt; name &gt;&gt; gender;</span><br><span class="line"><span class="keyword">if</span> (gender == <span class="number">1</span>)</span><br><span class="line">manName.<span class="built_in">push_back</span>(<span class="built_in">converse</span>(name));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">womanName.<span class="built_in">push_back</span>(<span class="built_in">converse</span>(name));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">f.<span class="built_in">close</span>();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">statDate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">p1 = manName.<span class="built_in">size</span>() * <span class="number">1.0</span> / (manName.<span class="built_in">size</span>() + womanName.<span class="built_in">size</span>());</span><br><span class="line">p0 = womanName.<span class="built_in">size</span>() * <span class="number">1.0</span> / (manName.<span class="built_in">size</span>() + womanName.<span class="built_in">size</span>());</span><br><span class="line"><span class="comment">//统计(男)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; manName.<span class="built_in">size</span>(); i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> len = manName[i].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">wchar_t</span> t = manName[i][<span class="number">0</span>];</span><br><span class="line">statMan[t - <span class="number">19967</span>]++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">wchar_t</span> t1 = manName[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">wchar_t</span> t2 = manName[i][<span class="number">1</span>];</span><br><span class="line">statMan[t1 - <span class="number">19967</span>]++;</span><br><span class="line">statMan[t2 - <span class="number">19967</span>]++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//统计(女)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; womanName.<span class="built_in">size</span>(); i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> len = womanName[i].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">wchar_t</span> t = womanName[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> c = t;</span><br><span class="line">statWoman[c - <span class="number">19967</span>]++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">wchar_t</span> t1 = womanName[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">wchar_t</span> t2 = womanName[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> c = t1;</span><br><span class="line">statWoman[c - <span class="number">19967</span>]++;</span><br><span class="line">c = t2;</span><br><span class="line">statWoman[c - <span class="number">19967</span>]++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++)</span><br><span class="line">{</span><br><span class="line">sum1 += statMan[i];</span><br><span class="line">sum0 += statWoman[i];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pMan</span><span class="params">(<span class="keyword">wchar_t</span> w)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> c = w;</span><br><span class="line"><span class="keyword">return</span> statMan[c - <span class="number">19967</span>] / sum1;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pWoman</span><span class="params">(<span class="keyword">wchar_t</span> w)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> c = w;</span><br><span class="line"><span class="keyword">return</span> statWoman[c - <span class="number">19967</span>] / sum0;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">judgeDate</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">wstring ws = <span class="built_in">converse</span>(s);</span><br><span class="line"><span class="keyword">int</span> wsl = ws.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (wsl == <span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">double</span> pa = <span class="built_in">pMan</span>(ws[<span class="number">1</span>]) * p1;</span><br><span class="line"><span class="keyword">double</span> pb = <span class="built_in">pWoman</span>(ws[<span class="number">1</span>]) * p0;</span><br><span class="line">cout &lt;&lt; <span class="string">"概率："</span> &lt;&lt; <span class="string">"男 "</span> &lt;&lt; pa / (pa + pb) &lt;&lt; <span class="string">" 女 "</span> &lt;&lt; pb / (pa + pb);</span><br><span class="line">cout &lt;&lt; <span class="string">"\n结果："</span>;</span><br><span class="line"><span class="keyword">if</span> (pa &gt;= pb)</span><br><span class="line">cout &lt;&lt; <span class="string">"男\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">"女\n"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">double</span> pa = <span class="built_in">pMan</span>(ws[<span class="number">1</span>]) * <span class="built_in">pMan</span>(ws[<span class="number">2</span>]) * p1;</span><br><span class="line"><span class="keyword">double</span> pb = <span class="built_in">pWoman</span>(ws[<span class="number">1</span>]) * <span class="built_in">pWoman</span>(ws[<span class="number">2</span>]) * p0;</span><br><span class="line">cout &lt;&lt; <span class="string">"概率："</span> &lt;&lt; <span class="string">"男 "</span> &lt;&lt; pa / (pa + pb) &lt;&lt; <span class="string">" 女 "</span> &lt;&lt; pb / (pa + pb);</span><br><span class="line">cout &lt;&lt; <span class="string">"\n结果："</span>;</span><br><span class="line"><span class="keyword">if</span> (pa &gt;= pb)</span><br><span class="line">cout &lt;&lt; <span class="string">"男\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">"女\n"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function">wstring <span class="title">converse</span><span class="params">(<span class="keyword">const</span> string&amp; s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">_bstr_t</span> t = s.<span class="built_in">c_str</span>();</span><br><span class="line"><span class="keyword">wchar_t</span>* pwchar = (<span class="keyword">wchar_t</span>*)t;</span><br><span class="line">wstring result = pwchar;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="实例测试结果"><code>实例测试结果</code></h2><p><strong>样本数据：男50人，女50人</strong></p><p><strong>男性预测正确率：90.23%</strong></p><p><strong>女性预测正确率：81.33%</strong></p><p><strong>综合正确率：85.78%</strong></p><h2 id="感谢名录"><code>感谢名录</code></h2><p><font size="5" color="#D1DAF2"><strong>Do_r</strong></font> 　　　　　　　<font size="5" color="#0E0E0E"><strong>Arthur</strong></font>　　　　　　　　　<font size="5" color="#007CFF"><strong>阳</strong></font></p><p><font size="5" color="#8FD1EC"><strong>Ttkx</strong></font> 　　　　　　　<font size="5" color="#9D87D2"><strong>Mine`♡</strong></font>　　　　　　　　　<font size="5" color="#D1DAF2"><strong>沫殇心</strong></font></p><p><font size="5" color="#007CFF"><strong>Tremor.</strong></font> 　　　　　　<font size="5" color="#8FD1EC"><strong>太阳</strong></font>　　　　　　　　　　<font size="5" color="#0E0E0E"><strong>yeyu</strong></font></p><p><font size="5" color="#8FD1EC"><strong>不如去散步</strong></font>　　　　　<font size="5" color="#9D87D2"><strong>偷偷藏不住</strong></font>　　　　　　<font size="5" color="#B884F2"><strong>有一点疼的小耳朵</strong></font></p><p><font size="5" color="#0E0E0E"><strong>ECCENTRIC</strong></font> 　　　　　<font size="5" color="#B884F2"><strong>salad  days</strong></font>　　　<font size="5" color="#D1DAF2"><strong>桃李不言</strong></font> 　　　　<font size="5" color="#D1DAF2"><strong>Maid</strong></font></p><p><font size="5" color="#8FD1EC"><strong>Kneel</strong></font>　　　　　　　　　<font size="5" color="#9D87D2"><strong>程喻吖</strong></font>　　　　　　　　　<font size="5" color="#D1DAF2"><strong>咿呀咿呀呦</strong></font></p>]]></content>
      
      
      <categories>
          
          <category> S_实践项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言</title>
      <link href="/2021/11/01/B_%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/H_%E6%B1%87%E7%BC%96/"/>
      <url>/2021/11/01/B_%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/H_%E6%B1%87%E7%BC%96/</url>
      
        <content type="html"><![CDATA[<h1><code>寄存器</code></h1><p><strong>以下寄存器均为对编程人员可见的可编程寄存器</strong></p><h2 id="通用寄存器"><code>通用寄存器</code></h2><h3 id="数据寄存器"><code>数据寄存器</code></h3><p><strong>AX——累加（Accumulate）</strong></p><p><strong>BX——基地址（Base）</strong></p><p><strong>CX——计数（Count）</strong></p><p><strong>DX——存数据（Date）</strong></p><h3 id="特殊寄存器"><code>特殊寄存器</code></h3><p><strong>SP——堆栈指针（Stake）</strong></p><p><strong>BP——基地址指针（Base）</strong></p><p><strong>SI——源变址（Source Index）</strong></p><p><strong>DI——目的变址（Destination Index）</strong></p><h2 id="专用寄存器"><code>专用寄存器</code></h2><h3 id="标志寄存器"><code>标志寄存器</code></h3><p><strong>FLAGS</strong></p><h3 id="指令指针寄存器"><code>指令指针寄存器</code></h3><p><strong>IP</strong></p><h3 id="段寄存器"><code>段寄存器</code></h3><p><strong>CS——代码段（Code）</strong></p><blockquote><p>CS指明代码段基地址  : IP(指令指针)——当前执行的指令位置</p></blockquote><p><strong>DS——数据段（Date）</strong></p><blockquote><p>没有特定的寄存器存储数据段的偏移地址，需要自己计算（EA）</p></blockquote><p><strong>SS——栈段（Stack）</strong></p><blockquote><p>SS指明栈段基地址  : SP(堆栈指针)——指明栈顶</p></blockquote><p><strong>ES——附加段（Extra）</strong></p><h1><code>存储器</code></h1><h2 id="字节，字和双字"><code>字节，字和双字</code></h2><p><strong>8位——字节</strong></p><p><strong>16位——字</strong></p><p><strong>32位——双字</strong></p><h2 id="编号规则"><code>编号规则</code></h2><p><strong>从0开始，直到最大</strong></p><p>eg：IA-32（0-2的32次方（0-FFFFFFFF）H）</p><blockquote><p>4个二进制位对应一个16进制位</p></blockquote><p><strong>每一个地址指向一个字节，如下图：</strong></p><p><img src="https://pic.imgdb.cn/item/618787812ab3f51d9173f971.jpg" alt="dwad"></p><h2 id="MMU"><code>MMU</code></h2><p><strong>MMU——Memory Manage Unit（存储管理单元）</strong>、</p><img src="https://pic.imgdb.cn/item/618788492ab3f51d9174e2d5.jpg" alt="dwad" style="zoom:80%;"><h2 id="逻辑地址和物理地址"><code>逻辑地址和物理地址</code></h2><p><strong>逻辑地址=段基地址：偏移地址</strong></p><p><img src="https://pic.imgdb.cn/item/618789122ab3f51d9175fe04.jpg" alt=""></p><p><strong>同一个存储单元的不同表示方式，逻辑地址利于我们去编程。</strong></p><p><strong>逻辑地址——MMU——物理地址</strong></p><h1><code>指令分类</code></h1><p><strong>执行性语句：标号:硬性助记符 操作数，操作数;注释</strong></p><p><strong>说明性语句：名字 伪指令助记符 参数,参数, …;注释</strong></p><blockquote><p>执行性语句类似于高级语言中的赋值等（完成具体的功能）</p><p>说明性语句类似于高级语言中的定义变量，结构体，类等（说明一些属性）</p></blockquote><h1><code>操作数</code></h1><p><strong>（一）立即数——无地址含义，只表示运算数据（请立即给我一个数，不要墨迹）</strong></p><p><strong>（二）寄存器——运算的数据放在CPU的寄存器组里（最快！！！）</strong></p><p><strong>（三）存储器——运算的数据放在内存里 [ ] 表示偏移地址</strong></p><h1><code>寻址方式</code></h1><h2 id="立即寻址"><code>立即寻址</code></h2><p><strong>指令直接给出，适用于立即数</strong></p><h2 id="寄存器寻址"><code>寄存器寻址</code></h2><p><strong>大多指的是通用寄存器</strong></p><h2 id="存储器寻址"><code>存储器寻址</code></h2><p><strong>使用——[偏移地址]</strong></p><blockquote><p>Note:存储器操作数的字长本身不确定，其字长取决于指令中另外一个寄存器的操作数，或通过其他方式指定字长</p></blockquote><h3 id="直接寻址"><code>直接寻址</code></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,[1200H];默认使用Date Segment段基地址</span><br><span class="line">mov ax,ex:[1200H];重设为Extra Segment段基地址</span><br></pre></td></tr></tbody></table></figure><h3 id="间接寻值"><code>间接寻值</code></h3><p><strong>使用间址寄存器BX，BP，SI，DI（只有也只能有这4个）</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov bx,1200H</span><br><span class="line">mov ax,[bx]</span><br></pre></td></tr></tbody></table></figure><p><strong>BX，SI，DI——默认在数据段</strong></p><p><strong>BP——默认在堆栈段</strong></p><p><strong>另：SP——始终指向栈顶</strong></p><h3 id="相对寻址"><code>相对寻址</code></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov ax,[bx+date];</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov ax,2000H;2000H送给ax</span><br><span class="line">mov ds,ax;ax送给dx</span><br><span class="line">mov bx,1200H;1200H送给Bx</span><br><span class="line">mov al,[bx+5];在Date Segment基地址偏移1205H个单位的字节送给al寄存器</span><br><span class="line">;其他写法5[bx]、[bx]5</span><br></pre></td></tr></tbody></table></figure><p><strong>主要用于一维数组的操作，常数作为表头地址，间址寄存器作为相对地址</strong></p><h3 id="基址、变址寻址"><code>基址、变址寻址</code></h3><p><strong>基址寄存器的内容（BX，BP） + 变址寄存器的内容（SI，SP）</strong></p><p><strong>BX——默认在数据段</strong></p><p><strong>BP——默认在堆栈段</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov si,1100H;si==1100H</span><br><span class="line">mov bx,si;bx==1100H</span><br><span class="line">mov ax,[bx+si];DateSegment段偏移2200H和2201H个单位的地址所指向的字节的数送给ax寄存器</span><br></pre></td></tr></tbody></table></figure><h3 id="基址、变址、相对寻址"><code>基址、变址、相对寻址</code></h3><p><strong>基址寄存器的内容（BX，BP） + 变址寄存器的内容（SI，SP）+位移量</strong></p><p><strong>主要用于二维数组的操作，表头地址，行地址和列地址</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov di,1100H</span><br><span class="line">mov bp,di</span><br><span class="line">mov al,[bp][di]5;StackSegment段偏移2205H个单位的地址所指向的字节的数送给al寄存器</span><br></pre></td></tr></tbody></table></figure><h3 id="隐含寻址"><code>隐含寻址</code></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mul bl;equal: ax=al*bl</span><br></pre></td></tr></tbody></table></figure><h1><code>寻址方式 Test</code></h1><p><img src="https://pic.imgdb.cn/item/6187cce42ab3f51d91f420fa.jpg" alt=""></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mov ax,bx;寄存器寻址</span><br><span class="line">mov dl,80H;立即寻址</span><br><span class="line">mov ax,VAR[bx][si]   ;6000H*16+0050H+0800H+00A0H=608F0H(5位)</span><br><span class="line">mov al,'B';立即寻址</span><br><span class="line">mov di,es:[bx]       ;2000H*16+0800H=20800H</span><br><span class="line">mov dx,[bp];1500H*16+1200H=16200H</span><br><span class="line">mov bx,20H[bx];6000H*16+0800H+20H=60820H</span><br></pre></td></tr></tbody></table></figure><p><strong>物理地址，偏移地址，基地址针对均为存储器，寄存器的地址是固定的</strong></p><h1><code>指令</code></h1><h2 id="数据传送类"><code>数据传送类</code></h2><h3 id="MOV"><code>MOV</code></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov al,bx;错误：字长不等</span><br><span class="line">mov ax,10H;正确：立即寻址</span><br><span class="line">mov ax,bx;正确：寄存器寻址</span><br><span class="line">mov ax,[bx]05H;正确：存储器寻址</span><br><span class="line">mov ds,1000H;错误：段寄存器不可以用立即寻址赋值</span><br><span class="line">mov [bx][bp],bx ;错误：目的操作数寻址方式错误（bx和bp为不同的两个段）</span><br><span class="line">mov dx,09H    ;正确：立即数的字长是不确定的，可以补0</span><br><span class="line">mov [1200],[si] ;错误：mov指令不能同时为存储器c</span><br></pre></td></tr></tbody></table></figure><p><strong>eg: 将(*)的ASCⅡ码2AH送入内存数据段1000H开始的100个单元中</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov di 1000H;起始位置</span><br><span class="line">mov cx,64H;100D=64H</span><br><span class="line">mov al,'*'; *</span><br><span class="line">AGAIN: mov [di],al</span><br><span class="line">   inc di;di++</span><br><span class="line">   dec cx;cx--</span><br><span class="line">   jnz AGAIN;cx!=0 则继续</span><br><span class="line">   hlt;</span><br></pre></td></tr></tbody></table></figure><h3 id="PUSH、POP"><code>PUSH、POP</code></h3><p><strong>特点：先进后出、以字（双字节，16位）为单位</strong></p><p><strong>note：操作数可以是寄存器或存储器的两个单元，但不能是<code>立即数</code></strong></p><p><strong>单操作数指令的操作数一定不能是立即数！！！</strong></p><h3 id="交换指令"><code>交换指令</code></h3><p><strong>(XCHG REG,MEM/REG)</strong></p><p><strong>note: 两个操作数必须至少有一个寄存器，不允许使用段寄存器</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xchg ax,bx;寄存器交换</span><br><span class="line">xchg [2000],cl;内存与寄存器交换</span><br></pre></td></tr></tbody></table></figure><h3 id="查表指令-XLAT"><code>查表指令(XLAT)</code></h3><p><strong>表头：BX</strong></p><p><strong>偏移量：AL</strong></p><p><strong>值返回对象：AL</strong></p><p><strong>将BX+AL所指单元的内容送给AL</strong></p><h3 id="字位扩展指令"><code>字位扩展指令</code></h3><p><strong>note：将有符号数的符号位扩展到高位</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cbw;将al扩展到ax</span><br><span class="line">;最高位为1，执行后ah为FFH(有符号数)</span><br><span class="line">;最高位为0，执行后ah为00H</span><br><span class="line">cwd;将ax扩展到dx,ax</span><br><span class="line">;最高位为1，执行后dx为FFFFH</span><br><span class="line">;最高位为0，执行后dx为0000H</span><br></pre></td></tr></tbody></table></figure><p><strong>上述指令只针对有符号数有意义，无符号数拓展只需要在高位加足够多的0即可！！！</strong></p><h3 id="地址传送指令"><code>地址传送指令</code></h3><p><strong>LEA：取偏移地址（近地址指针,当前段内）</strong></p><p><strong>LDS、LES、远地址指针（用于多模块设计）</strong></p><p><strong>将变量的16位偏移地址写入到目标寄存器</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,i;将i变量的内容送给al</span><br><span class="line">lea bx,i;将i变量的地址送给bx</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/618bba3b2ab3f51d910541cb.jpg" alt=""></p><p><strong>note: lea是取地址，mov是取值</strong></p><p><strong>eg:</strong></p><p><img src="https://pic.imgdb.cn/item/618bbb552ab3f51d9105a708.jpg" alt=""></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lea si,MEM1</span><br><span class="line">lea di,MEM2</span><br><span class="line">mov cl,50</span><br><span class="line">AGAIN: </span><br><span class="line">mov al,[si]</span><br><span class="line">mov [di],al</span><br><span class="line">inc si</span><br><span class="line">inc di</span><br><span class="line">dec cl</span><br><span class="line">jnz AGAIN</span><br><span class="line">HLT</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/618bbd3a2ab3f51d91064230.jpg" alt=""></p><h3 id="标志传送指令"><code>标志传送指令</code></h3><p><strong>FLAGS是一个16位的寄存器，一共有9个标志位，其余7个是空闲位</strong></p><p><strong>LAHF：将FLAGS低8位内容(含5个标志位)装入AH</strong></p><p><img src="https://pic.imgdb.cn/item/618bbe852ab3f51d9106ab79.jpg" alt=""></p><p><strong>SAHF：将AH的内容写回到FLAGS低8位中</strong></p><h3 id="输入输出指令"><code>输入输出指令</code></h3><p><strong>端口：除了在CPU内部有寄存器组，接口处也有寄存器组，为了区分，接口里面的寄存器叫做端口，CPU可以直接读写端口</strong></p><p><strong>指令格式：</strong></p><p><strong>IN acc，PORT（port：端口地址）</strong></p><p><strong>OUT PORT，acc（port：端口地址）</strong></p><p><strong>acc——al/ax（绝对不能是ah）</strong></p><p><img src="https://pic.imgdb.cn/item/6191e6062ab3f51d91110dfc.jpg" alt=""></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">in ax,80H;从80H端口读入一个16bit数据到ax（端口地址8位）</span><br><span class="line">mov dx,2400H</span><br><span class="line">in al,dx;从2400H端口读入一个8bit数据（端口地址16位）</span><br><span class="line">out 35h,ax;将ax的值写到35H端口中去</span><br><span class="line">out ax,35H;格式错误！！！</span><br></pre></td></tr></tbody></table></figure><p><strong>note：端口地址有两种，其取决于机器的物理架构，地址处对应的寄存器存放的数据可以是8bit也可以是16bit，和地址无关。</strong></p><h2 id="算术运算类"><code>算术运算类</code></h2><h3 id="加"><code>加</code></h3><p><strong>add：普通相加(影响FLAGS)</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov al,78H;01111000</span><br><span class="line">add al,99h;10011001</span><br><span class="line">;al:00010001</span><br><span class="line">;cf(carry):最高为0，所以向前有进位、cf=1(进位标志)</span><br><span class="line">;sf(senior):最高位为0、sf=0 (最高位标志)</span><br><span class="line">;af(assist):第3位到第4位有进位、af=1  (半加进位标志)</span><br><span class="line">;zf(zero):结果不为0、zf=0(为0判断)</span><br><span class="line">;pf():1个数为偶数、pf=1</span><br><span class="line">;of(overflaw):次高位进位状态和最高位进位状态相同、of=0</span><br></pre></td></tr></tbody></table></figure><p><strong>adc：带进位相加(影响FLAGS)</strong></p><p><strong>add会使进位丢失，adc会保留进位到下一位上去</strong></p><p><img src="https://pic.imgdb.cn/item/6191ee6c2ab3f51d9113499b.jpg" alt=""></p><p><strong>Note:运算前cf的值是随机的一个值，需要先清0，防止干扰运算CLC</strong></p><p><strong>inc：加1指令(只影响5个状态位，不影响cf)</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inc ax;ax++、inc：increase</span><br></pre></td></tr></tbody></table></figure><h3 id="减"><code>减</code></h3><p><strong>SUB：普通减法(影响FLAGS)</strong></p><p><strong>SBB：带借位减法(影响FLAGS)</strong></p><p><strong>DEC：减1指令(只影响5个状态位，不影响cf)</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">       mov bl,2</span><br><span class="line">NEXT1: mov cx,0FFFFH;最高位为A-F时需要在前面加0，便于编译器识别</span><br><span class="line">NEXT2: dec cx</span><br><span class="line">   jnz NEXT2;ZF=0转到NEXT2</span><br><span class="line">   dec bl</span><br><span class="line">   jnz NAXT1;ZF=0转到NEXT1</span><br><span class="line">   HLT    ;暂停</span><br></pre></td></tr></tbody></table></figure><p><strong>NEG：取负数（negative）</strong></p><p><strong>操作数为0时，cf=0，其他情况，cf=1（有借位）</strong></p><p><strong>Note：0减去一个负数——对负数取补码，故又名（求补指令）</strong></p><p><strong>CMP(比较指令，仅影响标志位)</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmp ax,bx;无符号</span><br><span class="line">;ax&gt;bx、无借位、cf=0</span><br><span class="line">;ax&lt;bx、有借位、cf=1</span><br><span class="line">;ax=bx、cf=1、zf=1</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmp ax,bx;有符号</span><br><span class="line">;of AND sf 状态相同、ax&gt;bx</span><br><span class="line">;of AND sf 状态不同、ax&lt;bx</span><br></pre></td></tr></tbody></table></figure><h3 id="乘"><code>乘</code></h3><p><strong>和加减运算指令的区别：对于有符号数和无符号数有不同的助记符号</strong></p><p><strong>1.MUL（无符号数）、采用<code>隐含</code>寻址</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MUL OPRD</span><br><span class="line">;oprd为8位——al*oprd——&gt;ax</span><br><span class="line">;oprd为16位——ax*oprd——&gt;dxax</span><br></pre></td></tr></tbody></table></figure><p><strong>例子：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mul byte ptr[bx];在ds段偏移地址位bx的单元（一个byte）和al相乘</span><br></pre></td></tr></tbody></table></figure><p><strong>2.IMUL（有符号数）、采用<code>隐含</code>寻址</strong></p><h3 id="除"><code>除</code></h3><p><strong>1.DIV（无符号数）（被除数是除数的双倍字长）</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DIV OPRD</span><br><span class="line">;oprd为8位——ax/oprd——&gt;al：商、ah：余数</span><br><span class="line">;oprd为16位——dxax/oprd——&gt;ax：商、dx：余数</span><br></pre></td></tr></tbody></table></figure><p><strong>2.IDIV（有符号数）</strong></p><h3 id="实例"><code>实例</code></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov si,1200h</span><br><span class="line">mov word ptr[si],8765h;数据段偏移si的地方写入一个字</span><br><span class="line">mov al,[si];数据段偏移si的地方的内容（一个字节）写给al</span><br><span class="line">inc si</span><br><span class="line">mul byte pty[si];65h*87h——ax=3543h</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov si,1200h</span><br><span class="line">mov word ptr[si],8765h</span><br><span class="line">mov ax,[si];数据段偏移si的地方的内容（一个字）写给ax</span><br><span class="line">mul word ptr[si];8765h*8765h——&gt;dx=479bh、ax=add9h</span><br></pre></td></tr></tbody></table></figure><p><strong>总结：</strong></p><p><strong>01.使用存储器操作数时，需要用<code>PTR</code>声明操作字长</strong></p><p><strong>02.乘积是乘数的双倍字长，被除数是除数的双倍字长</strong></p><h2 id="逻辑运算类"><code>逻辑运算类</code></h2><p><strong>01.非运算要求操作数不能是立即数</strong></p><p><strong>02.除"非运算"，其余指令的执行都会影响除AF外的标志</strong></p><p><strong>03.无论执行结果如何，都会使标志位OF=CF=0</strong></p><p><strong>04.非运算不影响任何标志位</strong></p><h3 id="与"><code>与</code></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and bl,[si];按位相与，写回bl</span><br><span class="line">and al,0fh;al高四位清零，写回al</span><br><span class="line">and ax,ax;操作数不变，使of和cf清零</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/6199eab02ab3f51d91fa1336.jpg" alt=""></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov dx,3f8h;端口大于一个字节使用dx寄存器</span><br><span class="line">again:</span><br><span class="line">in al,dx;从dx端口读入一个字节</span><br><span class="line">and al,02h;和00000010与（逻辑乘）</span><br><span class="line">jz again;al为0继续循环，否者跳出循环</span><br><span class="line">mov dx,38fh </span><br><span class="line">mov ax,data</span><br><span class="line">out dx,ax</span><br></pre></td></tr></tbody></table></figure><h3 id="或"><code>或</code></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">or cl,0fh;cl高4不变，cl低4为1（逻辑加）</span><br><span class="line">or ax,ax;ax不变，使of=cf=0</span><br></pre></td></tr></tbody></table></figure><p><strong>eg：将一个2进制的9，变成字符9</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;二进制的9：00001001</span><br><span class="line">;字符9的ASCii码:30h</span><br><span class="line">mov al,9;00001001</span><br><span class="line">or al,30h;00111001-39h</span><br></pre></td></tr></tbody></table></figure><h3 id="非"><code>非</code></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">not byte ptr[bx];数据段偏移bx地方的一个字节内容取反再收送回去</span><br></pre></td></tr></tbody></table></figure><h3 id="异或"><code>异或</code></h3><p><strong>Note：相同为0，不同为1（可以看成<code>相减取绝对值</code>）</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xor bl,80h;对bl的最高位取反、80h:10000000</span><br><span class="line">xor ax,ax;对ax清零</span><br></pre></td></tr></tbody></table></figure><h3 id="测试指令"><code>测试指令</code></h3><p><strong>Note：Test的目的在于修改标志位，不计算的 And</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test al,01h;al和01h相与(and)，但不修改al的值</span><br></pre></td></tr></tbody></table></figure><h2 id="移位指令"><code>移位指令</code></h2><h3 id="非循环移位Shift"><code>非循环移位Shift</code></h3><p><strong><code>逻辑</code>：最高/低位移到CF标志位，高/低位补0，不保留符号</strong></p><p><strong>01.逻辑左移(无符号数)</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shl oprd,1 ;为1时可以直接给出</span><br><span class="line">shl oprd,cl;&gt;=1时必须用cl</span><br></pre></td></tr></tbody></table></figure><p><strong>02.逻辑右移(无符号数)</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shr oprd,1 ;为1时可以直接给出</span><br><span class="line">shr oprd,cl;&gt;=1时必须用cl</span><br></pre></td></tr></tbody></table></figure><p><strong>举个例子：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,68h</span><br><span class="line">mov cl,2</span><br><span class="line">shr al,cl</span><br></pre></td></tr></tbody></table></figure><p><strong><code>算术</code>：最高/低位移到CF标志位，高/低位补符号位，保留符号</strong></p><p><strong>01.算术左移(有符号数、补码)</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sal oprd,1 ;为1时可以直接给出</span><br><span class="line">sal oprd,cl;&gt;=1时必须用cl</span><br></pre></td></tr></tbody></table></figure><p><strong>02.算术右移(有符号数、补码)</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sar oprd,1 ;为1时可以直接给出</span><br><span class="line">sar oprd,cl;&gt;=1时必须用cl</span><br></pre></td></tr></tbody></table></figure><p><strong>总结：</strong></p><p><strong>当运算要求保留符号位时，采用算术移位，否者采用逻辑移位，算术移位和逻辑移位都是线性的。</strong></p><h3 id="循环移位Rotate"><code>循环移位Rotate</code></h3><p><strong>不带进位位的循环: 最高位和最低位来回循环，最高/低位放入CF标志位</strong></p><p><strong>01.左移</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rol </span><br></pre></td></tr></tbody></table></figure><p><strong>02.右移</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ror</span><br></pre></td></tr></tbody></table></figure><p><strong>带进位位的循环:CF参与循环移位，构成大的循环</strong><br><strong>01.左移</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rcl </span><br></pre></td></tr></tbody></table></figure><p><strong>02.右移</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rcr</span><br></pre></td></tr></tbody></table></figure><p><strong>应用：</strong></p><p><strong>1.测试某些位的状态</strong></p><p><strong>2.高低位交换</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,12h</span><br><span class="line">mov cl,4</span><br><span class="line">ror al,cl;12h——&gt;21h</span><br></pre></td></tr></tbody></table></figure><p><strong>3.与非循环移位指令一起组成32位或更长字长数的移位</strong></p><p><strong>例题如下：</strong></p><p><strong>Addendum：压缩BCD码使用4位二进制数表示一位十进制数</strong></p><p><img src="https://pic.imgdb.cn/item/619a0bfe2ab3f51d9108f62e.jpg" alt=""></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lea si,m1</span><br><span class="line">lea di,m2</span><br><span class="line">mov ch,4</span><br><span class="line">Next:</span><br><span class="line">mov al,[si]</span><br><span class="line">mov bl,al</span><br><span class="line">and al,0fh;高4位清零</span><br><span class="line">or al,30h;高4位变成3，相当于加30h</span><br><span class="line">mov [di],al</span><br><span class="line">inc di</span><br><span class="line">mov al,bl</span><br><span class="line">mov cl,4</span><br><span class="line">shr al,cl</span><br><span class="line">or al,30h</span><br><span class="line">mov [di],al</span><br><span class="line">inc di</span><br><span class="line">inc si</span><br><span class="line">dec ch</span><br><span class="line">jnz Next</span><br><span class="line">hlt</span><br></pre></td></tr></tbody></table></figure><h2 id="串操作指令"><code>串操作指令</code></h2><p><img src="https://pic.imgdb.cn/item/619a2f762ab3f51d91174bd7.jpg" alt=""></p><p><strong>Note：SI——Source、DI——Direction</strong></p><h3 id="重复前缀"><code>重复前缀</code></h3><p><strong>01.无条件重复</strong></p><p><strong>REP——当cx!=0时REP后的指令将继续重复执行</strong></p><p><strong>02.条件重复</strong></p><p><strong>REPE(REPZ)——CX!=0 and zf=1（相等——Equal相减为0——Zero）</strong></p><p><strong>REPNE(REPNZ)——CX!=0 and zf=0（不相等——NE，相减不为0——NZ）</strong></p><p><img src="https://pic.imgdb.cn/item/619a35de2ab3f51d911a5eda.jpg" alt=""></p><h3 id="MOVSB和CMPSB"><code>MOVSB和CMPSB</code></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lea si,mem1</span><br><span class="line">les di,mem2</span><br><span class="line">mov cx,200</span><br><span class="line">cld ;clear df(destination flag清0)</span><br><span class="line">rep movsb;按字节传送</span><br><span class="line">cld</span><br><span class="line">repe cmpsb</span><br><span class="line">jz stop</span><br><span class="line">dec si</span><br><span class="line">mov al,[si]</span><br><span class="line">movbx,al</span><br><span class="line">stop:</span><br><span class="line">hlt</span><br></pre></td></tr></tbody></table></figure><h3 id="SCASB和SCASW"><code>SCASB和SCASW</code></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mov di,2000h</span><br><span class="line">mov bx,di</span><br><span class="line">mov cx,10;查询次数</span><br><span class="line">mov al,'A';待查询字符</span><br><span class="line">CLD;从上往下搜索</span><br><span class="line">repne scasb;不相等（不等于零）时继续扫描</span><br><span class="line">jz Found;相等（等于0）时跳出循环（jz——judge zf）</span><br><span class="line">Found:</span><br><span class="line">dec di</span><br><span class="line">mov data2,di</span><br><span class="line">inc di</span><br><span class="line">sub di,bx;查询次数为di</span><br></pre></td></tr></tbody></table></figure><h3 id="LODSB和LODSW"><code>LODSB和LODSW</code></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lodsb ;al&lt;--[ds:si]</span><br><span class="line">lodsw ;ax&lt;--[ds:si]</span><br></pre></td></tr></tbody></table></figure><p><strong>一般不加重复前缀</strong></p><h3 id="STOSB和STOSW"><code>STOSB和STOSW</code></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stosb ;al--&gt;[es:si]</span><br><span class="line">stosw ;ax--&gt;[es:si]</span><br></pre></td></tr></tbody></table></figure><h2 id="程序控制指令"><code>程序控制指令</code></h2><h3 id="转移指令"><code>转移指令</code></h3><p><strong>01.JMP（段内、无条件）</strong></p><p><strong>Note：地址放在寄存器中（16bit）</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmp lable;段内直接转移</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov bx,1200h</span><br><span class="line">jmp bx;段内间接转移</span><br><span class="line">mov bx,1200</span><br><span class="line">jmp word ptr[bx]</span><br></pre></td></tr></tbody></table></figure><p><strong>02.JMP FAR(段间、无条件)</strong></p><p><strong>Note：地址放在内存中（32bit）</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmp dword ptr[bx];CS：高字节、IP：低字节</span><br></pre></td></tr></tbody></table></figure><p><strong>03.条件转移指令</strong></p><p><img src="https://pic.imgdb.cn/item/619b74be2ab3f51d91938776.jpg" alt=""><br><img src="https://pic.imgdb.cn/item/619b74dc2ab3f51d9193969a.jpg" alt=""><br><strong>例题：</strong><br><img src="https://pic.imgdb.cn/item/619b74f12ab3f51d9193a635.jpg" alt=""></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">xor al,al</span><br><span class="line">mov plus,al</span><br><span class="line">mov minus,al</span><br><span class="line">mov zero,al</span><br><span class="line">mov cx,100</span><br><span class="line">cld</span><br><span class="line">check:</span><br><span class="line">lodsb</span><br><span class="line">or al,al</span><br><span class="line">js x1</span><br><span class="line">jz x2</span><br><span class="line"></span><br><span class="line">x0:inc plus</span><br><span class="line">x1: inc minus</span><br><span class="line">x2: inc zero</span><br></pre></td></tr></tbody></table></figure><h3 id="循环控制"><code>循环控制</code></h3><h3 id="过程调用"><code>过程调用</code></h3><h3 id="中断控制"><code>中断控制</code></h3><p><strong>续行符——" \ "</strong></p><p><strong>汇编语言默认不区分大小写</strong></p><p><strong>执行结束——不等于—— 汇编结束</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">;inc——increase</span><br><span class="line">;dec——decrease</span><br><span class="line">;jmp——jump</span><br><span class="line">;jc——jump carry</span><br><span class="line">;jnz——jump not zero(cx不为0跳转)</span><br><span class="line">;jnc——jump not carry</span><br><span class="line">;lahf——lay low flags to ah</span><br><span class="line">;sahf——</span><br></pre></td></tr></tbody></table></figure><p><strong>masm有一个不成文的规定，那就是在定义完数据段后，所定义的变量均向后100h个单元，需要我们将ds段寄存器置位，在程序的start:后面加上如下指令：<br>mov ax,data<br>mov ds,ax</strong></p><h1><code>程序实例</code></h1><h2 id="一"><code>一</code></h2><p><strong>向内存0:200-0:23F依次传送数据0-63（3FH）</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">date SEGMENT</span><br><span class="line">date ENDS</span><br><span class="line">code SEGMENT</span><br><span class="line">    ASSUME cs:code,ds:date</span><br><span class="line">    start:</span><br><span class="line">        mov ax,0    ;初始化段地址</span><br><span class="line">        mov ds,ax</span><br><span class="line">        mov bx,200h ;初始化偏移地址</span><br><span class="line">        mov cx,64   ;循环64-1、共63次</span><br><span class="line">        mov dx,0    ;传入数据</span><br><span class="line">    C:</span><br><span class="line">        mov [bx],dx</span><br><span class="line">        inc dx</span><br><span class="line">        inc bx</span><br><span class="line">        Loop C</span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line">code ENDS</span><br><span class="line">    END start</span><br></pre></td></tr></tbody></table></figure><h2 id="二"><code>二</code></h2><p><strong>编写code段代码，用push指令将a段中的word数据逆序存储到b段中</strong></p><p><img src="https://pic.imgdb.cn/item/619d89e42ab3f51d91605c08.jpg" alt=""></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code SEGMENT</span><br><span class="line">    a SEGMENT</span><br><span class="line">        dw 1,2,3,4,5,6,7,8</span><br><span class="line">    a ENDS</span><br><span class="line">    b SEGMENT</span><br><span class="line">        dw 0,0,0,0,0,0,0,0</span><br><span class="line">    b ENDS</span><br><span class="line">    start:</span><br><span class="line">        mov ax,b    ;初始化</span><br><span class="line">        mov ss,ax</span><br><span class="line">        mov sp,16</span><br><span class="line">        mov ax,a</span><br><span class="line">        mov ds,ax</span><br><span class="line">        mov bx,0</span><br><span class="line">        mov cx,8</span><br><span class="line">    C: </span><br><span class="line">        mov dx,word ptr [bx]</span><br><span class="line">        push dx</span><br><span class="line">        add bx,2</span><br><span class="line">        loop C</span><br><span class="line">code ENDS</span><br><span class="line">    END start</span><br></pre></td></tr></tbody></table></figure><h1><code>补充</code></h1><h2 id="MOV-传送代名字项"><code>MOV 传送代名字项</code></h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">date segment</span><br><span class="line">m1 db 'ABCDEF$'</span><br><span class="line">date ends</span><br><span class="line">code segment</span><br><span class="line">assume cs:code,ds:date</span><br><span class="line">start:</span><br><span class="line">mov ax,date</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,m1+2;将m1+2地址指向的内容往后两个字节传给ax</span><br><span class="line">;低给低、高给高</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="数据段定义内容存放"><code>数据段定义内容存放</code></h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">date segment</span><br><span class="line">m1 db 'abcdefg';低——&gt;高:abcdefg</span><br><span class="line">;只有db可以在一个''内合起来定义，其他的不可以合起来</span><br><span class="line">m2 dw 'AB','CD','EF';低——&gt;高:BADCEF</span><br><span class="line">date ends</span><br></pre></td></tr></tbody></table></figure><h2 id="数据段向寄存器传送内容"><code>数据段向寄存器传送内容</code></h2><p><strong>无论数段如何定义，始终低地址给低位，高地址给高位</strong></p>]]></content>
      
      
      <categories>
          
          <category> B_编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2021/10/02/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/P_%E6%8E%92%E5%BA%8F/G_%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/10/02/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/P_%E6%8E%92%E5%BA%8F/G_%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="核心思想"><code>核心思想</code></h2><p><strong>不断二分，直到分为一个最小单元，然后借助辅助数组进行并的操作。</strong></p><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> temp[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++)</span><br><span class="line">temp[i] = a[i];</span><br><span class="line"><span class="keyword">int</span> i = left, j = mid + <span class="number">1</span>, k = left;</span><br><span class="line"><span class="keyword">while</span> (k &lt;= right)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (i &lt;= mid &amp;&amp; j &lt;= right)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (temp[i] &lt;= temp[j])</span><br><span class="line">a[k++] = temp[i++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[k++] = temp[j++];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (j == right + <span class="number">1</span>)</span><br><span class="line">a[k++] = temp[i++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[k++] = temp[j++];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">mergeSort</span>(a,left, mid);</span><br><span class="line"><span class="built_in">mergeSort</span>(a, mid+<span class="number">1</span>,right);</span><br><span class="line"><span class="built_in">merge</span>(a, left, mid, right);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>], n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="built_in">mergeSort</span>(a, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cout &lt;&lt; a[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 归并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning How to Learn</title>
      <link href="/2021/09/30/Z_%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/Learning%20How%20to%20Learn/"/>
      <url>/2021/09/30/Z_%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/Learning%20How%20to%20Learn/</url>
      
        <content type="html"><![CDATA[<h2 id="大脑的两种模式"><code>大脑的两种模式</code></h2><p><strong>专注模式和发散模式</strong></p><p><strong>这是两种完全不同的模式，就像硬币的两面，一次只能看见一个面。</strong></p><p><strong>学习困难的事情时我们需要在两种不同模式之间的来回<code>切换</code>，这样才能更好的学习。</strong></p><h2 id="面对拖延症"><code>面对拖延症</code></h2><p><strong>理论：当我们做不喜欢的事情时，会有神经上的不适感，但我们真的去做时，这种不适感会很快消失。</strong></p><p><strong>策略：1.定时25分钟 2.屏蔽会打扰你的事物  3.完全专注  4.小奖励😀</strong></p><h2 id="数理类学科为何更难学？"><code>数理类学科为何更难学？</code></h2><p><strong>原因：数理类学科往往伴随着抽象的的符号和定义，我们无法类比隐喻。</strong></p><p><strong>策略：<code>熟能生巧</code>，越是抽象的东西越要进行练习，练习加强形成的神经元模式，直到我们熟练掌握。</strong></p><blockquote><p>Note：在学习的时候我们需要拼命专注，就像举重练习一样，要拼尽全力，不能懒散。学习完毕后，我们需要适当的休息或者转移注意力到其他不那么耗脑力的事物上。</p></blockquote><h2 id="记忆的两种模式"><code>记忆的两种模式</code></h2><p><strong>工作记忆：及时的记忆模式，像一块模糊的黑板，有效容量为 4</strong></p><p><strong>长期记忆：像我们熟知的仓库一样。</strong></p><p><strong>策略：将工作记忆放到长期记忆的最好方法时间隔去重复工作记忆</strong></p><p><strong>例如：一个星期的一、二、三、五、七（Anki大法！！！）</strong></p><h2 id="睡眠对学习的重要性"><code>睡眠对学习的重要性</code></h2><p><strong>睡眠可以清除我们脑中的毒素，使我们脑袋更清醒。</strong></p><p><strong>睡眠时，我们的前额叶皮质完全解放出来，这样就能让其加强我们的神经元模式。</strong></p><p><strong>是时候小睡一会了！！！</strong></p><h2 id="类比的用处"><code>类比的用处</code></h2><p><strong>学习一样新的事物时，可以与现实中的事物类比，这样便于我们更好的理解。</strong></p><h2 id="组块"><code>组块</code></h2><p><strong>1.专注</strong></p><p><strong>在你精神力强的时段屏蔽一切会干扰你的事情，拿出25min</strong></p><p><strong>2.理解</strong></p><p><strong>对于题解，我们不能太过深究某个细节，我们还要理解步骤之间的联系。即：为何进行这一步？</strong></p><p><strong>3.练习</strong></p><p><strong>将你学到的东西运用起来，你要知道在哪里会用到他们。</strong></p><h2 id="一些小技巧"><code>一些小技巧</code></h2><p><strong>（一）阅读+回顾（反复）</strong></p><p><strong>回顾的同时加强了我们对知识的理解，切勿毫无理解就搭建思维导图，也不要低效地反复阅读。</strong></p><p><strong>Note：在常规条件外回顾会加强我们对材料的理解</strong></p><p><strong>（三）一种看待记忆的方式</strong></p><p><strong>组块化使我们大脑工作记忆的缓存被清理</strong></p><p><strong>（三）学习是对能力的错觉</strong></p><p><strong>看一眼答案就以为自己会了</strong></p><p><strong>对书籍做大量标记</strong></p><p><strong>Note：我们喜欢重读笔记或课本的原因是，这些行为不那么痛苦，会让我们有一种知识就在脑海中的错觉，只会自欺欺人。</strong></p><p><strong>应对策略：自测</strong></p>]]></content>
      
      
      <categories>
          
          <category> Z_杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贝叶斯</title>
      <link href="/2021/09/29/S_%E6%95%B0%E5%AD%A6/B_%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
      <url>/2021/09/29/S_%E6%95%B0%E5%AD%A6/B_%E8%B4%9D%E5%8F%B6%E6%96%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="贝叶斯公式"><code>贝叶斯公式</code></h2><p><strong>公式造型：</strong><img src="https://pic.imgdb.cn/item/61543d452ab3f51d914e9281.jpg" alt="贝叶斯公式" style="zoom:50%;"></p><p><strong>P(A|B): ‘|’ 表示given、存在前提的意思，P(A|B)指在B事件发生的条件下A事件发生的概率。</strong></p><p><strong>推理过程：</strong></p><p><strong>(一) A problem about Steve</strong></p><p><img src="https://pic.imgdb.cn/item/61543efc2ab3f51d91506081.jpg" alt=""></p><hr><p><strong>(二)常常忽略的一点！！！</strong></p><p><strong>在考虑概率的大小的同时，不能够感性的去判断，我们需要理性的去分析概率和什么有关系，常常会我们会忽略的一点是Librarian和Farmer的比例。</strong></p><hr><p><strong>(三)将Librarian和Farmer的比例考虑在内</strong></p><p><strong>假设Librarian和Farmer的比例为1：20，假设有10名Librarian和20名Farmer。我们可以将一个正方形分成两部分来分别表示Librarian和Farmer，面积之比为1：20 (其实这就是先验概率)</strong></p><hr><p><strong>(四)考虑这两部分各自独立的概率</strong></p><p><img src="https://pic.imgdb.cn/item/615441ee2ab3f51d915383d9.jpg" alt=""></p><hr><p><strong>(五)完整公式</strong></p><p><img src="https://pic.imgdb.cn/item/615442ab2ab3f51d91544058.jpg" alt=""></p><p><strong>消去总人数</strong></p><p><img src="https://pic.imgdb.cn/item/615443272ab3f51d9154bbe0.jpg" alt=""></p><p><strong>贝叶斯公式！！！</strong></p><p><img src="https://pic.imgdb.cn/item/6154438b2ab3f51d9155162f.jpg" alt=""></p><p><strong>P(E)是更常见的写法，它表示在全体样本(210人)中符合我们要求的人(4+20)的概率。</strong></p>]]></content>
      
      
      <categories>
          
          <category> S_数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率论 </tag>
            
            <tag> Math </tag>
            
            <tag> 贝叶斯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="/2021/09/29/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/P_%E6%8E%92%E5%BA%8F/C_%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/09/29/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/P_%E6%8E%92%E5%BA%8F/C_%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="核心思想"><code>核心思想</code></h2><p><strong>i扫描整个集合，借助j，不断将i位点的数插入到已排序的集合中</strong></p><h2 id="运用优势"><code>运用优势</code></h2><p><strong>对于部分有序的排序问题，插入排序的运行是线性的，速度非常快！</strong></p><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//i为已排序和未排序集合的分界点</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> j = i;<span class="comment">//比较的起始位点</span></span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (a[j] &lt; a[j<span class="number">-1</span>])<span class="comment">//不断和左边比较</span></span><br><span class="line">{</span><br><span class="line">t = a[j]; a[j] = a[j<span class="number">-1</span>]; a[j<span class="number">-1</span>] = t;</span><br><span class="line">}</span><br><span class="line">j--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="优化代码"><code>优化代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> j = i, t;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">2</span>&amp;&amp;a[j]&lt;a[j<span class="number">-1</span>])</span><br><span class="line">{</span><br><span class="line">t = a[j]; a[j] = a[j - <span class="number">1</span>]; a[j - <span class="number">1</span>] = t;</span><br><span class="line">j--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cout &lt;&lt; a[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 插入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2021/09/29/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/P_%E6%8E%92%E5%BA%8F/K_%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/09/29/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/P_%E6%8E%92%E5%BA%8F/K_%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="基本思想"><code>基本思想</code></h2><p><strong>基准数的比较产生交换，基准数就位，递归</strong></p><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySort</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> temp = a[left];</span><br><span class="line"><span class="keyword">int</span> i = left;</span><br><span class="line"><span class="keyword">int</span> j = right;</span><br><span class="line"><span class="keyword">while</span> (i != j)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (j &gt; i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (a[j] &lt;= temp)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">j--;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; temp)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> t = a[i];</span><br><span class="line">a[i] = a[j];</span><br><span class="line">a[j] = t;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">a[left] = a[i];</span><br><span class="line">a[i] = temp;</span><br><span class="line"><span class="built_in">mySort</span>(left, i<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">mySort</span>(i + <span class="number">1</span>, right);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="built_in">mySort</span>(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 快速 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>希尔排序</title>
      <link href="/2021/09/29/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/P_%E6%8E%92%E5%BA%8F/X_%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/09/29/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/P_%E6%8E%92%E5%BA%8F/X_%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="核心思想"><code>核心思想</code></h2><p><strong>使用不同增量进行排序，使待排数组逐渐趋于有序，最终进行-1排序，其实就是插入排序，所以最终一定会得到正确的排序。</strong></p><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>], n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (h &lt; n)<span class="comment">//使用1、4、13、的增量</span></span><br><span class="line">h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line">h /= <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (h &gt;= <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h + <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//h-sort</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> j = i, t;</span><br><span class="line"><span class="keyword">while</span> (j - h &gt;= <span class="number">1</span>)<span class="comment">//防止越界</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (a[j] &lt; a[j - h])</span><br><span class="line">{</span><br><span class="line">t = a[j]; a[j] = a[j - h]; a[j - h] = t;</span><br><span class="line">}</span><br><span class="line">j -= h;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; h &lt;&lt; <span class="string">"-sort"</span> &lt;&lt; endl;</span><br><span class="line">h /= <span class="number">3</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="更优代码"><code>更优代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (h &lt; n)</span><br><span class="line">h = h * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">h /= <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (h)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//h-sort</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> j = i, t;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= h + <span class="number">1</span> &amp;&amp; a[j] &lt; a[j - h])</span><br><span class="line">{</span><br><span class="line">t = a[j]; a[j] = a[j - h]; a[j - h] = t;</span><br><span class="line">j -= h;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">h /= <span class="number">3</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cout &lt;&lt; a[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 希尔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="/2021/09/29/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/P_%E6%8E%92%E5%BA%8F/X_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/09/29/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/P_%E6%8E%92%E5%BA%8F/X_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="核心思想"><code>核心思想</code></h2><p><strong>i扫描整个集合，将未排序的集合的最小最值和 i 位点交换,形成已排序集合</strong></p><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)<span class="comment">//i为已排序和未排序集合的分界点</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> k = i;<span class="comment">//用来寻找未排序集合的最小值的下标(初始化为i、即未排序集合起点)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++)<span class="comment">//未排序集合（j到n）</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (a[k] &gt; a[j])</span><br><span class="line">k = j;</span><br><span class="line">}</span><br><span class="line">t = a[i]; a[i] = a[k]; a[k] = t;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 选择 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>积极心理学（三）</title>
      <link href="/2021/09/19/J_%E7%A7%AF%E6%9E%81%E5%BF%83%E7%90%86%E5%AD%A6/3/"/>
      <url>/2021/09/19/J_%E7%A7%AF%E6%9E%81%E5%BF%83%E7%90%86%E5%AD%A6/3/</url>
      
        <content type="html"><![CDATA[<h2 id="有关自助书籍的真相"><code>有关自助书籍的真相</code></h2><p><strong>（一）《思考致富》《秘密》《正面思考的力量》等书籍过分强调了思考创造现实，创造成功这一事实。但这只是等式的<code>一半</code>，成功除了相信，还离不开<code>辛勤的工作</code>。如果仅仅依靠相信，言过其实，效果甚微，甚至造成毁灭性的后果。</strong></p><p><strong>（二）苏格兰皇家银行《正面思考》短片</strong></p><h2 id="不可忽视的精神力量"><code>不可忽视的精神力量</code></h2><h3 id="论据"><code>论据</code></h3><p><strong>安慰剂效应</strong><br><strong>失效的吐根</strong><br><strong>过敏植物</strong></p><h2 id="精神力量强大的科学依据"><code>精神力量强大的科学依据</code></h2><h3 id="理论"><code>理论</code></h3><p><strong>动力+重构一致性是我们精神力量强大大原因。</strong></p><table><thead><tr><th style="text-align:center">重构图式和外界信息一致性的4种方式</th></tr></thead><tbody><tr><td style="text-align:center"><strong>①更新图式（积极/消极）</strong></td></tr><tr><td style="text-align:center"><strong>②忽视外界信息（积极/消极）</strong></td></tr><tr><td style="text-align:center"><strong>③主动验证，寻找符合我们图式的证据（积极/消极）</strong></td></tr><tr><td style="text-align:center"><strong>④创造新的现实（积极/消极）</strong></td></tr></tbody></table><h3 id="论据-v2"><code>论据</code></h3><p><strong>（一）Roger Banister相信他能跑进4分钟以内，干劲十足，最终④创造了新的现实。</strong></p><p><strong>（二）爱迪生对失败5000次用主观解读来①更新他的图式并④创造新的现实</strong></p><p><strong>（三）宣传人类在六十年代末登月④创造新的现实</strong></p><p><strong>Note：成功别无他法，我们都是从失败走向成功，相信自己可以成功并干劲十足地去创造属于我们的新的现实</strong></p><h2 id="目标设定上的区别"><code>目标设定上的区别</code></h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">悲观主义者</th><th style="text-align:center">乐观主义者</th></tr></thead><tbody><tr><td style="text-align:center"><strong>短期</strong></td><td style="text-align:center"><strong>现实</strong></td><td style="text-align:center"><strong>不现实</strong></td></tr><tr><td style="text-align:center"><strong>长期</strong></td><td style="text-align:center"><strong>现实</strong></td><td style="text-align:center"><strong>现实</strong></td></tr></tbody></table><h3 id="解释"><code>解释</code></h3><p><strong>（1）悲观主义者信念低下，所以他们消极地面对他们的目标，最终失败了他会向人们解释，他本来就说过了他做不好，偶尔的成功他也会认为是运气使然，所以从短期还是长期来看他们的目标一直很现实。</strong><br><strong>（2）乐观主义者拥有很高的信念于是设立很高的目标，从短期来看他的目标很不现实，但他从失败中学习，一次又一次，认为自己会做到，并辛勤劳动，最终他实现了他的目标，所以从长期来看他们的目标又是现实的</strong></p><h3 id="实践"><code>实践</code></h3><p><strong>试着像乐观者一样思考，设立短期不现实而长期现实的目标，从失败中学习，创造属于你的现实。</strong></p>]]></content>
      
      
      <categories>
          
          <category> J_积极心理学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="/2021/09/19/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%A0%91%E3%80%81%E5%9B%BE/T_%E5%9B%BE/"/>
      <url>/2021/09/19/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%A0%91%E3%80%81%E5%9B%BE/T_%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="邻接矩阵"><code>邻接矩阵</code></h2><h3 id="无向图"><code>无向图</code></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> map[MAX][MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">map[a][b] = <span class="number">1</span>;</span><br><span class="line">map[b][a] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="有向图"><code>有向图</code></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> map[MAX][MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">map[a][b] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="带权图"><code>带权图</code></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> map[MAX][MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">memset</span>(map, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(map));</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">map[a][b] = c;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="邻接表"><code>邻接表</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">note</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> date;</span><br><span class="line">note* next;</span><br><span class="line">}Note,*Link;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Link p,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">*(p + i) = { i,<span class="literal">NULL</span> };</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Link s,<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Link t = <span class="keyword">new</span> Note;</span><br><span class="line">*t = { b,(s + a)-&gt;next };</span><br><span class="line">(s + a)-&gt;next = t;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">Link p = <span class="keyword">new</span> Note[n+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">init</span>(p,n);</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="built_in">add</span>(p, a, b);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="链式向前星"><code>链式向前星</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxe = <span class="number">20000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头节点、边序号、边数组</span></span><br><span class="line"><span class="keyword">int</span> head[maxn], cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> to, w, next;</span><br><span class="line">}edge[maxe];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">edge[++cnt].to = v;</span><br><span class="line">edge[cnt].w = w;</span><br><span class="line">edge[cnt].next = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="built_in">add</span>(a, b, c);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = head[<span class="number">1</span>]; i; i = edge[i].next)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Catch That Cow</title>
      <link href="/2021/09/19/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Catch%20That%20Cow/"/>
      <url>/2021/09/19/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Catch%20That%20Cow/</url>
      
        <content type="html"><![CDATA[<h1><code>题目来源</code></h1><p><strong><a href="http://poj.org/problem?id=3278">Catch That Cow</a></strong></p><h1><code>题目解析</code></h1><h2 id="BFS"><strong>BFS</strong></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> book[MAX], d[MAX];<span class="comment">//d[b]表示的是n点到b点所需的时间</span></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">book[n] = <span class="number">1</span>;</span><br><span class="line">d[n] = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(n);</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (u == k)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; d[k];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">x = u + <span class="number">1</span>;<span class="comment">//往右走</span></span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= <span class="number">100000</span> &amp;&amp; book[x] == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">d[x] = d[u] + <span class="number">1</span>;</span><br><span class="line">book[x] = <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(x);</span><br><span class="line">}</span><br><span class="line">x = u - <span class="number">1</span>;<span class="comment">//往左走</span></span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= <span class="number">100000</span> &amp;&amp; book[x] == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">d[x] = d[u] + <span class="number">1</span>;</span><br><span class="line">book[x] = <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(x);</span><br><span class="line">}</span><br><span class="line">x = u * <span class="number">2</span>;<span class="comment">//穿越</span></span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= <span class="number">100000</span> &amp;&amp; book[x] == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">d[x] = d[u] + <span class="number">1</span>;</span><br><span class="line">book[x] = <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(x);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">bfs</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="DFS（n到k）"><strong>DFS（n到k）</strong></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时间超限</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n, k, m = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (step &gt; m)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (x == k)</span><br><span class="line">{</span><br><span class="line">m = <span class="built_in">min</span>(m, step);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">dfs</span>(x + <span class="number">1</span>, step + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (x &lt; k)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">dfs</span>(x + <span class="number">1</span>, step + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs</span>(x - <span class="number">1</span>, step + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs</span>(x * <span class="number">2</span>, step + <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (x &gt; k)</span><br><span class="line"><span class="built_in">dfs</span>(k, step + (x - k));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">dfs</span>(n,<span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; m;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="DFS（k到n）"><strong>DFS（k到n）</strong></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (t &lt;= n)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(n - t, <span class="number">2</span> * t - n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">dfs</span>(t / <span class="number">2</span>) + <span class="number">1</span>, t - n);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">min</span>(<span class="built_in">dfs</span>(t + <span class="number">1</span>) + <span class="number">1</span>, <span class="built_in">dfs</span>(t - <span class="number">1</span>) + <span class="number">1</span>), t - n);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">if</span> (n &gt;= k)</span><br><span class="line">cout &lt;&lt; n - k;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)<span class="comment">//先向前走一步</span></span><br><span class="line">{</span><br><span class="line">n = <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">dfs</span>(k) + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">dfs</span>(k);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 算法 </tag>
            
            <tag> 搜索🔍 </tag>
            
            <tag> BFS </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ideal Path</title>
      <link href="/2021/09/19/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Ideal%20Path/"/>
      <url>/2021/09/19/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Ideal%20Path/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="https://vjudge.net/problem/UVA-1599">Ideal Path</a></strong></p><h2 id="AC代码"><code>AC代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxe 200001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, flag = <span class="number">1</span>;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q1, q2, q3;</span><br><span class="line"><span class="keyword">int</span> book1[maxn], h[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//头节点、边序号</span></span><br><span class="line"><span class="keyword">int</span> head[maxn], cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> to, c, next;</span><br><span class="line">}e[maxe];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">e[++cnt].to = v;</span><br><span class="line">e[cnt].c = c;</span><br><span class="line">e[cnt].next=head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs1</span><span class="params">()</span><span class="comment">//逆向标高</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> u;</span><br><span class="line">h[n] == <span class="number">0</span>;</span><br><span class="line">q1.<span class="built_in">push</span>(n);<span class="comment">//初始化</span></span><br><span class="line">book1[n] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!q1.<span class="built_in">empty</span>())</span><br><span class="line">{</span><br><span class="line">u = q1.<span class="built_in">front</span>();</span><br><span class="line">q1.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].next)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (book1[e[i].to] == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">h[e[i].to] = h[u] + <span class="number">1</span>;</span><br><span class="line">q1.<span class="built_in">push</span>(e[i].to);</span><br><span class="line">book1[e[i].to] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; h[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">q1.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">q2.<span class="built_in">push</span>(inf);</span><br><span class="line"><span class="keyword">int</span> u, c;</span><br><span class="line"><span class="keyword">while</span> (!q1.<span class="built_in">empty</span>())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> minc = inf - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!q1.<span class="built_in">empty</span>())<span class="comment">//寻找每一层的最小值</span></span><br><span class="line">{</span><br><span class="line">u = q1.<span class="built_in">front</span>();</span><br><span class="line">c = q2.<span class="built_in">front</span>();</span><br><span class="line">q1.<span class="built_in">pop</span>();q2.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (minc &gt; c)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (!q3.<span class="built_in">empty</span>())</span><br><span class="line">q3.<span class="built_in">pop</span>();</span><br><span class="line">minc = c;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (minc == c)</span><br><span class="line">q3.<span class="built_in">push</span>(u);<span class="comment">//将最近临接点入队</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (minc != inf - <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">cout &lt;&lt; minc;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (!q3.<span class="built_in">empty</span>())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> u = q3.<span class="built_in">front</span>();</span><br><span class="line">q3.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].next)</span><br><span class="line"><span class="keyword">if</span> (h[e[i].to] == h[u] - <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">q1.<span class="built_in">push</span>(e[i].to);</span><br><span class="line">q2.<span class="built_in">push</span>(e[i].c);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].next)</span><br><span class="line"><span class="keyword">if</span> (h[e[i].to] == h[u] - <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">q1.<span class="built_in">push</span>(e[i].to);</span><br><span class="line">q2.<span class="built_in">push</span>(e[i].c);</span><br><span class="line">book2[e[i].to] == <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="built_in">add</span>(a, b, c);</span><br><span class="line"><span class="built_in">add</span>(b, a, c);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">bfs1</span>();</span><br><span class="line"><span class="built_in">bfs2</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="代码解析"><code>代码解析</code></h2><blockquote><p>问题一：为什么要反向标记高度？</p></blockquote><p><strong>答：逆向标高是为了正向求解做铺垫，在正向求解时往高度减一的方向进行，其截至条件就是高度为0即n的位置，因为高度为0的点只有一个，所以这样可以确保正向求解一定会到达n点。</strong></p>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 搜索🔍 </tag>
            
            <tag> BFS </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>积极心理学（二）</title>
      <link href="/2021/09/17/J_%E7%A7%AF%E6%9E%81%E5%BF%83%E7%90%86%E5%AD%A6/2/"/>
      <url>/2021/09/17/J_%E7%A7%AF%E6%9E%81%E5%BF%83%E7%90%86%E5%AD%A6/2/</url>
      
        <content type="html"><![CDATA[<h2 id="准许为人"><code>准许为人</code></h2><h3 id="理论"><code>理论</code></h3><p><strong>人类<code>情绪</code>就像<code>万有引力</code>一样，都是<code>客观</code>存在的，我们<code>无法改变</code>！</strong></p><h3 id="论据"><code>论据</code></h3><p><strong>忽视<code>万有引力</code>造飞船</strong><br><strong><code>大骗局</code>（告诉他人自己很好）</strong><br><strong><code>AA运动</code>宣言</strong></p><h3 id="实践"><code>实践</code></h3><p><strong>一、<code>ABC理论</code>：我们无条件接受自己的情绪，但是<code>不代表我们屈服</code>于自己的情绪，在<code>行为</code>上我们选择<code>道德</code>的做法！</strong><br><strong>二、<code>冥想</code>：在<code>情感上感受</code>准许为人的含义。链接：<a href="https://open.163.com/newview/movie/free?pid=M6HV755O6&amp;mid=M6HV8QB3T">1:04:35</a></strong></p><hr><h2 id="人们总是按你做的做"><code>人们总是按你做的做</code></h2><h3 id="理论-v2"><code>理论</code></h3><p><strong>人们总是按你做的做，而非说的做！</strong></p><h3 id="论据-v2"><code>论据</code></h3><p><strong>一、<code>圣雄甘地</code>吃太多糖</strong><br><strong>二、将手放在<code>脸颊</code>上的测试</strong><br><strong>三、<code>成为</code>你想在<code>世界上</code>想看到的<code>改变</code>！（Nice）</strong></p><h3 id="实践-v2"><code>实践</code></h3><p><strong>以身作则：不要告诉别人该怎么办，你应该<code>以身作则</code>先办到那件事再说！当你办到那件事情后，你就成为了<code>榜样</code>。传播快乐的最好方法是<code>争取自己的快乐</code>，教育孩子诚实的方法是<code>自己先要诚实</code>，我们需要当一个<code>务实的理想主义者</code>，理想和善意是远远不够的，最重要的是我们的<code>行动</code>！</strong></p><hr><h2 id="信念即自我完成预言"><code>信念即自我完成预言</code></h2><h3 id="理论-v3"><code>理论</code></h3><p><strong>信念激发我们本身存在的潜能，潜能被激发，我们更容易实现我们要做的事情，信念成了自我实现的预言！</strong></p><h3 id="论据-v3"><code>论据</code></h3><p><strong>Roger Banister——梦想一英里——突破心理界限</strong><br><strong>皮格马利翁效应 —— 期望越高，成绩越好。</strong><br><strong>快速迸发者测试 —— 老师对学生的信念</strong><br><strong>对老师的信念，对员工的信念！</strong></p><blockquote><p><strong>人们怎样便怎样待他，他便还是那样的人，一个人能够或应该怎样便怎样待他，他便会成为能够怎样或应当怎样的人 —— 歌德</strong></p></blockquote><h3 id="实践-v3"><code>实践</code></h3><p><strong>我相信我可以完成这件事情，我相信他能完成这件事情，我的信念预言着事情最终被我实现！！！</strong></p><hr><h2 id="情境的力量"><code>情境的力量</code></h2><h3 id="理论-v4"><code>理论</code></h3><p><strong>情境的力量是巨大的！！！</strong></p><h3 id="论据-v4"><code>论据</code></h3><p><strong>权力服从研究</strong><br><strong>监狱实验——犯人和狱警两种角色的情境</strong><br><strong>75岁以上的男人在20年前的环境中生活——心理和生理年龄减小</strong><br><strong>飞行模拟器中视力变化</strong><br><strong>映射实验</strong></p><h3 id="实践-v4"><code>实践</code></h3><p><strong>通过映射构建有意识的和潜意识的积极环境</strong><br><strong>在身边放置爱人的照片，喜欢的画作等</strong><br><strong>放置喜爱的名人名言</strong><br><strong>阅读喜欢的书籍，积极的电影，听喜欢的音乐(不要当作背景音乐，要仔细专注地去听，感受你的喜爱之情)</strong><br><strong>将自己平时生活所说的消极词汇换为积极词汇</strong></p><hr>]]></content>
      
      
      <categories>
          
          <category> J_积极心理学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器编码</title>
      <link href="/2021/09/16/J_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/J_%E6%9C%BA%E5%99%A8%E7%BC%96%E7%A0%81/"/>
      <url>/2021/09/16/J_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/J_%E6%9C%BA%E5%99%A8%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><code>引言</code></h2><p><strong>本片文章关于计算机是如何二进制存储数字的</strong></p><hr><h2 id="为什么选择二进制？"><code>为什么选择二进制？</code></h2><p><strong>大多数人类文明选择了十进制 (因为手指头有 10 根，最开始人们计数是靠手去数的)</strong></p><p><strong>但也有例外，玛雅人采用 20 进制服务于天文历法的计数，楔形文字采用 60 进制</strong></p><p><strong>计算机在发明以后，需要选用一种进制来储存数据</strong></p><p><strong>当时选有 10 进制的，3 进制的，8 进制的，但事实证明 2 进制才是最不容易出错的</strong></p><p><strong>其实电路中电压的高低，是电容上电荷的多少，是磁盘上的磁化程度，光盘上的蚀刻程度，光纤中发光二极管或者 “小灯泡” 的亮度 —— 而这些全都是（几乎）连续的物理量，并没有什么天然的 “只能取两个值” 的属性。</strong></p><p><strong>计算机选择 2 进制只是因为相对而言 2 进制更不容易出错</strong></p><hr><h2 id="机器编码"><code>机器编码</code></h2><h3 id="原码"><code>原码</code></h3><p><strong>例如我们要存储一个<code>十进制整数3</code></strong></p><p><strong>3——00000011（我们可以用 <code>1byte（字节）</code>去存储）</strong></p><p><strong>在 <code>C语言</code>中给一个整数分配 <code>4个byte</code>，所以 3 在 C 语言分配的内存中表示如下</strong></p><p><strong>3——00000000 00000000 00000000 00000011</strong></p><p><strong>一个字节占 8 位，我们所说的 32 位 / 64 位系统指的是系统能够一次性处理多少位</strong><br><strong>32 位即 4 个 byte，4 个 byte 可以表示 2 的 32 次方 = 4294967296（bit）个地址，约 4G</strong><br><strong>64 位即 8 个 byte，8 个 byte 可以表示 2 的 64 次方 = 4294967296 的 32 次方（bit）大于 1 亿 GB</strong></p><p><strong>接下来我们考虑一个 <code>8位</code>的系统</strong></p><p><strong>数值有<code>正负</code>之分，计算机就用一个数的最高位存放符号 (<code>0为正,1为负</code>)</strong></p><p><strong>3 表示为 00000011，最高位为 <code>0</code> 表示其为<code>正数</code></strong></p><p><strong>-3 表示为 10000011，最高位为 <code>1</code> 表示其为<code>负数</code></strong></p><p><strong>那么 1byte 能表示数值的范围为 (<code>1~127</code> 到 <code>-127~-1</code>, )（最高位 <code>0</code> 到 <code>1</code>）共 <code>256</code> 个</strong></p><p><strong>表示完了后，我们用该编码加减运算的时候出现了问题，如下：假设字长为 8bits</strong></p><p><strong>1-1=1+(-1)=0</strong></p><p><strong>00000001b + 10000001b = 10000010b (<code>结尾</code>用字母 <code>b</code> 或者 <code>B</code> 表示<code>二进制数</code>)</strong></p><p><strong>但 10000010b=-2 显然是不正确</strong></p><p><strong>我们称这种编码为<code>原码</code>，<code>原码</code>是人脑最容易<code>理解和计算</code>的表示方式.</strong></p><p><strong>但<code>原码</code>的<code>加减法</code>运算不能够顺利进行，由此发明了<code>补码</code></strong></p><hr><h3 id="补码"><code>补码</code></h3><p><strong>在上述描述中用源码做减法结果是不对的，我们抛开原码这一概念</strong></p><p><strong>假如 1+x=0</strong></p><p><strong>00000001b+x=00000000b</strong></p><p><strong><code>解得x=11111111b</code>，其实 <code>11111111b就是 -1</code>，但是我们并不能很好的<code>识别</code>出来</strong><br><strong>我们需要一个过程把 <code>-1</code> 的原码，<code>转换</code>成 <code>11111111b</code> 即可，对于 - 1 而言，原码为 10000001b，现在我们要做的就是，把 <code>10000001b</code> 转换成 <code>11111111b</code>，我们仔细发现最高位是不变的，其余位置反置，然后再加一就得到了 <code>11111111b</code> 了</strong></p><p><strong>我们在仔细看这个过程</strong></p><p><strong><code>第一步</code>：最高位不变，其余反置 (取反)</strong><br><strong><code>第二步</code>：加上 00000001b</strong></p><p><strong>总结：<code>负数原码和补码之间转换（除符号位外）取反加一</code></strong></p><p><strong>我们通过<code>观察</code>得出<code>取反加一</code>这个规律，下面我们通过推导得到这个结论</strong><br><strong>0 减去一个数的补码 = 该数相反数的补码，以至于这两个数的补码进行运算时和为 0</strong><br><strong>补码<code>补全了</code>原码无法减法的不足，也<code>补全了</code>负数运算的空缺，并且其表示的负数和正数是一一<code>互补</code>的，为什么叫<code>补码</code>呢，就像数学中的补角一样，30 度的补角是 150 度二者的和是 180 度，180 度是一个在角度上的一个常见数，是一个凑整的状态。</strong><br><strong>我们再回想一下刚刚那个公式，00000000 其实也是一个<code>凑整</code>的状态，只是进位的 1 丢失了 (原本是 100000000)，你可以理解为<code>补码</code>去表示的一对正负数，表示正数的补码和负数的补码是<code>互补</code>的，二者之和是一个<code>凑整的状态！</code></strong></p><p><strong>观察以下式子：</strong></p><p><strong><code>00000000b=11111111b+00000001b</code></strong></p><p><strong>00000000b-x</strong><br><strong>=11111111b-x+00000001b <code>(代换)</code></strong><br><strong>=(11111111b-x)+00000001b</strong><br><strong>其实<code>括号内</code>就是那个<code>取反</code>操作</strong><br><strong>括号右侧<code>加00000001</code> 其实就是<code>加1</code></strong></p><p><strong><code>反码</code>其实是将<code>原码</code>转化为<code>补码</code>的一个<code>桥梁</code>，<code>取反</code>是一个<code>操作</code></strong></p><p><strong><code>特殊</code>的一对<code>补码</code>：</strong><br><strong>10000000+10000000=00000000</strong><br><strong>00000000+00000000=00000000</strong><br><strong>上述两个补码与<code>自身互补</code>，转成原码后，又因为 <code>1</code> 表示<code>负</code></strong><br><strong>我们用 1000000 表示 - 128，没有 + 128，用 00000000 表示 0 不分正负</strong></p><p><strong><code>8bit</code> 可以表示<code>带符号的数</code>的范围: <code>1～127</code>，<code>-1～-127</code>，<code>0 </code>和 <code>-128</code></strong></p><hr><h2 id="机器编码总结"><code>机器编码总结</code></h2><p><strong>正数：原码 = 反码 = 补码</strong><br><strong>负数：反码 = 最高位不变其余反置、补码 = 源码的反码 + 1</strong><br><strong>反码其实和源码的关系不大，只是一种得到补码的手段</strong><br><strong>对于有符号的数而言，假如是 <code>n位</code>的，则可以表示 <code>-2的n-1次方</code>，<code>无</code> +2 的 n-1 次方 (有负无正)</strong></p><hr><h2 id="END"><code>END</code></h2>]]></content>
      
      
      <categories>
          
          <category> J_计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> 机器编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>积极心理学（一）</title>
      <link href="/2021/09/16/J_%E7%A7%AF%E6%9E%81%E5%BF%83%E7%90%86%E5%AD%A6/1/"/>
      <url>/2021/09/16/J_%E7%A7%AF%E6%9E%81%E5%BF%83%E7%90%86%E5%AD%A6/1/</url>
      
        <content type="html"><![CDATA[<h2 id="积极心理学"><a href="https://open.163.com/newview/movie/free?pid=M6HV755O6&amp;mid=M6HV8DF19">积极心理学</a></h2><h2 id="引言"><code>引言</code></h2><p><strong><code>《积极心理学》</code>是一门以<code>健康模型</code>为核心的课程，相对于传统的<code>疾病模型</code>，积极心理学更注重于对<code>个人积极性</code>的培养，而并不是直接面对<code>心理疾病</code>。你生病了，只是因为你的生活还<code>不够</code>健康，你不去<code>追求</code>那些使你健康的东西，积极心理学可以帮助我们达到那种<code>充满激情，紧张的生活状态</code>。</strong></p><h2 id="一切的前提"><code>一切的前提</code></h2><p><strong>学习本课程最重要的不是理论，而是学习完理论之后的<code>实践</code>环节，你只需要做出<code>一种努力</code>，即<code>应用</code>的努力</strong></p><h2 id="安静"><code>安静</code></h2><h3 id="理论"><code>理论</code></h3><p><strong><code>安静</code>是我们文化所<code>缺失</code>的一部分，我们会忍不住<code>打破</code>沉默。</strong><br><strong><code>安静</code>是一种<code>最深</code>层次的<code>学习媒介</code>，<code>记忆再现</code>的过程，使我们<code>区分</code>出什么是<code>最重要的</code>，什么是<code>不那重要的</code></strong><br><strong><code>安静</code>给了我们经历过后<code>反省</code>自己所闻的<code>机会</code></strong></p><h3 id="论据"><code>论据</code></h3><p><strong>《教学的勇气》</strong><br><strong>有酒和没酒的<code>小鼠走迷宫</code></strong><br><strong>崇尚安静的<code>印第安人</code>文化</strong></p><h3 id="实践"><code>实践</code></h3><p><strong>内省：</strong><br><strong>一、找一个<code>安静</code>的环境，仔细<code>回顾</code>之前的经历（学习经历，交流经历等等）</strong><br><strong>二、仔细想想什么是<code>最重要</code>的，哪些是<code>很重要</code>的，哪些是<code>不那么重要</code>的</strong><br><strong>注：一步骤和二步骤<code>交替进行</code>，直到自己认为达到了<code>内省</code>的效果！</strong></p><hr><h2 id="Transform"><code>Transform</code></h2><h3 id="理论-v2"><code>理论</code></h3><p><strong>大多数教育只是在<code>传递信息</code>，这是远远不够的，关键在于<code>接收信息</code>的容器的<code>形状</code>，信息是<code>客观</code>存在的，<code>形状</code>决定了我们的自尊水平和快乐水平！</strong></p><h3 id="论据-v2"><code>论据</code></h3><p><strong>比赛目标是前三名，结果是第八名的两种解读 —— 解读模型的重要性</strong></p><h3 id="实践-v2"><code>实践</code></h3><p><strong>一、构建解读模型：当我们教别人一些东西时，我们不光要<code>传递信息</code>，还要想办法为信息的理解<code>构建</code>一种<code>解读模型</code></strong><br><strong>二、失败变成机遇：失败后<code>自省</code> (见<code>安静</code>的理念)，让我们看看我们能学到什么！</strong></p><hr><h2 id="关于多余的石头"><code>关于多余的石头</code></h2><h3 id="引言-v2"><code>引言</code></h3><p><strong>《大卫》—— 米开朗基罗</strong></p><h3 id="真相"><code>真相</code></h3><p><strong>对<code>失败的恐惧</code>，对<code>成功的畏惧</code>，<code>完美主义</code>等等不是与生俱来的，在世经历让我们被<code>限制</code>，使我们无法窥视自己的内心，社会的<code>教条</code>，长辈的<code>训诫</code>，有时候会是那<code>多余的石头</code>，将自我<code>封闭</code>掉。<code>凿掉多余的石头</code>像极了人生的第三境界 —— <code>看山是山，看水是水！</code></strong></p><hr><h2 id="问题的力量"><code>问题的力量</code></h2><h3 id="理论-v3"><code>理论</code></h3><p><strong><code>教育</code>的目的在于让一个人<code>不断地</code>发问！</strong><br><strong><code>问题</code>制造<code>现实</code>，制造<code>可能性</code>，一个<code>问题</code>引起一场<code>探索</code></strong><br><strong>一个<code>问题</code>能够将我们的<code>专注力</code>聚焦到某个<code>现实中</code>，是<code>聚焦神器</code></strong></p><h3 id="论据-v3"><code>论据</code></h3><p><strong>由<code>致病模型</code>到<code>建康模型</code>的转变使<code>积极心理学</code>有了长足的<code>进展</code></strong><br><strong><code>几何图形</code>的数量</strong></p><h3 id="实践-v3"><code>实践</code></h3><p><strong><code>问和答</code>：作为<code>教育者</code>的身份时，不仅要让你的<code>教育对象多问</code>，及时提出问题！并且多对教育者抛出问题！</strong><br><strong><code>自问</code>：当你要<code>学习专注</code>一件事时，试着对其不断<code>提出问题</code>，能够让我们<code>迅速</code>专注于所做的<code>事情</code>！</strong><br><strong><code>扩大与兼顾</code>：当问题所<code>关注的</code>事情只是<code>一件</code>或者所关注的事情具有<code>正反面</code>时，尝试<code>扩大范围</code> or 兼顾<code>正反面</code>！</strong></p><hr><h2 id="没人会来的"><code>没人会来的</code></h2><h3 id="理论-v4"><code>理论</code></h3><p><strong><code>没有人</code>会来到你的生活中<code>帮你</code>解决你所遇到的<code>问题</code>，一切的<code>成败</code>都靠你<code>自己</code>，教育者的存在是为了我们个人的前进<code>创造条件</code>，一切都要靠我们<code>自身</code>做出努力！</strong></p><h3 id="实践-v4"><code>实践</code></h3><p><strong>常常问自己，自己<code>改变了</code>什么？</strong>、<br><strong>思考自己需要在<code>哪些方面做出努力</code></strong><br><strong>时刻认识自己才是自己生活的<code>缔造者</code>，做出<code>行动</code>，<code>天高任鸟飞</code>！</strong></p>]]></content>
      
      
      <categories>
          
          <category> J_积极心理学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog客户端（APP）</title>
      <link href="/2021/09/16/S_%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/Blog%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2021/09/16/S_%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/Blog%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="下载地址"><code>下载地址</code></h2><p><a href="https://www.aliyundrive.com/s/YXjaTZ1ehcL"><strong>Blog 客户端 (点击下载)</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> S_实践项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫之旅</title>
      <link href="/2021/09/16/S_%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/P_%E7%88%AC%E8%99%AB%E4%B9%8B%E6%97%85/"/>
      <url>/2021/09/16/S_%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/P_%E7%88%AC%E8%99%AB%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<h2 id="开始前的准备：包库引入"><code>开始前的准备：包库引入</code></h2><p><strong>平台：VS Code</strong></p><p><strong>在终端中输入下列代码</strong></p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install bs4</span><br><span class="line">pip install xlwt</span><br></pre></td></tr></tbody></table></figure><h2 id="引入模块"><code>引入模块</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup       <span class="comment">#网页解析、获取数据</span></span><br><span class="line"><span class="keyword">import</span> re                           <span class="comment">#文字匹配</span></span><br><span class="line"><span class="keyword">import</span> urllib.request,urllib.error  <span class="comment">#指定url，获取网页</span></span><br><span class="line"><span class="keyword">import</span> xlwt                         <span class="comment">#Excel操作</span></span><br><span class="line"><span class="keyword">import</span> sqlite3                      <span class="comment">#进行sql数据库操作</span></span><br></pre></td></tr></tbody></table></figure><h2 id="建立框架"><code>建立框架</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    baseurl = <span class="string">"https://movie.douban.com/top250?start="</span></span><br><span class="line">    dateList = getDate(baseurl)</span><br><span class="line">    savePath = <span class="string">".\\豆瓣电影TOP250.xls"</span></span><br><span class="line">    saveDate(savePath)</span><br><span class="line"><span class="comment">#爬取网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDate</span>(<span class="params">baseurl</span>):</span></span><br><span class="line">    dateList = []</span><br><span class="line">    <span class="keyword">return</span> dateList</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveDate</span>(<span class="params">savePath</span>):</span></span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup       <span class="comment">#网页解析、获取数据</span></span><br><span class="line"><span class="keyword">import</span> re                           <span class="comment">#文字匹配</span></span><br><span class="line"><span class="keyword">import</span> urllib.request,urllib.error,urllib.parse  <span class="comment">#指定url，获取网页</span></span><br><span class="line"><span class="keyword">import</span> xlwt                         <span class="comment">#Excel操作</span></span><br><span class="line"><span class="keyword">import</span> sqlite3                      <span class="comment">#进行sql数据库操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    baseurl = <span class="string">"https://movie.douban.com/top250?start="</span></span><br><span class="line">    dateList = getDate(baseurl)</span><br><span class="line">    <span class="comment">#savePath = ".\\豆瓣电影TOP250.xls"</span></span><br><span class="line">    <span class="comment">#saveDate(savePath)</span></span><br><span class="line"></span><br><span class="line">findName = re.<span class="built_in">compile</span>(<span class="string">r'&lt;span class="title"&gt;(.*?)&lt;/span&gt;'</span>)          <span class="comment">#name规则</span></span><br><span class="line">findOtherName = re.<span class="built_in">compile</span>(<span class="string">r'&lt;span class="other"&gt;(.*?)&lt;/span&gt;'</span>)     <span class="comment">#name规则</span></span><br><span class="line">findLink = re.<span class="built_in">compile</span>(<span class="string">r'&lt;a href="(.*?)"&gt;'</span>)                          <span class="comment">#link规则</span></span><br><span class="line">findImgSrc = re.<span class="built_in">compile</span>(<span class="string">r'&lt;img.*src="(.*?)"'</span>,re.S)                  <span class="comment">#imgSrc规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#爬取并解析网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDate</span>(<span class="params">baseurl</span>):</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">250</span>,<span class="number">25</span>):</span><br><span class="line">        bs = BeautifulSoup(askURL(baseurl+<span class="built_in">str</span>(i)),<span class="string">"html.parser"</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> bs.find_all(<span class="string">'div'</span>,class_=<span class="string">"item"</span>):</span><br><span class="line">            item = <span class="built_in">str</span>(item)</span><br><span class="line">            name = re.findall(findName,item)[<span class="number">0</span>]</span><br><span class="line">            otherName = re.findall(findOtherName,item)[<span class="number">0</span>]</span><br><span class="line">            link = re.findall(findLink,item)[<span class="number">0</span>]</span><br><span class="line">            img = re.findall(findImgSrc,item)[<span class="number">0</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Top"</span>,j,name)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"链接:"</span>,link)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"图片:"</span>,img)</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveDate</span>(<span class="params">savePath</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line"><span class="comment">#爬取单个网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askURL</span>(<span class="params">url</span>):</span></span><br><span class="line">    header={</span><br><span class="line">        <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36 Edg/94.0.992.31"</span></span><br><span class="line">        }</span><br><span class="line">    req=urllib.request.Request(url,headers=header,method=<span class="string">'GET'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = urllib.request.urlopen(req)</span><br><span class="line">        <span class="keyword">return</span> response.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e,<span class="string">"code"</span>):</span><br><span class="line">            <span class="built_in">print</span>(e.code)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e,<span class="string">"reason"</span>):</span><br><span class="line">            <span class="built_in">print</span>(e.reason)</span><br><span class="line"><span class="comment">#入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="补充"><code>补充</code></h2><h3 id="Urllib库的使用"><code>Urllib库的使用</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#get方式请求</span></span><br><span class="line"><span class="keyword">import</span> urllib.request<span class="comment">#引入URL库的request</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="built_in">print</span>(response.read())                         <span class="comment">#网页源代码（未解码）</span></span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">'utf-8'</span>))        <span class="comment">#网页源代码（utf -8解码）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#post方式请求</span></span><br><span class="line"><span class="keyword">import</span> urllib.request   <span class="comment">#引入URL库的request</span></span><br><span class="line"><span class="keyword">import</span> urllib.parse     <span class="comment">#键值对解析器</span></span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode({<span class="string">"Hello"</span>:<span class="string">"World"</span>}),encoding = <span class="string">"utf-8"</span>)          <span class="comment">#post的数据包</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">"http://httpbin.org/post"</span>,data = data)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="built_in">print</span>(response.read())                         <span class="comment">#网页源代码（未解码）</span></span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">'utf-8'</span>))        <span class="comment">#网页源代码（utf -8解码）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#超时处理</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> urllib.request</span><br><span class="line">    response = urllib.request.urlopen(<span class="string">"http://httpbin.org/get"</span>,timeout=<span class="number">0.01</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.read().decode(<span class="string">'utf-8'</span>))        <span class="comment">#网页源代码（utf -8解码）</span></span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"访问超时！"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">response = urllib.request.urlopen(<span class="string">"http://httpbin.org/get"</span>)</span><br><span class="line"><span class="built_in">print</span>(response.status)        <span class="comment">#状态码：200</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">"https://movie.douban.com"</span>)</span><br><span class="line"><span class="built_in">print</span>(response.status)        <span class="comment">#状态码：418（被发现是爬虫）</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line"><span class="built_in">print</span>(response.getheaders())</span><br><span class="line"><span class="built_in">print</span>(response.getheader(<span class="string">"Server"</span>))      </span><br></pre></td></tr></tbody></table></figure><p><strong>伪装成电脑</strong><br><strong>伪装前：</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urllib.request.urlopen(<span class="string">"https://www.douban.com"</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.status)</span><br><span class="line"><span class="keyword">except</span> urllib.error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"你是茶壶！"</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>伪装后：</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">url = <span class="string">"https://www.douban.com"</span></span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode({<span class="string">"name"</span>:<span class="string">"Arthur"</span>}),encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">headers={</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36 Edg/94.0.992.31"</span></span><br><span class="line">}</span><br><span class="line">req = urllib.request.Request(url=url,data= data,headers=headers,method=<span class="string">"POST"</span>)</span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line"><span class="built_in">print</span>(response.status)</span><br></pre></td></tr></tbody></table></figure><p><strong>爬取单个网页</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    url = <span class="string">"https://www.douban.com"</span></span><br><span class="line">    <span class="built_in">print</span>(askURL(url))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askURL</span>(<span class="params">url</span>):</span></span><br><span class="line">    header={</span><br><span class="line">        <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36 Edg/94.0.992.31"</span></span><br><span class="line">        }</span><br><span class="line">    req=urllib.request.Request(url,headers=header)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = urllib.request.urlopen(req)</span><br><span class="line">        <span class="keyword">return</span> response.status</span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e,<span class="string">"code"</span>):</span><br><span class="line">            <span class="built_in">print</span>(e.code)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e,<span class="string">"reason"</span>):</span><br><span class="line">            <span class="built_in">print</span>(e.reason)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h3 id="beautifulSoup库的使用"><code>beautifulSoup库的使用</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#print</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">"1.html"</span>,<span class="string">"rb"</span>)</span><br><span class="line">html = f.read()</span><br><span class="line">bs = BeautifulSoup(html,<span class="string">"html.parser"</span>)</span><br><span class="line"><span class="built_in">print</span>(bs)                <span class="comment">#整个文档</span></span><br><span class="line"><span class="built_in">print</span>(bs.name)          <span class="comment">#文档名称</span></span><br><span class="line"><span class="built_in">print</span>(bs.title)         <span class="comment">#标签、内容</span></span><br><span class="line"><span class="built_in">print</span>(bs.title.string)  <span class="comment">#内容</span></span><br><span class="line"><span class="built_in">print</span>(bs.title.attrs)   <span class="comment">#属性空</span></span><br><span class="line"><span class="built_in">print</span>(bs.a)             <span class="comment">#标签、属性、内容</span></span><br><span class="line"><span class="built_in">print</span>(bs.a.string)      <span class="comment">#内容</span></span><br><span class="line"><span class="built_in">print</span>(bs.a.attrs)       <span class="comment">#属性（以键值对形式储存）</span></span><br></pre></td></tr></tbody></table></figure><p><strong>find_all</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">"1.html"</span>,<span class="string">"rb"</span>)</span><br><span class="line">html = f.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">bs = BeautifulSoup(html,<span class="string">"html.parser"</span>)</span><br><span class="line">aList = bs.find_all(<span class="string">"a"</span>)</span><br><span class="line"><span class="built_in">print</span>(aList)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">"1.html"</span>,<span class="string">"rb"</span>)</span><br><span class="line">html = f.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">bs = BeautifulSoup(html,<span class="string">"html.parser"</span>)</span><br><span class="line">aList = bs.find_all(re.<span class="built_in">compile</span>(<span class="string">"a"</span>))<span class="comment">#包含"a"的输出</span></span><br><span class="line"><span class="built_in">print</span>(aList)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">"1.html"</span>,<span class="string">"rb"</span>)</span><br><span class="line">html = f.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">bs = BeautifulSoup(html,<span class="string">"html.parser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nameExist</span>(<span class="params">tag</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tag.has_attr(<span class="string">"name"</span>)</span><br><span class="line">aList = bs.find_all(nameExist)</span><br><span class="line"><span class="built_in">print</span>(aList)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_实践项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言</title>
      <link href="/2021/09/16/B_%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/"/>
      <url>/2021/09/16/B_%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><code>引言</code></h2><p><strong>本文主要记录一些 C 语言的细节问题</strong></p><hr><h2 id="EOF"><code>EOF</code></h2><p><strong>对于 <code>scanf("%d%d", &amp;a, &amp;b);</code> 而言</strong><br><strong>如果 <code>a</code> 和 <code>b</code> 都被<code>成功读入</code>，那么 scanf 的<code>返回值</code>就是 <code>2</code></strong><br><strong>如果<code>只有a</code> 被成功读入，返回值为 <code>1</code></strong><br><strong>如果 a 和 b <code>都未被</code>成功读入，返回值为 <code>0</code></strong><br><strong>如果遇到<code>错误</code>或遇到 <code>end of file</code>，返回值为 <code>EOF</code>，且返回值为 <code>int</code> 型</strong><br><strong>当<code>读文件</code>操作时，遇到<code>文件结束位置</code>或<code>读数据出错</code>均会返回 <code>EOF</code></strong><br><strong>C 语言中所有的输入输出操作均是按<code>读文件</code>的思想来设计的，或者说是文件操作的一种<code>特例</code>，如 getchar（）就是 fgetc (stdin) 的一个<code>宏</code></strong></p><hr><h2 id="文件操作"><code>文件操作</code></h2><p><strong><a href="http://topurl.cn/7jq">大佬的博客 - CSDN</a></strong></p><hr><h2 id="内存分配"><code>内存分配</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> *p=<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>malloc 为<code>动态分配</code>，p 为<code>静态分配</code>（用变量名）</strong><br><strong><code>f（）</code>函数运行<code>结束</code>后，malloc 分配的 <code>100字节的空间</code>依旧存在，而<code>变量p</code> 则不存在了（编译器可能会保存一次）</strong></p><hr><h2 id="字符串"><code>字符串</code></h2><p><strong>在 <code>C语言</code>中这样会报错，但在 <code>Java</code> 中可以这么用</strong><br><img src="https://pic.imgdb.cn/item/6114f65c5132923bf8ea5470.jpg" alt="一个图"><br><strong><code>C语言</code>的正确写法</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">20</span>] = <span class="string">"China"</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(ch, <span class="string">"Lisi"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, ch);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="结构体与指针"><code>结构体与指针</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> date;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span> <span class="title">Std</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">std</span>.date);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span> *<span class="title">p</span>=</span>&amp;Std;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,p-&gt;date);</span><br><span class="line"><span class="comment">//p-&gt;date == (*p).date == Std.date</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="无名结构体"><code>无名结构体</code></h2><p><strong>一、编译器对无名结构体的处理是随机生成一个不重复的变量名</strong></p><p><strong>二、无类型名的结构体变量在声明结构体时就得定义（后续去用的话不知道名字）</strong></p><p><strong>三、因为名字是随机的，所以不可以相互赋值，例子如下：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line"><span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">}a;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">}b;</span><br><span class="line">b = a; <span class="comment">//报 incompatible type error</span></span><br></pre></td></tr></tbody></table></figure><p><strong>四、结构体的指针也无法使用，例子如下：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">}a, * pa;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">pa-&gt;x = <span class="number">1</span>; <span class="comment">//报 pa 是 NULL</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, pa-&gt;x);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>五、用 typedef 处理后可以正常使用，例子如下：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">}a, * pa;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">a b;</span><br><span class="line">pa l;</span><br><span class="line">l = &amp;b;</span><br><span class="line">b.x = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, l-&gt;x);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>六、对于多个内部相同属性的结构体可以用无名结构体方式处理，更方便。</strong></p><hr><h2 id="scanf和gets"><code>scanf和gets</code></h2><p><strong>scanf 遇到<code>空格</code>停止读取，gets 遇到<code>回车</code>停止读取</strong></p><hr><h2 id="字符串截取函数"><code>字符串截取函数</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="comment">//p：待截取的字符串头指针</span></span><br><span class="line"><span class="comment">//s：截取的起始位点</span></span><br><span class="line"><span class="comment">//n：截取长度</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">Intercept_String</span><span class="params">(<span class="keyword">char</span> *p, <span class="keyword">int</span> s, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">char</span>* h; <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">h = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = s; i &lt; n + s; i++)</span><br><span class="line">{</span><br><span class="line">*(h+j)= *(p+i);</span><br><span class="line">j++;</span><br><span class="line">}</span><br><span class="line">*(h + j) = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">char</span> ch[MAX];</span><br><span class="line">gets_s(ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, Intercept_String(ch, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="0x3f3f3f3f"><code>0x3f3f3f3f</code></h2><p><strong>0x3f3f3f3f 的十进制是 1061109567，是 109 级别的，而一般场合下的数据都是小于 109 的，所以它可以作为<code>无穷大</code>使用而不致出现数据大于无穷大的情形</strong></p><h2 id="memset"><code>memset</code></h2><p><strong><a href="https://blog.csdn.net/xp178171640/article/details/115751021?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163212541216780269835428%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163212541216780269835428&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-115751021.pc_search_result_hbase_insert&amp;utm_term=c%2B%2Bmemset&amp;spm=1018.2226.3001.4187">相关链接</a></strong><br><strong>memset 实现原理是根据<code>字节</code>来设置的</strong><br><strong>对于int而言有四个字节我们这样memset</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(map, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(map));</span><br></pre></td></tr></tbody></table></figure><h2 id="随机数"><code>随机数</code></h2><p><strong>1.头文件</strong></p><p>stdlib.h</p><p><strong>2.设置随机数种子(Set Rand)</strong></p><p>srand(unsigned int(time(NULL)))</p><p><strong>3.Rand函数</strong></p><p>rand()%100【0-99】</p><p>rand()%100+1【1-100】</p><p><strong>4.实例：洗牌</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">int</span> r = rand()%i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t = a[r]; a[r] = a[i]; a[i] = t;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="New用法"><code>New用法</code></h2><h2 id="异或的用法"><code>异或的用法</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">scanf_s(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="printf补零输出"><code>printf补零输出</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//宽度已知</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02d\n"</span>, a);</span><br><span class="line"><span class="comment">//宽度未知</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">3</span>; <span class="comment">//宽度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%0*d"</span>,l,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> B_编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2021/09/16/B_%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
      <url>/2021/09/16/B_%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/</url>
      
        <content type="html"><![CDATA[<h1><code>环境搭建</code></h1><p><strong><a href="https://www.aliyundrive.com/s/n4xSTi7TAhT">Python</a> 提取码：<code>ed8m</code></strong></p><h1><code>基础语法</code></h1><h2 id="注释"><code>注释</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">        多行注释</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Hello-World"><code>Hello World</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="输出"><code>输出</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a="</span>,a)<span class="comment">#print()自动换行</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">age=<span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"我的年龄是%d岁"</span>%age)</span><br><span class="line"><span class="comment">#3</span></span><br><span class="line">s=<span class="string">"China"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"我的年龄是%d岁、我的国籍是%s"</span>%(age,s))</span><br><span class="line"><span class="comment">#4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"我的名字是%s、我来自%s"</span>%(<span class="string">"非洲小白孩"</span>,<span class="string">"非洲"</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    %(替换对象1,替换对象2...)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"你好！%s，我来自%s，我叫%s，今年%d岁"</span>%(<span class="string">"HAQI"</span>,<span class="string">"China"</span>,<span class="string">"FanFan"</span>,<span class="number">18</span>))</span><br><span class="line"><span class="comment">#6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"www"</span>,<span class="string">"baidu"</span>,<span class="string">"com"</span>,sep=<span class="string">"."</span>)<span class="comment">#Separate隔开、用 . 隔开</span></span><br><span class="line"><span class="comment">#7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"hello "</span>,end=<span class="string">""</span>)<span class="comment">#为""时不换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"world"</span>)</span><br><span class="line"><span class="comment">#8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-"</span>*<span class="number">30</span>)</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="输入"><code>输入</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">password = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"please input password："</span>))<span class="comment">#"  "内为提示语</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The password is"</span>,password)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(password))</span><br><span class="line"><span class="comment">#输入的内容默认的类别是字符串or数字</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="string">'10231'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="随机数"><code>随机数</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">a = random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="if判断语句"><code>if判断语句</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">101</span></span><br><span class="line"><span class="keyword">if</span> a&gt;b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'a &gt; b'</span>)<span class="comment">#必须要有缩进，且同一范围内必须对齐</span></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a &lt; b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">score = <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"优秀"</span>)</span><br><span class="line"><span class="keyword">elif</span> score&gt;<span class="number">70</span> <span class="keyword">and</span> score&lt;<span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"一般"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"不及格"</span>)</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="for循环语句"><code>for循环语句</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">" "</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">" "</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">" "</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"China"</span>:</span><br><span class="line">    <span class="built_in">print</span>(c,end=<span class="string">""</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> [<span class="string">"adas"</span>,<span class="string">"dsadad"</span>,<span class="string">"sdawd"</span>]:</span><br><span class="line">    <span class="built_in">print</span>(d,end=<span class="string">" "</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line">a = [<span class="string">"dada"</span>,<span class="string">"dawd"</span>,<span class="string">"dwad"</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">" "</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line">a = [<span class="string">"dada"</span>,<span class="string">"dawd"</span>,<span class="string">"dwad"</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"下标:"</span>,i,a[i])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line"><span class="comment">#3</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i+=<span class="number">2</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">m = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> m:</span><br><span class="line">    <span class="built_in">sum</span>+=m</span><br><span class="line">    m-=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"求和完毕1-100的和为："</span>,<span class="built_in">sum</span>)</span><br><span class="line"><span class="comment">#4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"Room"</span>:</span><br><span class="line">    <span class="keyword">if</span> i==<span class="string">"o"</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="九九乘法表"><code>九九乘法表</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> j&lt;=i:</span><br><span class="line">            <span class="built_in">print</span>(i,<span class="string">"*"</span>,j,<span class="string">"="</span>,i*j,end=<span class="string">"\t"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">i = j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i&lt;=<span class="number">9</span>:</span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j&lt;=<span class="number">9</span>:</span><br><span class="line">        <span class="keyword">if</span> j&lt;=i:</span><br><span class="line">             <span class="built_in">print</span>(i,<span class="string">"*"</span>,j,<span class="string">"="</span>,i*j,end=<span class="string">"\t"</span>)</span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">""</span>)</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="字符串"><code>字符串</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">word = <span class="string">'Hello'</span></span><br><span class="line">sentence = <span class="string">"这是一个句子"</span></span><br><span class="line">paragraph = <span class="string">'''  嘿嘿</span></span><br><span class="line"><span class="string">        这是一个段落</span></span><br><span class="line"><span class="string">        哈哈哈</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="built_in">print</span>(word)</span><br><span class="line"><span class="built_in">print</span>(sentence)</span><br><span class="line"><span class="built_in">print</span>(paragraph)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">str1 = <span class="string">"I'm a student"</span><span class="comment">#双引号内单引号失去作用</span></span><br><span class="line"><span class="built_in">print</span>(str1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#str2 = 'I'm a student'会报错</span></span><br><span class="line">str2 = <span class="string">'I\'m a student'</span><span class="comment">#标识该 ' 无索引字符串地作用</span></span><br><span class="line"><span class="built_in">print</span>(str2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#str3 = "Jack said "I like you""#会报错</span></span><br><span class="line">str3 = <span class="string">"Jack said \"I like you\""</span></span><br><span class="line"><span class="built_in">print</span>(str3)</span><br><span class="line">str4 =<span class="string">'Jack said "I like you"'</span><span class="comment">#单引号内双引号失去作用</span></span><br><span class="line"><span class="built_in">print</span>(str4)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line">string = <span class="string">"China"</span></span><br><span class="line"><span class="built_in">print</span>(string[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(string[<span class="number">0</span>:<span class="number">3</span>])<span class="comment">#默认跨度为1</span></span><br><span class="line"><span class="built_in">print</span>(string[<span class="number">0</span>:<span class="number">3</span>:<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(string[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>])<span class="comment">#跨度为2</span></span><br><span class="line"><span class="built_in">print</span>(string[:<span class="number">3</span>])<span class="comment">#第三单元之前的(不包含3)</span></span><br><span class="line"><span class="built_in">print</span>(string[<span class="number">3</span>:])<span class="comment">#第三单元后的（包含3）</span></span><br><span class="line"><span class="comment">#区间访问时左闭右开！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4</span></span><br><span class="line">s = <span class="string">"你好"</span></span><br><span class="line"><span class="built_in">print</span>(s+<span class="string">"，成都！"</span>)<span class="comment">#“+”表示字符串相连接</span></span><br><span class="line"><span class="built_in">print</span>(s*<span class="number">3</span>)</span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"hello\nworld"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">r"hello\nworld"</span>)<span class="comment">#r使转义字符失效</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="列表"><code>列表</code></h2><h3 id="定义列表"><code>定义列表</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个空的列表</span></span><br><span class="line">nameList = []</span><br><span class="line"><span class="comment">#定义非空列表</span></span><br><span class="line">nameList = [<span class="string">"小张"</span>,<span class="string">"小王"</span>,<span class="string">"小李"</span>]</span><br><span class="line"><span class="built_in">print</span>(nameList[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#混合类型</span></span><br><span class="line">nameList = [<span class="number">1</span>,<span class="string">"China"</span>,<span class="number">89.2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(nameList[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(nameList[<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(nameList[<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">""</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="遍历列表"><code>遍历列表</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#遍历</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"开始For循环遍历nameList"</span>)</span><br><span class="line">nameList = [<span class="string">"小张"</span>,<span class="string">"小王"</span>,<span class="string">"小李"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"开始While循环遍历nameList"</span>)</span><br><span class="line">i = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(nameList):</span><br><span class="line">    <span class="built_in">print</span>(nameList[i])</span><br><span class="line">    i+=<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="增加元素"><code>增加元素</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增加单个元素</span></span><br><span class="line">nameList = [<span class="string">"小张"</span>,<span class="string">"小王"</span>,<span class="string">"小李"</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------增加前------"</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:</span><br><span class="line">    <span class="built_in">print</span>(name,end = <span class="string">" "</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line">nameTemp = <span class="built_in">input</span>(<span class="string">"请输入add的元素："</span>)</span><br><span class="line">nameList.append(nameTemp)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------增加后------"</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:</span><br><span class="line">    <span class="built_in">print</span>(name,end = <span class="string">" "</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line">PYTHON</span><br><span class="line"><span class="comment">#增加一个是列表的元素</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.append(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">PYTHON</span><br><span class="line"><span class="comment">#拓展列表（合并列表）</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">PYTHON</span><br><span class="line"><span class="comment">#插入元素（原有元素被挤到下一位）</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">a.insert(<span class="number">1</span>,<span class="string">"China"</span>)<span class="comment">#1位置插入 China</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></tbody></table></figure><h3 id="删除元素"><code>删除元素</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除指定位置元素</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="string">"China"</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">PYTHON</span><br><span class="line"><span class="comment">#弹出尾部元素</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="string">"China"</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.pop()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">PYTHON</span><br><span class="line"><span class="comment">#删除指定内容的元素</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="string">"China"</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.remove(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">PYTHON</span><br><span class="line"><span class="comment">#clear:清空列表</span></span><br><span class="line">nameList = [<span class="string">"小张"</span>,<span class="string">"小王"</span>,<span class="string">"小李"</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-----删除前------"</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:</span><br><span class="line">    <span class="built_in">print</span>(name,end = <span class="string">" "</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line">nameList.extend(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------删除后------"</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:</span><br><span class="line">    <span class="built_in">print</span>(name,end = <span class="string">" "</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">""</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="修改元素"><code>修改元素</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定下标赋值即可</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="string">"China"</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></tbody></table></figure><h3 id="查询元素"><code>查询元素</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意数据类型有数字和字符串</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="string">"China"</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">temp = <span class="built_in">input</span>(<span class="string">"请输入您要查找的数据:"</span>)</span><br><span class="line"><span class="keyword">if</span> temp <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(temp,<span class="string">"存在"</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(temp) <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(temp,<span class="string">"存在"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(temp,<span class="string">"不存在"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输出列表中某一元素的下标</span></span><br><span class="line">myList = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line"><span class="built_in">print</span>(myList.index(<span class="string">'a'</span>))</span><br><span class="line"><span class="comment">#我们也可以精确范围</span></span><br><span class="line">myList = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line"><span class="built_in">print</span>(myList.index(<span class="string">'a'</span>,<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment">#如果找不到元素就会报错</span></span><br><span class="line">myList = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line"><span class="built_in">print</span>(myList.index(<span class="string">'a'</span>,<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment">#ValueError: 'a' is not in list</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#统计元素个数</span></span><br><span class="line">myList = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'a'</span>]</span><br><span class="line"><span class="built_in">print</span>(myList.count(<span class="string">'a'</span>))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#反转和排序</span></span><br><span class="line">myList = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'a'</span>]</span><br><span class="line">myList.reverse()</span><br><span class="line"><span class="built_in">print</span>(myList)</span><br><span class="line">myList.sort()</span><br><span class="line"><span class="built_in">print</span>(myList)</span><br><span class="line">myList.sort(reverse=<span class="literal">True</span>)<span class="comment">#排序后反转（降序）</span></span><br><span class="line"><span class="built_in">print</span>(myList)</span><br><span class="line"><span class="comment">#办公室分配</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">offices = [[],[],[]]</span><br><span class="line">names = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>,<span class="string">"G"</span>,<span class="string">"H"</span>,<span class="string">"I"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    index = random.randint(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    offices[index].append(name)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"%d号办公室有%d人，分别为 "</span>%(i+<span class="number">1</span>,<span class="built_in">len</span>(offices[i])),end=<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> offices[i]:</span><br><span class="line">        <span class="built_in">print</span>(name,end=<span class="string">" "</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line">    i+=<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h2 id="元组"><code>元组</code></h2><h3 id="定义元组"><code>定义元组</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tup = ()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tup))</span><br><span class="line">tup = (<span class="number">50</span>)<span class="comment">#等价于tup = 50</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tup))<span class="comment">#&lt;class 'int'&gt;</span></span><br><span class="line">tup = (<span class="number">50</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tup))<span class="comment">#&lt;class 'tuple'&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="元组的相关操作"><code>元组的相关操作</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可遍历，查找，整体删除</span></span><br><span class="line">tup =  (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tup:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(tup[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(tup[-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> <span class="number">4</span> <span class="keyword">in</span> tup:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Yes"</span>)</span><br><span class="line">tupx =tup+tup</span><br><span class="line"><span class="built_in">print</span>(tupx)</span><br><span class="line">tupx.sort()<span class="comment">#AttributeError: 'tuple' object has no attribute </span></span><br><span class="line"><span class="string">'sort'</span></span><br><span class="line"><span class="built_in">print</span>(tupx)</span><br><span class="line">tup =  (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">del</span> tup</span><br><span class="line"><span class="built_in">print</span>(tup)<span class="comment">#NameError: name 'tup' is not defined</span></span><br></pre></td></tr></tbody></table></figure><h2 id="字典"><code>字典</code></h2><h3 id="定义"><code>定义</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = {<span class="string">"name"</span>:<span class="string">"吴彦祖"</span>,<span class="string">"age"</span>:<span class="number">18</span>}<span class="comment">#键+值</span></span><br></pre></td></tr></tbody></table></figure><h3 id="访问和查找"><code>访问和查找</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#访问</span></span><br><span class="line">d = {<span class="string">"name"</span>:<span class="string">"吴彦祖"</span>,<span class="string">"age"</span>:<span class="number">18</span>}</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">"name"</span>])</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">"age"</span>])</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">"geand"</span>])<span class="comment">#键不存在时直接访问会 KeyError: 'geand'</span></span><br><span class="line"><span class="comment">#判断某个key是否存在</span></span><br><span class="line"><span class="built_in">print</span>(d.get(<span class="string">"grand"</span>))<span class="comment">#显示：None</span></span><br><span class="line"><span class="built_in">print</span>(d.get(<span class="string">"grand"</span>,<span class="number">0</span>))<span class="comment">#显示：0（初始化为0）</span></span><br></pre></td></tr></tbody></table></figure><h3 id="增加键值对"><code>增加键值对</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="built_in">input</span>(<span class="string">"请输入新的键："</span>)</span><br><span class="line">p = <span class="built_in">input</span>(<span class="string">"请输入新键的值："</span>)</span><br><span class="line">d[key] = p</span><br><span class="line"><span class="built_in">print</span>(d[key])</span><br></pre></td></tr></tbody></table></figure><h3 id="删除键值对"><code>删除键值对</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#del</span></span><br><span class="line">d = {<span class="string">"name"</span>:<span class="string">"吴彦祖"</span>,<span class="string">"age"</span>:<span class="number">18</span>}</span><br><span class="line"><span class="keyword">del</span> d[<span class="string">"name"</span>]</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">"name"</span>])<span class="comment">#KeyError: 'name'</span></span><br><span class="line"><span class="comment">#clear</span></span><br><span class="line">d = {<span class="string">"name"</span>:<span class="string">"吴彦祖"</span>,<span class="string">"age"</span>:<span class="number">18</span>}</span><br><span class="line">d.clear()</span><br><span class="line"><span class="built_in">print</span>(d)<span class="comment">#打印结果为 {}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="修改键值对"><code>修改键值对</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = {<span class="string">"name"</span>:<span class="string">"吴彦祖"</span>,<span class="string">"age"</span>:<span class="number">18</span>}</span><br><span class="line">d[<span class="string">"name"</span>]=<span class="string">"哈哈"</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></tbody></table></figure><h3 id="查找与遍历键值对"><code>查找与遍历键值对</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d = {<span class="string">"name"</span>:<span class="string">"吴彦祖"</span>,<span class="string">"age"</span>:<span class="number">18</span>}</span><br><span class="line"><span class="built_in">print</span>(d.keys())<span class="comment">#['name', 'age']</span></span><br><span class="line"><span class="built_in">print</span>(d.values())<span class="comment">#['吴彦祖', 18]</span></span><br><span class="line"><span class="built_in">print</span>(d.items())<span class="comment">#[('name', '吴彦祖'), ('age', 18)]、每一项是一个元组</span></span><br><span class="line"><span class="comment">#遍历</span></span><br><span class="line">d = {<span class="string">"name"</span>:<span class="string">"吴彦祖"</span>,<span class="string">"age"</span>:<span class="number">18</span>}</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d.keys():</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> d.values():</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"key=%s value=%s"</span>%(key,value))</span><br></pre></td></tr></tbody></table></figure><p><strong>在列表中也有类似的表达：</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>,<span class="string">"G"</span>,<span class="string">"H"</span>,<span class="string">"I"</span>]</span><br><span class="line"><span class="keyword">for</span> i,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):<span class="comment">#对names枚举</span></span><br><span class="line">    <span class="built_in">print</span>(i,x)</span><br><span class="line"><span class="comment"># 1 B</span></span><br><span class="line"><span class="comment"># 2 C</span></span><br><span class="line"><span class="comment"># 3 D</span></span><br><span class="line"><span class="comment"># 4 E</span></span><br><span class="line"><span class="comment"># 5 F</span></span><br><span class="line"><span class="comment"># 6 G</span></span><br><span class="line"><span class="comment"># 7 H</span></span><br><span class="line"><span class="comment"># 8 I</span></span><br></pre></td></tr></tbody></table></figure><h2 id="集合"><code>集合</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#去重</span></span><br><span class="line">myList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">s = <span class="built_in">set</span>(myList)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></tbody></table></figure><h1><code>网络爬虫</code></h1><h2 id="Request库的使用"><code>Request库的使用</code></h2><h3 id="基本语法"><code>基本语法</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://www.santostang.com/'</span></span><br><span class="line">r = requests.get(url) </span><br><span class="line"><span class="built_in">print</span>(r.encoding)       <span class="comment">#编码格式</span></span><br><span class="line"><span class="built_in">print</span>(r.status_code)    <span class="comment">#状态码（200==成功）</span></span><br><span class="line"><span class="built_in">print</span>(r.text)           <span class="comment">#内容</span></span><br></pre></td></tr></tbody></table></figure><h3 id="url定制"><code>url定制</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://www.santostang.com/'</span></span><br><span class="line">keyDict = {<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>}</span><br><span class="line">r = requests.get(url,params=keyDict)</span><br><span class="line"><span class="built_in">print</span>(r.url)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></tbody></table></figure><h3 id="headers定制"><code>headers定制</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://www.santostang.com/'</span></span><br><span class="line">headers={</span><br><span class="line"><span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36 Edg/96.0.1054.62'</span> </span><br><span class="line">}</span><br><span class="line">r = requests.get(url,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br></pre></td></tr></tbody></table></figure><h3 id="POST请求"><code>POST请求</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://www.santostang.com/'</span></span><br><span class="line">submitData = {<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>}</span><br><span class="line">r = requests.post(url,data = submitData)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment">#注意是data！！！</span></span><br></pre></td></tr></tbody></table></figure><h3 id="DouBan"><code>DouBan</code></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">baseUrl = <span class="string">'https://movie.douban.com/top250?start='</span></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36 Edg/96.0.1054.62'</span>,</span><br><span class="line">    <span class="string">'Host'</span>:<span class="string">'movie.douban.com'</span></span><br><span class="line">}</span><br><span class="line">movieList = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    link = baseUrl+<span class="built_in">str</span>(i*<span class="number">25</span>)</span><br><span class="line">    r = requests.get(link,headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'The status of page'</span>,<span class="built_in">str</span>(i+<span class="number">0</span>),<span class="string">'is'</span>,r.status_code)</span><br><span class="line">    soup = BeautifulSoup(r.text,<span class="string">'lxml'</span>)</span><br><span class="line">    divList = soup.find_all(<span class="string">'div'</span>,class_=<span class="string">'hd'</span>)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> divList:   </span><br><span class="line">        movie = t.a.span.text.strip()</span><br><span class="line">        movieList.append(movie)</span><br><span class="line"><span class="built_in">print</span>(movieList)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> B_编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学生学籍管理系统</title>
      <link href="/2021/09/16/S_%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/X_%E5%AD%A6%E7%94%9F%E5%AD%A6%E7%B1%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/09/16/S_%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/X_%E5%AD%A6%E7%94%9F%E5%AD%A6%E7%B1%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><code>引言</code></h2><p><strong>借用基础<code>链表</code>知识和一些<code>文件操作</code>写的学籍管理系统</strong></p><h2 id="完整代码（VC-6-0）"><code>完整代码（VC++6.0）</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">char</span> Name[<span class="number">10</span>];<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> Number;<span class="comment">//学号</span></span><br><span class="line"><span class="keyword">int</span> Grade;<span class="comment">//年级</span></span><br><span class="line"><span class="keyword">int</span> Class;<span class="comment">//班级</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>* <span class="title">next</span>;</span></span><br><span class="line">}student,*link;</span><br><span class="line"></span><br><span class="line">link h, t, p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span></span>;<span class="comment">//清屏</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Head</span><span class="params">()</span></span>;<span class="comment">//头指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span></span>;<span class="comment">//主菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Return</span><span class="params">()</span></span>;<span class="comment">//返回菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Findmenu</span><span class="params">()</span></span>;<span class="comment">//查找菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Keycontrol</span><span class="params">()</span></span>;<span class="comment">//键盘交互</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">()</span></span>;<span class="comment">//添加信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Addexample</span><span class="params">()</span></span>;<span class="comment">//添加信息输入示例</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">()</span></span>;<span class="comment">//查找信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Findname</span><span class="params">()</span></span>;<span class="comment">//按姓名查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Findnumber</span><span class="params">()</span></span>;<span class="comment">//按学号查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(link p)</span></span>;<span class="comment">//删除信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">View</span><span class="params">(link p)</span></span>;<span class="comment">//显示信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">(link p)</span></span>;<span class="comment">//修改信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift</span><span class="params">()</span></span>;<span class="comment">//切换为中文</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span>;<span class="comment">//导入信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">()</span></span>;<span class="comment">//导出信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Autooutput</span><span class="params">()</span></span>;<span class="comment">//自动导出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inputduce</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ppp</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Head();</span><br><span class="line">Shift();</span><br><span class="line">Menu();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Head</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">h = t = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(student));</span><br><span class="line">t-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">Clear();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*   学生学籍信息管理系统   *\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*       (1)添加信息        *\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*       (2)查找信息        *\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*       (3)导入信息        *\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*       (4)导出信息        *\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*       (5)退出系统        *\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">Keycontrol();</span><br><span class="line">getchar();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Returnmenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"即将为你返回主菜单"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"."</span>); Sleep(<span class="number">500</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"."</span>); Sleep(<span class="number">500</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"."</span>); Sleep(<span class="number">500</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"."</span>); Sleep(<span class="number">500</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"."</span>); Sleep(<span class="number">500</span>);</span><br><span class="line"><span class="keyword">while</span> (_kbhit())</span><br><span class="line">getchar();</span><br><span class="line">Menu();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Keycontrol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入："</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">switch</span> (n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">getchar();</span><br><span class="line">Add();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">getchar();</span><br><span class="line">Find();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">getchar();</span><br><span class="line">Input();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">getchar();</span><br><span class="line">Output();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">getchar();</span><br><span class="line">Autooutput();</span><br><span class="line">ppp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"选项不存在,请重新输入\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">Keycontrol();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Addexample</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入示例：\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"姓名：张三\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"学号：200912047\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"年级：20级\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"班级：1班\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Clear();</span><br><span class="line">Addexample();</span><br><span class="line">link p = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(student));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入姓名："</span>);gets(p-&gt;Name);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;Name[<span class="number">0</span>]==<span class="string">'\0'</span>)<span class="comment">//直接回车就重新输入</span></span><br><span class="line">Add();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入学号："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p-&gt;Number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入年级："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d级"</span>, &amp;p-&gt;Grade);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入班级："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d班"</span>, &amp;p-&gt;Class);</span><br><span class="line">getchar();</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"(1)确认添加(2)重新输入\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入："</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">Add();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">t-&gt;next = p;</span><br><span class="line">t = p;</span><br><span class="line">t-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"添加成功!"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">Returnmenu();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Findmenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Clear();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"(1)按姓名查找\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"(2)按学号查找\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入："</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Findmenu();</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">switch</span> (n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">getchar();</span><br><span class="line">Findname();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">getchar();</span><br><span class="line">Findnumber();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">getchar();</span><br><span class="line">Find();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Findname</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Clear();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入姓名："</span>);</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">10</span>];</span><br><span class="line">gets(ch);</span><br><span class="line"><span class="keyword">if</span> (ch[<span class="number">0</span>] == <span class="string">'\0'</span>)</span><br><span class="line">Findname();</span><br><span class="line">p = h;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">{</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(p-&gt;Name, ch))<span class="comment">//相同为0</span></span><br><span class="line">{</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (flag==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"该学生信息不存在!\n"</span>);</span><br><span class="line">Returnmenu();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">View(p);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Findnumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Clear();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入学号："</span>);</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">p = h;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">{</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;Number == m)</span><br><span class="line">{</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (flag==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"该学生信息不存在!\n"</span>);</span><br><span class="line">Returnmenu();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">View(p);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">View</span><span class="params">(link p)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Clear();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"信息如下：\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"姓名：%s\n"</span>, p-&gt;Name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"学号：%d\n"</span>, p-&gt;Number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"年级：%d级\n"</span>, p-&gt;Grade);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"班级：%d班\n"</span>, p-&gt;Class);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"(1)再次查询\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"(2)修改信息\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"(3)删除信息\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"(4)返回主菜单\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入："</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">switch</span> (n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">getchar();</span><br><span class="line">Find();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">getchar();</span><br><span class="line">Modify(p); </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">getchar();</span><br><span class="line">Delete(p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">getchar();</span><br><span class="line">Returnmenu();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">getchar();</span><br><span class="line">View(p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">(link p)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Clear();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"修改后的姓名："</span>); </span><br><span class="line">gets(p-&gt;Name);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;Name[<span class="number">0</span>] == <span class="string">'\0'</span>)<span class="comment">//直接回车就重新输入</span></span><br><span class="line">Modify(p);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"修改后的学号："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p-&gt;Number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"修改后的年级："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d级"</span>, &amp;p-&gt;Grade);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"修改后的班级："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d班"</span>, &amp;p-&gt;Class);</span><br><span class="line">getchar();</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"(1)确认修改(2)重新修改\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入："</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (getchar() == <span class="string">'2'</span>)</span><br><span class="line">Modify(p);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"修改成功!"</span>);</span><br><span class="line">Returnmenu();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(link p)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">link o = h;</span><br><span class="line"><span class="keyword">while</span> (o-&gt;next != p)</span><br><span class="line">o = o-&gt;next;</span><br><span class="line">o-&gt;next = p-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"删除成功！"</span>);</span><br><span class="line">Returnmenu();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">keybd_event(<span class="number">0x10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">keybd_event(<span class="number">0x10</span>, <span class="number">0</span>, KEYEVENTF_KEYUP, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Clear();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"目前仅支持UTF-8编码的文本！\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请把txt文档放在D盘根目录下\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入txt文件名："</span>);</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">20</span>];</span><br><span class="line">gets(ch);</span><br><span class="line"><span class="keyword">char</span> buf[BUFSIZE];</span><br><span class="line"><span class="keyword">char</span> h[] = { <span class="string">"D://"</span> };</span><br><span class="line"><span class="keyword">char</span> tt[] = { <span class="string">".txt"</span> };</span><br><span class="line"><span class="built_in">strcat</span>(h, ch);</span><br><span class="line"><span class="built_in">strcat</span>(h, tt);</span><br><span class="line">h[<span class="number">2</span>] = h[<span class="number">3</span>] = <span class="number">92</span>;</span><br><span class="line">FILE* fp;</span><br><span class="line">fp = fopen(h, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">if</span>(fp==<span class="literal">NULL</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"文件打开失败或文件不存在！"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">fgets(buf, BUFSIZE, fp);</span><br><span class="line">link p=(link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(student));</span><br><span class="line"><span class="keyword">int</span> i,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">9</span>; i &lt; <span class="built_in">strlen</span>(buf); i++)</span><br><span class="line">{</span><br><span class="line">p-&gt;Name[j] = buf[i];</span><br><span class="line">j++;</span><br><span class="line">}</span><br><span class="line">fgets(buf, BUFSIZE, fp);</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>,d=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">9</span>; i &lt; <span class="built_in">strlen</span>(buf); i++)</span><br><span class="line">{</span><br><span class="line">s+=(buf[i]-<span class="string">'0'</span>)*d;</span><br><span class="line">d*=<span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line">p-&gt;Number = s;</span><br><span class="line">fgets(buf, BUFSIZE, fp);</span><br><span class="line">s=<span class="number">0</span>;d=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">9</span>; i &lt; <span class="built_in">strlen</span>(buf)<span class="number">-3</span>; i++)</span><br><span class="line">{</span><br><span class="line">s+=(buf[i]-<span class="string">'0'</span>)*d;</span><br><span class="line">d*=<span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line">p-&gt;Grade = s;</span><br><span class="line">fgets(buf, BUFSIZE, fp);</span><br><span class="line">s=<span class="number">0</span>;d=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">9</span>; i &lt; <span class="built_in">strlen</span>(buf)<span class="number">-3</span>; i++)</span><br><span class="line">{</span><br><span class="line">s+=(buf[i]-<span class="string">'0'</span>)*d;</span><br><span class="line">d*=<span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line">p-&gt;Class=s;</span><br><span class="line">t-&gt;next = p;</span><br><span class="line">t = p;</span><br><span class="line">t-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"添加完毕!"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">Returnmenu();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> h[] = { <span class="string">"D://"</span> };</span><br><span class="line"><span class="keyword">char</span> t[] = { <span class="string">".txt"</span> };</span><br><span class="line"><span class="built_in">strcat</span>(h,p-&gt;Name);</span><br><span class="line"><span class="built_in">strcat</span>(h,t);</span><br><span class="line">h[<span class="number">2</span>] = h[<span class="number">3</span>] = <span class="number">92</span>;</span><br><span class="line">FILE* fp = <span class="literal">NULL</span>;</span><br><span class="line">fp=fopen(h, <span class="string">"w+"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"姓名：%s\n"</span>,p-&gt;Name,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"学号：%d\n"</span>,p-&gt;Number);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"年级：%d级\n"</span>, p-&gt;Grade);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"班级：%d班"</span>, p-&gt;Class);</span><br><span class="line">fclose(fp);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">Clear();</span><br><span class="line"><span class="keyword">char</span> ch = <span class="number">92</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"导出成功！\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"命名方式：姓名\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"导出格式：txt文档\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"导出目录：D:%c"</span>,ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">Returnmenu();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Autooutput</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> h[] = { <span class="string">"D://"</span> };</span><br><span class="line"><span class="keyword">char</span> t[] = { <span class="string">".txt"</span> };</span><br><span class="line"><span class="built_in">strcat</span>(h,p-&gt;Name);</span><br><span class="line"><span class="built_in">strcat</span>(h,t);</span><br><span class="line">h[<span class="number">2</span>] = h[<span class="number">3</span>] = <span class="number">92</span>;</span><br><span class="line">FILE* fp = <span class="literal">NULL</span>;</span><br><span class="line">fp=fopen(h, <span class="string">"w+"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"姓名：%s\n"</span>, p-&gt;Name, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"学号：%d\n"</span>, p-&gt;Number);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"年级：%d级\n"</span>, p-&gt;Grade);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"班级：%d班"</span>, p-&gt;Class);</span><br><span class="line">fclose(fp);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">ppp();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ppp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"已为你自动导出！\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"正在退出,请稍后"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"."</span>); Sleep(<span class="number">500</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"."</span>); Sleep(<span class="number">500</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"."</span>); Sleep(<span class="number">500</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"."</span>); Sleep(<span class="number">500</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"."</span>); Sleep(<span class="number">500</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_实践项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导数的本质</title>
      <link href="/2021/09/16/S_%E6%95%B0%E5%AD%A6/D_%E5%AF%BC%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
      <url>/2021/09/16/S_%E6%95%B0%E5%AD%A6/D_%E5%AF%BC%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<h1><code>导数</code></h1><h2 id="“导数”名称的来源"><code>“导数”名称的来源</code></h2><p><strong>导数通常来讲指的是变化率，导数的 “<code>导</code>” 字是指导的意思。</strong></p><p><strong>对于一个二维平面上的曲线而言，其曲线的弯曲变化率决定了该曲线的最终形态</strong></p><p><strong>换而言之，变化率（导数）指导了如何去画出这个图像，如何去得到这个图像，这就是<code>导数名称</code>的来源。</strong></p><hr><h2 id="由变化到变化率"><code>由变化到变化率</code></h2><p><strong>我们暂且忘记我们学过的求导公式，既然导数表示的是<code>变化率</code></strong></p><p><strong>那么我们就可以通过观察事物<code>变化特点</code>，得到其变化率，也就是其<code>导数</code>。</strong></p><p><strong>而对于事物的变化，我们需要关注的只有变化<code>前</code>和变化<code>后</code>这两种状态即可</strong></p><p><strong>举个例子：对于 y=2x 而言</strong></p><p><strong>x 是<code>自变量</code>（自己在其取值范围内可任意变化大小）</strong></p><p><strong>y 是<code>因变量</code>（因为 x 的变化而引起相应的变化）</strong></p><p><strong>我们不在关注实际的函数图像形式，上文已经提到，我们需要关注的只有变化前和变化后这两种状态即可</strong></p><p><strong>在这里我们借用一下数轴</strong></p><p><strong>变化前也就 x 本身，想象一下，x 本是一个数轴上的一个点，</strong></p><p><strong>因为 x 本身拥有一个取值范围，所以如果遍历 x 的所有可能性，那么在数轴上 x 会形成线段的状态（可能有很多段）。</strong></p><p><strong>当我们对 x 进行乘以 2 时，这些线段会被拉伸为原来的 2 倍，拉伸之后我们将这条数轴上的线段称为 y。</strong></p><p><strong>仔细想想看上述的 x 经历了什么，其变化过程就在于那个拉伸的过程。</strong></p><p><strong>拉伸的过程中，点的位置发生偏移，x 实质上就是一个点，x 的位置偏移就是 x 的实际变化过程，x=1 的点会偏移 2 位置，-1 的点会偏移到 -2 的位置，而有一个点始不发生偏移，那就是数轴的原点。</strong></p><p><strong>既然 x 的变化我们已知晓，也就是 x 表示的点的偏移，但这是远远不够的，就像知道<code>空间中一个点偏移到另外一个点，我们只知道其变化，而并不知道变化率，变化率无从求出。</code></strong></p><p><strong>还记得上文我们提到的吗？</strong></p><p><strong>我们需要关注的只有变化前和变化后这两种状态即可</strong></p><p><strong>我们回到变化前的状态，也就是数轴上的某些点<code>均匀分布</code>构成的线段</strong></p><p><strong>对于 x=1 这个点而言，我们去描述其状态其实就是下面这段话</strong></p><p><strong>该点位于原点右侧一个单位长度处</strong></p><p><strong>这段话包含了相对位置信息，而并非只是说 x=1 是一个点</strong></p><p><strong>而变化后呢？</strong></p><p><strong>该点位于原点右侧两个单位长度处</strong></p><p><strong>所以求得变化率时其实就是 —— 距离原点的<code>距离之比</code></strong></p><p><strong>也就是 2</strong></p><p><strong>前后状态之比也就是变化率也就是导数，如果在 x-y 坐标系里面表示</strong></p><p><strong>也就是 x 是变化前的状态，y 是变化后的状态</strong></p><p><strong>对其 x 和 y 轴作垂线，其交点组成的线段就是 y=2x 的图像，图像的斜率恰好为变化率。</strong></p><hr><h2 id="对于原点的个人猜测（可不看）"><code>对于原点的个人猜测（可不看）</code></h2><p><strong>原点的特点在于始终会回到原来的位置，即不会发生偏移。</strong></p><p><strong>至于原因在于其值为 0 的特殊性，任何数乘对其作用无效。</strong></p><p><strong>数乘其实就是<code>放缩</code>，这一点在线性代数和上文中显而易见）</strong></p><p><strong>我们在对一个事物去观察时，往往需要一个基准点，就像我们看一个东西时我们往往会找准一个角度去看，再换下一个角度一样。在实分析里面，我们学数学是为了是为了数学分析事物的实用性，所以在数学建模时我们选用的坐标系都会有一个原点（无论是直角坐标系还是极坐标系），可能在名称上略有不同，但终究是为了在数学上确定一个基准点，这个点与数建模对象无关，只和建模结果有关。还是上面那个例子，我们看一样事物时，选取不同的角度也就是不同的基准点，但事物始终时同一个事物，选取的角度不同，看到的结果也会不同，也就是建模结果不同。</strong></p><hr><h2 id="结语"><code>结语</code></h2><p><strong>虽然这一切在学过高中数学的人而言十分简单！</strong></p><p><strong>但对于背后的思维过程的推理仔细去想也是十分美妙的！</strong></p><hr><h1>END</h1>]]></content>
      
      
      <categories>
          
          <category> S_数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> 导数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>句子集</title>
      <link href="/2021/09/16/X_%E5%86%99%E4%BD%9C/J_%E5%8F%A5%E5%AD%90%E9%9B%86/"/>
      <url>/2021/09/16/X_%E5%86%99%E4%BD%9C/J_%E5%8F%A5%E5%AD%90%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一"><code>一</code></h2><p><strong>1、你是我疲惫生活中唯一的英雄梦想</strong></p><p><strong>2、山海的浩瀚，宇宙的浪漫。都在我内心翻腾，在推着我前进。—— 陈粒《绝对占有相对自由》</strong></p><p><strong>3、夏天有梅子味的晚霞和两三颗啤酒味的星</strong></p><p><strong>4、城南花开，城北花落。城东日升，城西日落</strong></p><p><strong>5、来日方长何惧车遥马慢</strong></p><p><strong>6、所谓英雄，就是能打破逆境的人啊</strong></p><p><strong>7、要问世间什么最难的，明确的爱，直接的厌恶，真诚的喜欢，站在太阳的坦荡和大声无愧的称赞自己</strong></p><p><strong>8、如果你看向我，我会温柔的消融，像火山中的雪。—— 米亚科托《耶路撒冷》</strong></p><p><strong>9、想被秋天卷起，卷进温柔的风里，柔软的云里，还有橘子味的拥抱里</strong></p><p><strong>10、你承诺过的月亮，还是没有出现，而我无眠，或者，我只是衣单天寒地，替你多爱了一夜人间</strong></p><hr>]]></content>
      
      
      <categories>
          
          <category> X_写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界的律动</title>
      <link href="/2021/09/16/X_%E5%86%99%E4%BD%9C/S_%E4%B8%96%E7%95%8C%E7%9A%84%E5%BE%8B%E5%8A%A8/"/>
      <url>/2021/09/16/X_%E5%86%99%E4%BD%9C/S_%E4%B8%96%E7%95%8C%E7%9A%84%E5%BE%8B%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>​       夕阳渐落，西天的云被染成了鲜艳的橙，万物林立在流彩的霞光之中，像极了严正以待的士兵。一阵暖风在红日光轮下成型，吹向高耸的云白山脉。满山的黄叶微微颤动，光影交错相叠。云白山头，坐着一位十几岁的少年郎，一袭白衣在夕阳的映衬下，显露出暗金色。其手间是一本《诗歌 300 首》，少年一手撑着脑袋，张口朗朗诵读道：余忆童稚时，能张目对日，明察秋毫。见藐小微物，必细察其纹理。</p><p>读完该段后便将书丢放到一旁，径直躺下，双手顺势垫住头部，悠然地望着蔚蓝的天空，笑道：沈爷爷小的时候竟能这么有趣，张目对日，那所见一切都会溢满金色，而且一切也会充满了温暖。说到此处，像是想起了什么，猛然翻身坐起，眺望着西天那抹淡淡红晕，会心地笑了起来，太阳公公要去地球另一侧送温暖了，在此之前，西天的云是它最后的温暖对象。</p><p>那么地球另一侧的人是否知道张目对日这个秘密呢？少年遐想道，“若我长大了，一定要去地球的那一侧，告诉他们这个秘密，算了，我现在就要告知天下这个大秘密”。</p><p>在夕阳最后的余晖中，少年双手成拳，对着西天呐喊：太阳公公！多谢你给我的世界带来金色和温暖！遥远的西天传来阵阵回声，像是这个世界对少年的回应。</p><p>随着最后一个 “暖” 字结束，夕阳消失了。</p><p>星球的这一侧变成了略带温热的蓝调星球。</p><p>这是黑夜来临前的独一无二的蓝调世界，远处的世界渐渐被黑色覆盖，深蓝色慢慢变成黑色。当夜幕袭来，整个天空都会被星河取代。但在此之前，我们会短暂地停留在这个深蓝色世界里面。</p><p>“该回家了”，少年将书拿起来，目光四处环绕着这个深蓝世界，向家的方向走去，一步步带着悠闲和惬意，黑夜和冷风被他远远甩在身后，月光微微，轻轻打在他的身上。</p>]]></content>
      
      
      <categories>
          
          <category> X_写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown</title>
      <link href="/2021/09/16/Z_%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/MarkDown/"/>
      <url>/2021/09/16/Z_%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/MarkDown/</url>
      
        <content type="html"><![CDATA[<h2 id="文字样式"><code>文字样式</code></h2><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span>&gt;</span></span>该处为文字<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span>该处为文字(大小：6)<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">5</span> <span class="attr">color</span>=<span class="string">#D1DAF2</span>&gt;</span></span><span class="strong">**该处为文字(大小：6，颜色：#D1DAF2，已加粗)**</span><span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="相关链接"><code>相关链接</code></h2><p><strong><a href="https://markdown.com.cn/intro.html">MarkDown 语法</a></strong><br><strong><a href="https://markdown.com.cn/editor/">在线 MarkDown 编辑工具</a></strong><br><strong><a href="https://gist.github.com/rxaviers/7360908">表情图</a></strong><br><strong><a href="https://blog.csdn.net/qq_40896997/article/details/106551767">表情图（备用）</a></strong><br><strong><a href="https://markdown.com.cn/extended-syntax/strikethrough.html">删除线</a></strong><br><strong><a href="https://markdown.com.cn/extended-syntax/task-lists.html">任务列表</a></strong></p><p>🔲<br>✅<br>☑️</p><h2 id="END"><code>END</code></h2>]]></content>
      
      
      <categories>
          
          <category> Z_杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>睡眠革命</title>
      <link href="/2021/09/16/Z_%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/S_%E7%9D%A1%E7%9C%A0%E9%9D%A9%E5%91%BD/"/>
      <url>/2021/09/16/Z_%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/S_%E7%9D%A1%E7%9C%A0%E9%9D%A9%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="设定固定起床点"><code>设定固定起床点</code></h2><p><strong>比上班 / 学时间提前 <code>90分钟</code>，保证睡醒有充分<code>时间缓冲</code>状态，不耽误任何事情</strong></p><h2 id="倒推理想入眠期"><code>倒推理想入眠期</code></h2><p><strong>一、刚开始用 5 个周期倒推，之后根据起床状态不停尝试，多退少补，慢慢找到专属自己的作息表。</strong><br><strong>二、注意，入睡时间不要太晚，不要熬夜！根据昼夜节律，身体在 21 点分泌褪黑素，2-3 点达到睡眠最深的状态，千万别错过这个黄金睡眠阶段</strong></p><h2 id="重中之重的睡前睡后程序"><code>重中之重的睡前睡后程序</code></h2><h3 id="睡前"><code>睡前</code></h3><p><strong>一、入睡前 90 分钟淋浴（降温）</strong><br><strong>操作方法：如果 23:30 点睡觉，则在 22 点前结束沐浴，22 点 15 分钟左右上床，通过 15 分钟的睡前准备，还有 1 小时左右的睡前阅读、睡前瑜伽等不带刺激大脑的日常安排，到了快 11 点时，保证你能快速入眠，睡得香香的～</strong><br><strong>二、足浴（&lt;=15min）</strong><br><strong>泡脚时下载你的一天，进行复盘，把今日收获或压力，记录下来，让成果可视化；顺便制作明日计划，让第二天有方向感地度过。</strong><br><strong>三、调节室内温度</strong><br><strong>科学研究表示，房间温度在 <code>20-25</code> 度时，身体感觉最舒服，最适合入睡。</strong><br><strong>四、睡前缓和运动</strong><br><strong>瑜伽类的舒展运动、整理房间等。</strong><br><strong>五、单调法则</strong><br><strong>冥想 + 看书</strong><br><strong>六、调节光线</strong><br><strong>睡觉前从白灯变成暖灯，杜绝蓝光！</strong></p><blockquote><p>让手机单独一个屋睡，手机已经到了和大人分开睡的年龄了，不要再宠幸它了，会惯坏的。</p></blockquote><p><strong>注：超过 10 点后不再吃东西；正常作息的人，睡前 90 分钟不再进食</strong></p><h3 id="睡后"><code>睡后</code></h3><p><img src="https://pic.imgdb.cn/item/611bf7b34907e2d39c6676e2.jpg" alt="picture"></p><h2 id="其他问题">其他问题</h2><p><strong>一、睡不着时，就重复入睡程序，下床去泡脚、看书、放轻音乐，别在床上做无用功！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Z_杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 睡眠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无节制消费的元凶</title>
      <link href="/2021/09/16/Z_%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/W_%E6%97%A0%E8%8A%82%E5%88%B6%E6%B6%88%E8%B4%B9%E7%9A%84%E5%85%83%E5%87%B6/"/>
      <url>/2021/09/16/Z_%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/W_%E6%97%A0%E8%8A%82%E5%88%B6%E6%B6%88%E8%B4%B9%E7%9A%84%E5%85%83%E5%87%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="无节制消费的元凶"><a href="https://www.bilibili.com/bangumi/play/ep119577?spm_id_from=333.788.b_636f6d6d656e74.4">无节制消费的元凶</a></h2><p><strong>1、<code>计划报废</code>，将产品做成<code>易损</code>品；</strong></p><p><strong>2、不断<code>推陈出新</code>，使人对现状不满，不停购买；</strong></p><p><strong>3、出售<code>安全属性</code>等，利用人类本能；</strong></p><p><strong>4、广告制作中以消费者<code>焦虑</code>为目标，贩卖焦虑，恐惧式营销，唤醒焦虑再提供一个解决之道；</strong></p><p><strong>5、将儿童超级消费者的计划，故事性与<code>授权制</code>的销售，如漫威；同时利用小孩意见对家长购物决策的影响力，针对孩子做广告；</strong></p><p><strong>6、将成年人变成孩子一样，成为模范消费者，怂恿成年人释放童心，漫展、周边，成年人与儿童消费市场的界限消失，游戏，成年人更爱<code>暴力</code>行动游戏；</strong></p><p><strong>7、新的销售方式：创造 <code>“粘性行为”</code>，如尼奥宠物游戏，玩家反复登陆查看状态，不断回到游戏，商家在这种网站上投放广告，甚至植入游戏内容（植入式广告）；</strong></p><p><strong>8、rewards、levels、achievement，<code>挑战与激励并存</code>，用成就激励玩家不停地玩，利用人类天生追求奖励的本能；将这种游戏策略用到市场营销中，游戏化，如集卡，将消费本身变成游戏；</strong></p><p><strong>9、成年人消费会更谨慎和犹豫，<code>信贷制</code>改变了这一切，信用卡，即时消费主义，消费欲望被释放并且更容易接受高价，暂时忘记购物欲付款间的紧密联系，现金的拿出会让人感到痛苦；信用卡利用人们对未来的积极预期，促使成年人像小孩子一样消费，我想要并且现在就要；</strong></p><p><strong>10、互联网与<code>支付软件</code>，让购物更轻松，省去会让消费者迟疑的中间环节。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Z_杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消费主义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/P_%E6%8E%92%E5%BA%8F/M_%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/P_%E6%8E%92%E5%BA%8F/M_%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1><code>冒泡排序</code></h1><p><strong><code>冒泡排序</code>也称为沉底排序，通过一次又一次巡回将最大（小）数沉入（冒泡）到末尾</strong></p><h2 id="基础代码"><code>基础代码</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> i, j, t;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n;i++)<span class="comment">//控制巡回次数(n-1)（两个为一对）</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; n; j++)<span class="comment">//每次巡回都从1开始直到末尾</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j+<span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line">t = a[j]; a[j] = a[j+<span class="number">1</span>]; a[j+<span class="number">1</span>] = t;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>上述代码每一次巡回都从 1 到 n-1，末尾的数会在一次又一次循环中逐渐排好，我们无需再巡回到末尾。</strong></p><p><strong>于是便有了下面的这段代码</strong></p><h2 id="更优代码"><code>更优代码</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//小于等于2——未排序 / 大于2——已排序</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], n, t = <span class="number">0</span>;<span class="comment">//防止全相等的情况下，t未初始化</span></span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">2</span>; i--)<span class="comment">//i=1时内层循环不会运行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line">t = a[j]; a[j] = a[j + <span class="number">1</span>]; a[j + <span class="number">1</span>] = t;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="最优解"><code>最优解</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], n, t=<span class="number">0</span>;<span class="comment">//防止全相等的情况下，t未初始化</span></span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">2</span>; i--)<span class="comment">//i=1时内层循环不会运行</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line">t = a[j]; a[j] = a[j + <span class="number">1</span>]; a[j + <span class="number">1</span>] = t;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (t == a[i - <span class="number">1</span>])<span class="comment">//i位置已为最大值，t用来交换了次大值，也就是i-1位的值</span></span><br><span class="line">i--;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 冒泡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 迷宫</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/01%20%E8%BF%B7%E5%AE%AB/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/01%20%E8%BF%B7%E5%AE%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="https://www.luogu.com.cn/problem/P1141">01 迷宫</a></strong></p><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1005</span></span><br><span class="line"><span class="keyword">int</span> m, n, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> book[MAX][MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">book[x][y] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> next[<span class="number">4</span>][<span class="number">2</span>] = { {<span class="number">1</span>,<span class="number">0</span>},{<span class="number">0</span>,<span class="number">1</span>},{<span class="number">-1</span>,<span class="number">0</span>},{<span class="number">0</span>,<span class="number">-1</span>} };</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">3</span>; k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> dx = x + next[k][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> dy = y + next[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (((<span class="built_in">map</span>[dx][dy] == <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[x][y] == <span class="number">1</span>) || (<span class="built_in">map</span>[dx][dy] == <span class="number">1</span> &amp;&amp; <span class="built_in">map</span>[x][y] == <span class="number">0</span>)) &amp;&amp; dx &gt;= <span class="number">1</span> &amp;&amp; dx &lt;= n &amp;&amp; dy &gt;= <span class="number">1</span> &amp;&amp; dy &lt;= n &amp;&amp; book[dx][dy] == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">ans++;</span><br><span class="line">dfs(dx, dy);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">book[i][j] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">char</span> ch[MAX];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">clear();</span><br><span class="line">dfs(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>以上代码虽然是正确的，但是因为<code>效率过低</code>，在洛谷平台的样例测试中会出现<code>时间超限</code>的情况如下图：</strong><br><img src="https://pic.imgdb.cn/item/60feb0415132923bf8635a91.jpg" alt="测试结果"></p><h2 id="剪枝优化">剪枝优化</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未更</span></span><br></pre></td></tr></tbody></table></figure><h2 id="END">END</h2>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 算法 </tag>
            
            <tag> 搜索🔍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT46 リモコン</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/AT46%20%E3%83%AA%E3%83%A2%E3%82%B3%E3%83%B3/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/AT46%20%E3%83%AA%E3%83%A2%E3%82%B3%E3%83%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><a href="https://www.luogu.com.cn/problem/AT46">AT46 リモコン</a></p><h2 id="代码详解"><code>代码详解</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="keyword">int</span> A, B, step, m = <span class="number">999999999</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (step &gt; m)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (x == y)</span><br><span class="line">{</span><br><span class="line">m = min(step, m);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x &gt; y)<span class="comment">//大于就往下搜</span></span><br><span class="line">{</span><br><span class="line">dfs(x - <span class="number">1</span>, y,step+<span class="number">1</span>);</span><br><span class="line">dfs(x - <span class="number">5</span>, y,step+<span class="number">1</span>);</span><br><span class="line">dfs(x - <span class="number">10</span>, y,step+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (x &lt; y)<span class="comment">//小于就往上搜</span></span><br><span class="line">{</span><br><span class="line">dfs(x + <span class="number">1</span>, y, step + <span class="number">1</span>);</span><br><span class="line">dfs(x + <span class="number">5</span>, y, step + <span class="number">1</span>);</span><br><span class="line">dfs(x + <span class="number">10</span>, y, step + <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;A, &amp;B);</span><br><span class="line">dfs(A, B,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? b : a;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="关键点"><code>关键点</code></h2><h3 id="剪枝"><code>剪枝</code></h3><p><strong>必须<code>剪枝</code>，大于最小次数就退出，不然会递归不会结束，因为不看最小次数则有<code>无数种</code>可能</strong><br><strong>也就是下面这段代码</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (step &gt; m)</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="回车符"><code>回车符</code></h3><p><strong>AT 开头的日本题目输出时必须要<code>回车</code>，否则<code>必错</code>！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 算法 </tag>
            
            <tag> 搜索🔍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八皇后 Checker Challenge</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/B_%E5%85%AB%E7%9A%87%E5%90%8E%20Checker%20Challenge/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/B_%E5%85%AB%E7%9A%87%E5%90%8E%20Checker%20Challenge/</url>
      
        <content type="html"><![CDATA[<h1>八皇后问题</h1><h2 id="题目描述"><code>题目描述</code></h2><p><strong>一个如下的 6×6 的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线（包括两条主对角线的所有平行线）上至多有一个棋子。</strong><img src="https://img-blog.csdnimg.cn/20210514085622993.png#pic_center" alt="八皇后"><br><strong>上面的布局可以用序列 2  4  6  1  3  5来描述，第 i 个数字表示在第 i 行的相应位置有一个棋子，如下：<br>行号 1 2 3 4 5 6<br>列号 2 4 6 1 3 5<br>这只是棋子放置的一个解。请编一个程序找出所有棋子放置的解。<br>并把它们以上面的序列方法输出，解按字典顺序排列。<br>请输出前 3 个解，最后一行是解的总个数。</strong></p><hr><h2 id="输入"><code>输入</code></h2><p><strong>一行一个正整数 n，表示棋盘是 n×n 大小的。</strong></p><hr><h2 id="输出"><code>输出</code></h2><p><strong>前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。</strong></p><hr><h2 id="样例输入"><code>样例输入 </code></h2><p><strong>6</strong></p><hr><h2 id="样例输出"><code>样例输出</code></h2><p><strong>2 4 6 1 3 5<br>3 6 2 5 1 4<br>4 1 5 2 6 3<br>4</strong></p><hr><h2 id="提示"><code>提示</code></h2><p><strong>【数据范围】<br>对于 100%100% 的数据，6 \le n \le 136≤n≤13。</strong></p><hr><h2 id="题目来源"><code>题目来源</code></h2><p><a href="https://www.luogu.com.cn/problem/P1219">八皇后 Checker Challenge</a></p><hr><h2 id="完整代码如下："><code>完整代码如下：</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n, cnt;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> lie[<span class="number">20</span>];<span class="comment">//列</span></span><br><span class="line"><span class="keyword">int</span> u[<span class="number">40</span>];<span class="comment">//左斜</span></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">40</span>];<span class="comment">//右斜</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (cnt &lt;= <span class="number">3</span>) </span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (x &gt; n)</span><br><span class="line">{</span><br><span class="line">cnt++;</span><br><span class="line">pr();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (lie[i] == <span class="number">0</span> &amp;&amp; u[x - i + n] == <span class="number">0</span> &amp;&amp; v[x + i] == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">lie[i] = <span class="number">1</span>;</span><br><span class="line">u[x - i + n] = <span class="number">1</span>;</span><br><span class="line">v[x + i] = <span class="number">1</span>;</span><br><span class="line">a[x] = i;</span><br><span class="line">dfs(x + <span class="number">1</span>);</span><br><span class="line">lie[i] = <span class="number">0</span>;</span><br><span class="line">u[x - i + n] = <span class="number">0</span>;</span><br><span class="line">v[x + i] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, cnt);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>若为N皇后问题（n组问题）</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n),n!=<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="思路详解"><code>思路详解:</code></h2><h3 id="1）本题类型："><code>1）本题类型：</code></h3><blockquote><p><strong>我们需要遍历所有的行，然后在遍历行的同时我们要选某一列去放数，有诸多可能性 在这里我们用DFS去遍历所有可能性</strong></p></blockquote><h3 id="2-代码实现："><code>2)代码实现：</code></h3><p><strong><code>第一步：定义标记数组：</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> lie[<span class="number">20</span>];<span class="comment">//列</span></span><br><span class="line"><span class="keyword">int</span> u[<span class="number">40</span>];<span class="comment">//左斜</span></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">40</span>];<span class="comment">//右斜</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>问题一：怎么做？</strong><br>我们要确保标记点的<strong>行和列及左右45度</strong>都没其他标记点<br>因为在这里我们将<strong>行数</strong>当变量输入DFS函数，<strong>一层一层向下递</strong>的时候<br>每一层的函数的<strong>行数必然不同</strong>，所以行数不必再标记<br>我们在放一个数时，要对其所在某列，某斜的<strong>一串</strong>进行标记<br>所以我们要找到列，左邪，右斜的其<strong>本身包含的元素的相同性质</strong><br>以保证我们标记的是某列某斜的一串<br>通过观察我们可以发现：<br><strong>列</strong>上的元素本身<strong>同列</strong>（显而易见）<br><strong>左斜</strong>上元素的<strong>行列坐标之和</strong>相等<br><strong>右斜</strong>上元素的<strong>行列坐标之差的绝对值</strong>相等<br><strong>问题二：为什么左斜和右斜数组开的是列数的二倍？</strong><br>因为我们是根据性质去标记的，列数最大为n，n最大为13，我们开20的数组已经足够<br>但是左斜是行列坐标之和，最大可能是2<em>n，我们开40的数组也会够用<br>右斜是行列坐标之差，可能为负数，我们在标记时将其加n（如下DFS内）<br>加n后，最大可能是2</em>n-1，我们开40数组确保够用</p></blockquote><p><strong><code>第二步：DFS函数：</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (x &gt; n)</span><br><span class="line">{</span><br><span class="line">cnt++;<span class="comment">//先累加再输出，让cnt大小和pr内函数相匹配</span></span><br><span class="line">pr();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (lie[i] == <span class="number">0</span> &amp;&amp; u[x - i + n] == <span class="number">0</span> &amp;&amp; v[x + i] == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">lie[i] = <span class="number">1</span>;</span><br><span class="line">u[x - i + n] = <span class="number">1</span>;<span class="comment">//确保其对应的数组下下标&gt;=1</span></span><br><span class="line">v[x + i] = <span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">a[x] = i;</span><br><span class="line">dfs(x + <span class="number">1</span>);</span><br><span class="line">lie[i] = <span class="number">0</span>;</span><br><span class="line">u[x - i + n] = <span class="number">0</span>;</span><br><span class="line">v[x + i] = <span class="number">0</span>;<span class="comment">//常见的回溯过程</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong><code>第三步：输出：</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (cnt &lt;= <span class="number">3</span>) </span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="简化代码："><code>简化代码：</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 11</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> h[MAX],l[MAX],zx[MAX],yx[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (i == n + <span class="number">1</span>)</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (!l[j] &amp;&amp; !zx[i - j] &amp;&amp; !yx[i + j])</span><br><span class="line">{</span><br><span class="line">h[i] = <span class="number">1</span>;</span><br><span class="line">l[j] = <span class="number">1</span>;</span><br><span class="line">zx[i - j] = <span class="number">1</span>;</span><br><span class="line">yx[i + j] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(i + <span class="number">1</span>);</span><br><span class="line">h[i] = <span class="number">0</span>;</span><br><span class="line">l[j] = <span class="number">0</span>;</span><br><span class="line">zx[i - j] = <span class="number">0</span>;</span><br><span class="line">yx[i + j] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="END"><code>END</code></h3>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 算法 </tag>
            
            <tag> 搜索🔍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS算法的本质</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/DFS%E7%AE%97%E6%B3%95%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/DFS%E7%AE%97%E6%B3%95%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<h1><code>DFS算法的本质</code></h1><h2 id="引言"><code>引言</code></h2><p><strong>DFS</strong> 俗称深搜，是一种常见的算法模型</p><p>我们通过借助<strong>函数递归</strong>和<strong>递归停止条件</strong>的运用实现对数据的<strong>高级枚举</strong></p><p><strong>对于 DFS 算法而言，最重要的是如何去枚举数据，即如何去搜索？</strong></p><p>这是在运用 <strong>DFS</strong> 之前我们就应该思考的问题，只有对其思考清楚，才不妨碍我们下一步去运用代码实现 DFS！</p><p>OK! 让我们开始吧！</p><hr><h2 id="何为搜索？"><code>何为搜索？</code></h2><p>让我们先忘记你学过 <strong>DFS</strong> 算法这件事，抛开脑子中具体的 <strong>代码结构</strong>，单纯地以一个自然人地角度去思考，什么是搜索？</p><p>单独思考一个词汇可能我们不会获得很多，下面我们借助具体例子来说明：</p><p>假如我说 —— 我们去<strong>搜索</strong>一间房子，你会想到什么？</p><p>寻找？探索？还是在房子里面转悠？</p><p>可能这么说会引起<strong>歧义</strong>，这里我们再具体一点</p><p>换成 —— 我们去<strong>搜索</strong>这间房子，看看有没有<strong>宝藏</strong>藏在里面！</p><p>上面两句话地区别在于，一个无目的，一个有目的</p><p>一个只是再房间里面<strong>转悠</strong>，一个在转悠地同时还要看看房间里面有没有<strong>宝藏</strong></p><p>其实上面这两句话对应了 DFS 算法的两种基本类型</p><p><strong>无目的</strong>的深度搜索 —— 裸的 DFS<br><strong>有目的</strong>的深度搜索 —— 一般的 DFS</p><p>(1) <strong>无目的</strong> DFS 就像你去亲戚家做客，主人带你在他家闲逛了解他家的布局</p><p>(2) <strong>有目的</strong> DFS 就像土匪掠夺财产时在你家到处探寻，直到找到你的<strong>私人小金库</strong>！</p><p>但作为 <strong>算法</strong> 而言我们不能到处瞎转悠，有经验的主人和土匪往往也不会那么做！</p><p>我们需要一种高效的搜索方案，它能让我们在最短时间内完成搜索任务！</p><hr><h2 id="如何搜索？"><code>如何搜索？</code></h2><p><strong>DFS 的关键要领在于 —— <code>当下这一步干什么，然后下一步干什么。</code></strong></p><p><strong>这是所有 DFS 搜索🔍算法的<code>核心</code>，我们只要知道当下和下一步的动作，就能通过递归连贯出整个搜索动作。</strong></p><p><strong>让我们来举个例子</strong><br><strong><a href="https://www.luogu.com.cn/problem/P1036">题目：DFS - 选数</a></strong><br><strong>题目大意：求从 N 个数里面选出 K 个数出来并且使选出的数的和为素数的的可能性有几种？</strong></p><p><strong>假如：N=5，K=3</strong></p><p><strong>5 个数为：1 2 3 4 5</strong></p><p><strong>我们要做的是挑出 3 个数出来然后计算求和并判断和是否为素数。</strong></p><p><strong>你可能已经想到怎么去选了，一般的选法如下：</strong></p><p><strong>1 2 3</strong><br><strong>1 2 4</strong><br><strong>1 2 5</strong><br><strong>1 3 4</strong><br><strong>1 3 5</strong><br><strong>1 4 5</strong><br><strong>2 3 4</strong><br><strong>略</strong></p><p><strong>我们要做的就是每一次选出一个数，首先仔细观察上述选数过程</strong><br><strong>当我们去选 1 2 3 时我们发现这是依次<code>递增</code>的，我们不免想到用 <code>For循环</code>去实现这个选数过程，For 循环每进行<code>一次</code>就<code>选入</code>一个数</strong><br><strong>可能你会这么写：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dfs(<span class="keyword">int</span> i,<span class="keyword">int</span> k,<span class="keyword">int</span> n)<span class="comment">//选入的数为i，选了k个数，要选n个数</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(k==n)</span><br><span class="line"><span class="comment">//略</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">dfs(i+<span class="number">1</span>,k+<span class="number">1</span>，n)</span><br><span class="line"><span class="comment">//略</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>但问题来了我们在 <code>1 2 3</code> 选完之后是如何蹦到 <code>1 2 4</code> 呢？</strong></p><p><strong>难不成我们需要再从头选一遍，<code>标记3</code> 已经被选过了，直接<code>越过它</code>去选 4</strong></p><p><strong>仔细思考你会发现这是一个无比<code>繁琐</code>的工作，你需要<code>灵活</code>的标记策略来应对不同的选数情况</strong></p><p><strong>我们想要的是不再从头去选，而是在选完 1 2 的基础上再去直接选 4</strong></p><p><strong>所以我们需要一种方法来<code>保留</code>选完 1 2 时的状态</strong></p><p><strong>可能 DFS 算法尚在<code>研究</code>时人们就发现了，他们需要<code>保留</code>一些状态，再去确定<code>下一步的状态</code></strong></p><p><strong>巧妙的是<code>函数递归</code>在设计时就拥有<code>保留中断线程</code>的能力，在选数时我们可以<code>完全用函数递归</code>来写</strong></p><p><strong>这样写的好处在于，<code>每一层函数</code>选择<code>一个数</code>，选着完后就像<code>线路</code>一样被<code>保存</code>下来</strong></p><p><strong>最简单的我们选完 <code>1</code>，<code>1的状态</code>就被保存下来了，我们要在 <code>1后面</code>选数时，只需要 return 返回到选完 <code>1</code> 时的状态即可，这样我们可以顺利地选出</strong></p><p><strong>1 2</strong><br><strong>1 3</strong><br><strong>1 4</strong></p><p><strong>当<code>前两个</code>数选完后，也就保存了<code>选完两个数</code>的状态</strong></p><p><strong>其实我们可以用<code>结点</code>去理解这个过程</strong></p><p><strong>最开始我们选择了 1 这个<code>结点</code>，然后我们就可以连接 2/3/4 这<code>三个结点</code></strong></p><p><strong>假如我们连接了 <code>1和2结点</code>就形成了 <code>1-2</code> 的<code>线路</code>，当我么们再往下 DFS 选数时，<code>1-2</code> 这条线路会被<code>保存</code>下来，通过<code>选数</code>和不断 return 返回到 1-2 这条线路的末尾，我们选出了：</strong></p><p><strong>1 2 3</strong><br><strong>1 2 4</strong><br><strong>1 2 5</strong></p><p><strong><code>核心代码如下：</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从x单元开始的选数（每往下递一层，For循环中i开始的位置需要改变）</span></span><br><span class="line"><span class="comment">//已选m个数</span></span><br><span class="line"><span class="comment">//m个数的和为sum</span></span><br><span class="line"><span class="comment">//需要得到k个数,一共n个数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> m,<span class="keyword">int</span> sum,<span class="keyword">int</span> k,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (m == k)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (isPrime(sum))</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; n; i++)</span><br><span class="line">dfs(i+<span class="number">1</span>,m + <span class="number">1</span>, sum + *(p + i), k, n);<span class="comment">//i+1而非x+1（因为是靠i来选数）</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>部分过程如下：</strong><br><strong>1 // 选 1 结点</strong><br><strong>1-2 // 保留 1 结点选 2 结点</strong><br><strong>1-2-3 // 保留 1-2 线路选 3 结点</strong><br><strong>1-2 // 返回到 1-2 线路的末尾</strong><br><strong>1-2-4 // 在已保留 1-2 线路后选 4 结点</strong><br><strong>1-2 // 返回到 1-2 线路的末尾</strong><br><strong>1-2-5 // 以此类推！！！</strong><br><strong>1-2</strong><br><strong>1</strong><br><strong>1-3</strong><br><strong>1-3-4</strong><br><strong>1-3</strong><br><strong>1-3-5</strong><br><strong>1-3</strong><br><strong>1</strong></p><p><strong>这也是<code>为什么</code>你所见到的 <code>DFS算法</code>都拥有<code>递归调用</code>的原因</strong></p><p><strong>DFS 算法本就是依托于<code>函数递归</code>而设计的一种<code>高级枚举算法</code></strong></p><p><strong>至于为什么叫做深度搜索，相信在刚刚梳理的过程中你也可以感受出来，函数一层一层往下<code>递</code>，层层递进，不断<code>深入</code>去探索，直到碰到<code>终止条件</code></strong></p><p><strong><code>当下这一步干什么，然后下一步干什么</code>，这两步其实干的是<code>同一类型</code>的事情，在<a href="https://www.luogu.com.cn/problem/P1036">选数</a> 这个例子中就是<code>选数</code>二字，DFS 函数的<code>功能</code>就是<code>选数</code>，每一次<code>参数的传入</code>就是一次选数的过程！</strong></p><hr><h2 id="构建DFS的框架"><code>构建DFS的框架</code></h2><p><strong>我们在上述讲到了 DFS 算法的<code>内部</code>过程，这可以让我们更好的去<code>理解</code> DFS 算法是如何<code>执行</code>的，但是在<code>写题</code>时，光有这些是<code>远远不够</code>的，我们还需要一些宏观的<code>框架思维</code>，这可以帮助我们在面对<code>新的问题</code>时，<code>更快速</code>地想出解决办法。</strong></p><p><strong>我们从以下<code>三个</code>方面去思考一道 DFS 题目</strong></p><h3 id="递归の最大深度"><code>递归の最大深度</code></h3><p><strong>定义：DFS 函数<code>递归</code>套娃时达到最底部（最深处）的过程中所经历的<code>套娃次数</code></strong><br><strong>结论：递归の最大深度取决于输入的数据的<code>大小</code>和<code>规模</code></strong></p><h4 id="例子"><code>例子</code></h4><p><strong>01. 选数：递归的最大深度其实就是输入的 k</strong><br><strong>02. 全排列：递归的最大深度其实就是输入的 n+1 的大小，函数一层一层往下递直到 step=n+1</strong><br><strong>03. 单词接龙：递归的最大深度不定，取决于数据规模，即：有多少个单词</strong><br><strong>04. 迷宫问题：递归的最大深度不定，取决于数据规模，即：地图的大小和特征</strong><br><strong>05. 八皇后问题：递归的最大深度就是输入的 n，即：图的边长</strong><br><strong>不胜枚举！！！</strong></p><p><strong>对于<code>裸的DFS</code>，我们要遍历所有可能性，递归的最大深度<code>不定</code></strong><br><strong>对于<code>非裸的DFS</code>，我们要加上 DFS 的 <code>if条件</code>，适时进行<code>归</code>的操作</strong></p><hr><h3 id="该层函数与返回到该层函数"><code>该层函数与返回到该层函数</code></h3><p><strong>该层函数：<code>递</code>之前完成的动作</strong><br><strong>返回到该层函数：<code>归</code>之后需要完成的动作</strong></p><h4 id="代码示例"><code>代码示例</code></h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (step == n + <span class="number">1</span>)<span class="comment">//最大深度为n</span></span><br><span class="line">{</span><br><span class="line">略</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(book[i]==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">book[i]=<span class="number">1</span>;</span><br><span class="line">p[step]= i;<span class="comment">//往结点上放数</span></span><br><span class="line">dfs(step + <span class="number">1</span>);</span><br><span class="line">book[i]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>一、<code>递之前</code>完成的动作有 <code>2个</code></strong><br><strong>1、For 循环选数、标记数并放数</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//选出一个数</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(book[i]==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">book[i]=<span class="number">1</span>;<span class="comment">//标记数</span></span><br><span class="line">        p[step]= i;<span class="comment">//往结点上放数</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>2、将 <code>step+1</code> 并传入下一层函数中 (<code>Very Important</code>)</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs(step+<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><p><strong>二、<code>归之后</code>需要完成的动作也有 <code>2个</code></strong><br><strong>1、取消标记</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book[i]=<span class="number">0</span>;<span class="comment">//取消标记</span></span><br></pre></td></tr></tbody></table></figure><p><strong>2、若 for 循环<code>没完</code>则继续<code>选数、标记数并放数</code> , <code>完了</code>则<code>跳出For循环</code></strong></p><p><strong><code>总结:</code> 我们可发现这两个过程是可以首尾部巧妙连接的，也正由此<code>连贯</code>出整个递归过程</strong></p><hr><h3 id="通过框架，确认DFS函数的参数！"><code>通过框架，确认DFS函数的参数！</code></h3><p><strong><code>例题：</code><a href="https://www.luogu.com.cn/problem/P1025">数的分割</a></strong></p><p><strong>题目大意：把正整数 n 分解为 k 个正整数，排在后面的数必须大于或等于前面的数，输出所有方案。</strong></p><p><strong>1、确认<code>递归深度</code></strong></p><p><strong>分出 k 个数即可，递归深度为 k（可以用 cnt 来计数）</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cnt == k)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (n == sum)</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>2、该层函数</strong></p><p><strong>功能：分割出一个数且确保当下分割的数比之前的大（所以要保留分割出来的数进行比较)</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=cut; i &lt;= n-sum; i++)</span><br><span class="line">dfs(cnt + <span class="number">1</span>, i, sum + i);</span><br><span class="line"><span class="comment">//cut为上次分割的数，从cut开始保证大于等于这个条件</span></span><br></pre></td></tr></tbody></table></figure><p><strong>3、返回到该层函数</strong></p><p><strong>功能：无</strong></p><p><strong><code>完整代码如下：</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n, k, ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cnt,<span class="keyword">int</span> cut,<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (cnt == k)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (n == sum)</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (cut == <span class="number">0</span>)<span class="comment">//第一次分割数最小为1</span></span><br><span class="line">cut++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=cut; i &lt;= n-sum; i++)<span class="comment">//n-sum用来减少次数，剪枝优化</span></span><br><span class="line">dfs(cnt + <span class="number">1</span>, i, sum + i);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>END</code></h1>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 算法 </tag>
            
            <tag> 搜索🔍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单词接龙</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/D_%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/D_%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><code>题目描述</code></h2><p><strong>单词接龙是一个与我们经常玩的成语接龙相类似的游戏，现在我们已知一组单词，且给定一个开头的字母，要求出以这个字母开头的最长的 “龙”（每个单词都最多在 “龙” 中出现两次），在两个单词相连时，其重合部分合为一部分，例如 beast 和 astonish，如果接成一条龙则变为 beastonish，另外相邻的两部分不能存在包含关系，例如 at 和 atide 间不能相连。</strong></p><hr><h2 id="输入"><code>输入</code></h2><p><strong>输入的第一行为一个单独的整数 n 表示单词数，以下 n 行每行有一个单词，输入的最后一行为一个单个字符，表示 “龙” 开头的字母。你可以假定以此字母开头的 “龙” 一定存在。</strong></p><hr><h2 id="输出"><code>输出</code></h2><p><strong>只需输出以此字母开头的最长的 “龙” 的长度，输出占一行。</strong></p><hr><h2 id="样例输入"><code>样例输入</code></h2><p><strong>5<br>At<br>Touch<br>Cheat<br>Choose<br>Tact<br>A</strong></p><hr><h2 id="样例输出"><code>样例输出</code></h2><p><strong>23</strong></p><hr><h2 id="提示"><code>提示</code></h2><p><strong>条件：n≤20<br>样例解释：连成的 “龙” 为 atoucheatactactouchoose。</strong></p><hr><h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="https://www.luogu.com.cn/problem/P1019">P1019 NOIP2000 提高组 单词接龙</a></strong></p><hr><h2 id="完整代码如下">完整代码如下</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n, ans, vis[<span class="number">22</span>];</span><br><span class="line">string a[<span class="number">22</span>];</span><br><span class="line"><span class="comment">//第一个参数是上一个字符串</span></span><br><span class="line"><span class="comment">//第二个参数是拼接后的长度 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(string x, <span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//求最长长度</span></span><br><span class="line">    ans = <span class="built_in">max</span>(ans, s);</span><br><span class="line">    <span class="comment">//枚举每一个字符串 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">1</span>;<span class="comment">//重叠部分长度 </span></span><br><span class="line">        <span class="keyword">int</span> la = x.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span> lb = a[i].<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">while</span> (p &lt; <span class="built_in">min</span>(la, lb)) {</span><br><span class="line">            <span class="keyword">if</span> (x.<span class="built_in">substr</span>(la - p) == a[i].<span class="built_in">substr</span>(<span class="number">0</span>, p) &amp;&amp; vis[i] &lt; <span class="number">2</span>) {</span><br><span class="line">                vis[i]++;</span><br><span class="line">                <span class="built_in">dfs</span>(a[i], s + lb - p);</span><br><span class="line">                vis[i]--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            p++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//读入 </span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">char</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="comment">//枚举找到首字母为t的字符串 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (a[i][<span class="number">0</span>] == t) {</span><br><span class="line">            vis[i]++;<span class="comment">//vis数组解决搜两次的问题 </span></span><br><span class="line">            <span class="built_in">dfs</span>(a[i], a[i].<span class="built_in">length</span>());</span><br><span class="line">            vis[i]--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="思路详解"><code>思路详解</code></h2><h3 id="（1）这是什么类型的题？"><code>（1）这是什么类型的题？</code></h3><blockquote><p><strong>1）因为要判断 <code>String</code> 能否连接所以必然为一道<code>字符串</code>题</strong></p></blockquote><blockquote><p><strong>2）我们要将字符串连接起来，其中<code>最小的子问题</code>是两个字符串的连接问题，即最开始的情况下若有 n 个字符串，我们连接其中两个字符串，在确认第一个单词之后，剩下的一个单词的选择有 n 或 n-1 种情况（每个单词只能用两次）然后继续往下连接时还可能有 n 或 n-1 种情况，每一层连接都需要 for 循环所有的字符串，而且是不断往下进行的，所以也是一道深度搜索问题 <code>DFS问题</code></strong></p></blockquote><hr><h3 id="（2）代码实现"><code>（2）代码实现</code></h3><p>第一步：读入</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">char</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br></pre></td></tr></tbody></table></figure><p>第二步：找到第一个单词开始DFS</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">       <span class="keyword">if</span> (a[i][<span class="number">0</span>] == t) {</span><br><span class="line">           vis[i]++;<span class="comment">//vis数组解决搜两次的问题</span></span><br><span class="line">           <span class="comment">//第一个字母使用过一次 </span></span><br><span class="line">           <span class="built_in">dfs</span>(a[i], a[i].<span class="built_in">length</span>());</span><br><span class="line">           vis[i]--;</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>问题一：为何只传入字符串和其长度可以？<br>答：因为如果我们知道两个字符串可以拼接，且知道重合部分的大小，我们就知道拼接后的长度，然后我们拿当前搜索的字符串（末尾的字符串）继续和下一个字符串去判断能否合并即可，也就是意味着<code>我们并不需要把他们连起来就可以知道最终长度是多少</code></p></blockquote><blockquote><p>问题二：为何要 vis [i]–;<br>因为起始位点可能有多个，当我们从一个可行的起始位点往下搜索完毕后，还要可能存在另外一个可行的起始位点，当用另外一个位点时，之前的位点作为起始位点的 1 次 使用次数要消掉</p></blockquote><p>第三步：DFS部分</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(string x, <span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//求最长长度</span></span><br><span class="line">    ans = <span class="built_in">max</span>(ans, s);</span><br><span class="line">    <span class="comment">//枚举每一个字符串 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">1</span>;<span class="comment">//重叠部分长度 </span></span><br><span class="line">        <span class="keyword">int</span> la = x.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span> lb = a[i].<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">while</span> (p &lt; <span class="built_in">min</span>(la, lb)) {</span><br><span class="line">            <span class="keyword">if</span> (x.<span class="built_in">substr</span>(la - p) == a[i].<span class="built_in">substr</span>(<span class="number">0</span>, p) &amp;&amp; vis[i] &lt; <span class="number">2</span>) {</span><br><span class="line">                vis[i]++;</span><br><span class="line">                <span class="built_in">dfs</span>(a[i], s + lb - p);</span><br><span class="line">                vis[i]--;</span><br><span class="line">            }</span><br><span class="line">            p++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">ans = <span class="built_in">max</span>(ans, s);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在搜索🔍过程中 s 是不断变化的，我们用取大函数将 s 的最大值赋给一个全局变量 ans，ans 也是本题的最终答案</p></blockquote><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p = <span class="number">1</span>;<span class="comment">//重叠部分长度 </span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>我们想让字符串最长，所以最理想的情况下是重叠部分长度为 1，且每次字符串连接的尝试都要使 p 为 1 所以 p 定义在 for 循环内</p></blockquote><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (p &lt; <span class="built_in">min</span>(la, lb))</span><br></pre></td></tr></tbody></table></figure><blockquote><p>确保两个字符串没有包含关系</p></blockquote><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x.<span class="built_in">substr</span>(la - p) == a[i].<span class="built_in">substr</span>(<span class="number">0</span>, p) &amp;&amp; vis[i] &lt; <span class="number">2</span>) {</span><br><span class="line">               vis[i]++;</span><br><span class="line">               <span class="built_in">dfs</span>(a[i], s + lb - p);</span><br><span class="line">               vis[i]--;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           }</span><br><span class="line">           p++;</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>判断</strong>若重合长度为 p 时是否可以<strong>连接</strong><br>若<strong>能连接则马上连接</strong>（确保 p 最小）<br>然后<strong>更新</strong>使用<strong>次数</strong>再去连接下一个</p><p><code>用当前被连接的字符串 作为下一步要连接字符串的新的起始位点 并且更新长度 所以 dfs(a[i], s + lb - p);</code><br>若不能连接<br>则加大 p 的长度再次判断，直到跳出 while 循环</p></blockquote><hr><h3 id="关于该DFS的回溯详解（important）"><code>关于该DFS的回溯详解（important）</code></h3><p><strong><code>若没有return编译器自动补全</code></strong><br>当我们拼完了若干个字符串后不能够再继续拼接时<br>while 循环跳出，for 循环跳出，跑到了 return 的部分<br>return 回到上一层函数的内部的 dfs 函数结尾<br>紧接着执行 vis [i]–; 收回末端拼接的字符串然后跳出 while 不再 p++<br><strong>（若不加 break，会又进行一次连接（eg：pcc 和 ccq），虽然也可以连接但是并不是最长的，最终会被舍去，所以不如提前规避掉，提高程序运行效率）</strong><br>然后继续 for 循环看看能不能放入一个新的字符串到已经拼接过的字符串中去，若可以则生成新的字符串，若不行则结束 for 循环 return 到再上一层函数中去，然后重复相同的过程</p><h3 id="其实和全排列问题差不多，一个是放数字，一个是放字符串只是再放字符串的同时判断了前后两个字符串的连接性-都遍历了所有可能性，函数递归的步骤完全相同"><code>其实和全排列问题差不多，一个是放数字，一个是放字符串只是再放字符串的同时判断了前后两个字符串的连接性,都遍历了所有可能性，函数递归的步骤完全相同</code></h3><blockquote><p><strong>问题：为什么没有 if 递归终止条件？</strong></p></blockquote><p><strong><code>因为往下递到头后for循环结束后会遇到return进行归的过程 全排列问题里为了输出所以放置了 if 递归终止条件，然后再在if内return，但是该题不能用if，直接fou循环后加return即可，因为if的条件语句，我们无法找到 我们是遍历所有的可能性（if没必要） 不像全排列一样，在搜索到最底部时需要输出</code></strong></p><blockquote><p><strong>问题： if 递归终止条件的作用</strong></p></blockquote><p><strong><code>void的dfs函数无论有没有if,dfs函数终会回溯（void本不需要return） if 只是为了达到题目要求的功能而已 eg:输出数组</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 算法 </tag>
            
            <tag> 搜索🔍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Healthy Holsteins</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/Healthy%20Holsteins/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/Healthy%20Holsteins/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="https://www.luogu.com.cn/problem/P1460">Healthy Holsteins</a></strong></p><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 30</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> p, step;</span><br><span class="line"><span class="keyword">int</span> v[MAX], sum[MAX];</span><br><span class="line"><span class="keyword">int</span> s[MAX][MAX], book[MAX], FangAn[<span class="number">999999</span>][MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">record</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">step++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p+<span class="number">1</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (book[i] == <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">FangAn[step][i] = <span class="number">1</span>;</span><br><span class="line">FangAn[step][p + <span class="number">1</span>]+=i;</span><br><span class="line">FangAn[step][p + <span class="number">2</span>]++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> min = <span class="number">9999999</span>, f;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= step; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (min &gt; FangAn[i][p + <span class="number">2</span>])</span><br><span class="line">{</span><br><span class="line">min = FangAn[i][p + <span class="number">2</span>];</span><br><span class="line">f = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, FangAn[f][p + <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (FangAn[f][j] == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, j);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (i == p+<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (sum[j] &lt; v[j])</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">record();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//选</span></span><br><span class="line">book[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">sum[j] += s[i][j];</span><br><span class="line">dfs(i + <span class="number">1</span>);</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//不选</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">sum[j] -= s[i][j];</span><br><span class="line">dfs(i + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i]);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;s[i][j]);</span><br><span class="line">}</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="关键点"><code>关键点</code></h2><h3 id="我们从第一种饲料开始往下选，直到i-p-1"><code>我们从第一种饲料开始往下选，直到i=p+1</code></h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i == p+<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (sum[j] &lt; v[j])</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">record();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="每种饲料有两种状态、即选或者不选"><code>每种饲料有两种状态、即选或者不选</code></h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选</span></span><br><span class="line">book[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">sum[j] += s[i][j];</span><br><span class="line">dfs(i + <span class="number">1</span>);</span><br><span class="line">C</span><br><span class="line"><span class="comment">//不选</span></span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">sum[j] -= s[i][j];</span><br><span class="line">dfs(i + <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 算法 </tag>
            
            <tag> 搜索🔍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迷宫最短路径问题</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/M_%E8%BF%B7%E5%AE%AB%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/M_%E8%BF%B7%E5%AE%AB%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="迷宫最短路径问题">迷宫最短路径问题</h3><h2 id="完整代码如下：">完整代码如下：</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> x;<span class="comment">//横坐标</span></span><br><span class="line"><span class="keyword">int</span> y;<span class="comment">//纵坐标</span></span><br><span class="line"><span class="keyword">int</span> s;<span class="comment">//步数</span></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span> <span class="title">que</span>[2501];</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">51</span>][<span class="number">51</span>] = { <span class="number">0</span> }, book[<span class="number">51</span>][<span class="number">51</span>] = { <span class="number">0</span> };</span><br><span class="line"><span class="keyword">int</span> next[<span class="number">4</span>][<span class="number">2</span>] = { {<span class="number">0</span>,<span class="number">1</span>} ,{<span class="number">1</span>,<span class="number">0</span>} ,{<span class="number">0</span>,<span class="number">-1</span>}, {<span class="number">-1</span>,<span class="number">0</span>} };</span><br><span class="line"><span class="keyword">int</span> head, tail;<span class="comment">//引入队列</span></span><br><span class="line"><span class="keyword">int</span> i, j, k, m, n, startx, starty, p, q, tx, ty, flag;</span><br><span class="line"><span class="comment">//读入目标迷宫大小</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="comment">//读入迷宫</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line"><span class="comment">//读入起点和终点</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;startx, &amp;starty, &amp;p, &amp;q);</span><br><span class="line"><span class="comment">//队列初始化</span></span><br><span class="line">head = <span class="number">0</span>;</span><br><span class="line">tail = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//起点入队</span></span><br><span class="line">que[<span class="number">1</span>].x = startx;</span><br><span class="line">que[<span class="number">1</span>].y = starty;</span><br><span class="line">que[<span class="number">1</span>].s = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//标记起点</span></span><br><span class="line">book[startx][starty] = <span class="number">1</span>;</span><br><span class="line">flag = <span class="number">0</span>;<span class="comment">//标识符</span></span><br><span class="line"><span class="keyword">while</span> (head &lt; tail)</span><br><span class="line">{</span><br><span class="line">head++;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt;= <span class="number">3</span>; k++)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//父单元按规律向4个方向拓展</span></span><br><span class="line">tx = que[head].x + next[k][<span class="number">0</span>];</span><br><span class="line">ty = que[head].y + next[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (tx&lt;<span class="number">1</span> || tx&gt;n || ty&lt;<span class="number">1</span> || ty&gt;m)</span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">//越界则重新试探</span></span><br><span class="line"><span class="keyword">if</span> (a[tx][ty] == <span class="number">0</span> &amp;&amp; book[tx][ty] == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//拓展成功则标记拓展的点并将其入队，累加步数。</span></span><br><span class="line">tail++;</span><br><span class="line">book[tx][ty] = <span class="number">1</span>;</span><br><span class="line">que[tail].x = tx;</span><br><span class="line">que[tail].y = ty;</span><br><span class="line">que[tail].s = que[head].s + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//拓展到目标点时结束拓展调用标识符结束拓展</span></span><br><span class="line"><span class="keyword">if</span> (tx == p &amp;&amp; ty == q)</span><br><span class="line">{</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//若成功标记则结束while循环</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, que[tail].s);</span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="思路详解">思路详解</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一步：定义note结构体</span><br></pre></td></tr></tbody></table></figure><blockquote><p>我们要记录最路径，路径大小和经过的点数有关<br>顾名思义我们需要在点上做文章<br>一个点拥有（x，y）坐标<br>我们定义一个含距离的关于点的结构体<br>如下：</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> x;<span class="comment">//横坐标</span></span><br><span class="line"><span class="keyword">int</span> y;<span class="comment">//纵坐标</span></span><br><span class="line"><span class="keyword">int</span> s;<span class="comment">//步数</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><blockquote><p>点的个数和迷宫大小有关<br>这里我们取最大值如下：</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span> <span class="title">que</span>[2501];</span></span><br></pre></td></tr></tbody></table></figure><hr><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第二步：引入队列的思维</span><br></pre></td></tr></tbody></table></figure><blockquote><p>BFS 搜索🔍是由父层向下遍历探索所有可能的子结构<br>探索成功后之前的子层成为了新的父层继续上述操作<br>不由可以联想到<br>父到子 &gt;&gt; head 向下试探，成功则 tail++<br>子成父 &gt;&gt; head++<br>如下：</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (head &lt; tail)</span><br><span class="line">{</span><br><span class="line">head++；<span class="comment">//将1单元成为父单元</span></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt;= <span class="number">3</span>; k++)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//父单元按规律向4个方向拓展</span></span><br><span class="line">tx = que[head].x + next[k][<span class="number">0</span>];</span><br><span class="line">ty = que[head].y + next[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (tx&lt;<span class="number">1</span> || tx&gt;n || ty&lt;<span class="number">1</span> || ty&gt;m)</span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">//越界则重新试探</span></span><br><span class="line"><span class="keyword">if</span> (a[tx][ty] == <span class="number">0</span> &amp;&amp; book[tx][ty] == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//拓展成功则标记拓展的点并将其入队，累加步数。</span></span><br><span class="line">tail++;<span class="comment">//扩充队列,将新的点入队</span></span><br><span class="line">book[tx][ty] = <span class="number">1</span>;</span><br><span class="line">que[tail].x = tx;</span><br><span class="line">que[tail].y = ty;</span><br><span class="line">que[tail].s = que[head].s + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//拓展到目标点时结束拓展调用标识符结束拓展</span></span><br><span class="line"><span class="keyword">if</span> (tx == p &amp;&amp; ty == q)</span><br><span class="line">{</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//若成功标记则结束while循环</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第三步：最小路径</span><br></pre></td></tr></tbody></table></figure><blockquote><p>问题 1：为什么拓展到终点时必为最短路径？<br>解答：因为每一层拓展均为步数加 1，所以拓展的过程中步数是一样累加的<br>并没有多走的情况，同步出发，并且只要到终点后 while 循环便会停止，所得 &gt; 一定为最短路径</p></blockquote><blockquote><p>问题 2：输出最短路径时为什么要用 <strong>que[tail].s</strong> ?<br>解答：我们刚开始定义 tail 为 1，tail 表示队尾位置，成功拓展至终点后 ， <strong>终点即为队尾位置</strong>即 que [tail].s;</p></blockquote><hr><h2 id="summary："><code>summary：</code></h2><p>（1）本题和 <a href="https://blog.csdn.net/Arthur_1122/article/details/116764674">BFS - 马的遍历</a>异同之处？</p><blockquote><p>本题：将距离 s 定义在结构体之内，使得每一个节点均含有到此的最小步数<br>other：马的遍历是将距离放在一个二维数组里面，二维数组的下标为位置坐标，我们需要关注的是起点位置为队列的首位，符合以下对应关系：<br>坐标：(sx,sy)&gt;&gt;(qun [1].x,qun [1].y) 即队列第一单元<br>步数：a [sx][sy]=0&gt;&gt;a [qun [1].x][qun [1].y]=0 即队列第一单元对应 0 步</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 搜索🔍 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马的遍历</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/M_%E9%A9%AC%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/M_%E9%A9%AC%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1>马的遍历</h1><h2 id="题目描述"><code>题目描述</code></h2><p><strong>有一个 n*m 的棋盘 (1&lt;n,m&lt;=400)，在某个点上有一个马，要求你计算出马到达棋盘上任意一个点最少要走几步</strong></p><hr><h2 id="输入格式"><code>输入格式</code></h2><p><strong>一行四个数据，棋盘的大小和马的坐标</strong></p><hr><h2 id="输出格式"><code>输出格式</code></h2><p><strong>一个 n*m 的矩阵，代表马到达某个点最少要走几步（左对齐，宽 5 格，不能到达则输出 - 1）</strong></p><hr><h2 id="输入样例"><code>输入样例</code></h2><p><strong>3 3 1 1</strong></p><hr><h2 id="输出样例"><code>输出样例</code></h2><p><strong>0 3 2<br>3 -1 1<br>2 1 4</strong></p><hr><h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="https://www.luogu.com.cn/problem/P1443">P1443 马的遍历</a></strong></p><hr><h2 id="完整代码如下">完整代码如下</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 170000</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> x;<span class="comment">//行坐标</span></span><br><span class="line"><span class="keyword">int</span> y;<span class="comment">//列坐标</span></span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span> <span class="title">que</span>[<span class="title">MAX</span>];</span><span class="comment">//最多160000个点这里令MAX=170000</span></span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">1</span>;<span class="comment">//队列引入</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">401</span>][<span class="number">401</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, sx, sy;</span><br><span class="line"><span class="comment">//定义8组方向，这里的t是try的缩写，表示去试探的方向</span></span><br><span class="line"><span class="keyword">int</span> tx[<span class="number">16</span>] = { <span class="number">2</span>,<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span> };</span><br><span class="line"><span class="keyword">int</span> ty[<span class="number">16</span>] = { <span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">-2</span> };</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">a[i][j] = <span class="number">-1</span>;</span><br><span class="line">a[sx][sy] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;sx, &amp;sy);</span><br><span class="line">init();<span class="comment">//初始化</span></span><br><span class="line"><span class="comment">//队列初始化</span></span><br><span class="line">que[<span class="number">1</span>].x = sx;</span><br><span class="line">que[<span class="number">1</span>].y = sy;</span><br><span class="line"><span class="keyword">while</span> (head &lt; tail)</span><br><span class="line">{</span><br><span class="line">head++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> nx = que[head].x + tx[i];</span><br><span class="line"><span class="keyword">int</span> ny = que[head].y + ty[i];</span><br><span class="line"><span class="keyword">if</span> (nx &gt;= <span class="number">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class="number">1</span> &amp;&amp; ny &lt;= m &amp;&amp; a[nx][ny] == <span class="number">-1</span>)</span><br><span class="line">{</span><br><span class="line">tail++;</span><br><span class="line">que[tail].x = nx;</span><br><span class="line">que[tail].y = ny;</span><br><span class="line">a[nx][ny] = a[que[head].x][que[head].y] + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%-5d"</span>, a[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="思路详解"><code>思路详解</code></h2><h3 id="这是什么类型的题？"><code>这是什么类型的题？</code></h3><blockquote><p><strong>我们要得到的是马到达每一个点的<code>最小步数</code>，而 <code>BFS恰好是按照最小步数一层层往下拓展的</code><br>在其拓展的同时我们可以<code>自然地得到</code>到达每一个点的最小步数，所以我们可以用 <code>BFS</code> 来解决这道题</strong></p></blockquote><hr><h3 id="代码实现"><code>代码实现</code></h3><p><strong><code>第一步：读入并初始化</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;sx, &amp;sy);<span class="comment">//start-x,start-y起点的行坐标和列坐标</span></span><br><span class="line">init();<span class="comment">//初始化</span></span><br></pre></td></tr></tbody></table></figure><p>initialize - 初始化函数如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">a[i][j] = <span class="number">-1</span>;</span><br><span class="line">a[sx][sy] = <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>问题：<strong>为什么要先全令成 - 1 而不是 0？</strong><br>答：因为<strong>为 0 时表示起点到起点需要 0 步</strong>，<strong>而不能到达的点需要用 -1 来表示</strong><br><strong><code>我们在-1的蓝图上再进行a[sx][sy] = 0 和 BFS 拓展操作 这样再输出时没有被再次赋值的点就是不能到达的点,既符合题目要求，又方便</code></strong></p></blockquote><hr><p><strong><code>第二步：引入队列</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">1</span>;<span class="comment">//队列引入</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//队列初始化</span></span><br><span class="line">que[<span class="number">1</span>].x = sx;</span><br><span class="line">que[<span class="number">1</span>].y = sy;</span><br></pre></td></tr></tbody></table></figure><hr><p><strong><code>第三步：BFS的拓展部分（核心代码）</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (head &lt; tail)</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>头和尾之间差的是<code>一层的拓展</code>，一个 head 可以拓展出多个 tail。<br>只有不能再拓展了（<code>tail不再++</code>），head 到达 tail 的位置时<code>结束循环</code></strong></p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head++;</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>头指针 head 去<code>赶</code>尾指针 tail 向前走（往下拓展）</strong></p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> nx = que[head].x + tx[i];</span><br><span class="line"><span class="keyword">int</span> ny = que[head].y + ty[i];</span><br><span class="line"><span class="keyword">if</span> (nx &gt;= <span class="number">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class="number">1</span> &amp;&amp; ny &lt;= m &amp;&amp; a[nx][ny] == <span class="number">-1</span>)</span><br><span class="line">{</span><br><span class="line">tail++;</span><br><span class="line">que[tail].x = nx;</span><br><span class="line">que[tail].y = ny;</span><br><span class="line">a[nx][ny] = a[que[head].x][que[head].y] + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>向八个方向试探，当不越界且未走过时（保证距离最短避免重复走）向下拓展</strong><br><strong>tail++ 拓宽队列，将新的点入队，记录步数。</strong></p></blockquote><blockquote><p><strong>问题：为什么是 <code>a[nx][ny] = a[que[head].x][que[head].y] + 1;</code>？</strong><br><strong>答：因为 BFS <code>每一次向下试探拓展</code>，其跨度的大小均为 <code>1</code>（步数）</strong><br><strong>每一次拓展成功意味着 <code>head</code> 位置的点向 <code>tail</code> 位置的点跨出一步</strong><br><strong>我们只需要将<code>原来走的步数</code>即（a [que [head].x][que [head].y]）<code>加1即可</code></strong><br><strong>第一次进入 while 循环时，我们先 head++，此时 head 为 1，头指针指向起始位置 <code>head位置的点是起始点</code>，起始点的步数为 0 已经<code>初始化</code>过了</strong>其向下走一步<code>恰好为0+1=1</code>，</p></blockquote><hr><p><strong><code>第四步：输出</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%-5d"</span>, a[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="相似题目"><strong><code>相似题目</code></strong></h3><p><a href="https://blog.csdn.net/Arthur_1122/article/details/116432278">BFS - 迷宫最短路径问题</a></p><h2 id="summary"><code>summary</code></h2><blockquote><p><strong>其实本题也蕴含 DP 问题的思想我们用刚开始走 1 步的点的步数去更新 2 步的点的步数</strong><br><strong>用前面的数据去更新后面的数据，本身步数的累加便是一个 + 1+1 的更新过程，也蕴含累加的思想</strong></p></blockquote><h1><code>end</code></h1>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 搜索🔍 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全排列</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/Q_%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/Q_%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="全排列问题">全排列问题</h3><p><strong>完整代码：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>], book[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (step == n + <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line"><span class="keyword">if</span> (book[i] == <span class="number">0</span>) {</span><br><span class="line">a[step] = i;</span><br><span class="line">book[i] = <span class="number">1</span>;</span><br><span class="line">dfs(step + <span class="number">1</span>);</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>核心代码（DFS 部分）：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(step==n+<span class="number">1</span>){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++){</span><br><span class="line"><span class="keyword">if</span>(book[i]==<span class="number">0</span>){</span><br><span class="line">a[step]=i;</span><br><span class="line">book[i]=<span class="number">1</span>;</span><br><span class="line">dfs(step+<span class="number">1</span>);</span><br><span class="line">book[i]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>让我们来深究 DFS 内的具体过程</p></blockquote><ul><li><code>函数层数和每层函数保留的 i 相等</code></li><li><code>每一层函数往数组中放入的数即为 i</code></li><li><code>i 的大小也决定了是否能够继续for循环继续放数</code></li><li><code>return 的过程中必然将上层函数中放入的数收回</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 算法 </tag>
            
            <tag> 搜索🔍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/L_%E9%93%BE%E8%A1%A8/L_%E9%93%BE%E8%A1%A8/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/L_%E9%93%BE%E8%A1%A8/L_%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="链表结点">链表结点</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">note</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> date;<span class="comment">//数据区域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span>* <span class="title">next</span>;</span><span class="comment">//指向结点的指针</span></span><br><span class="line">}Note,*link;</span><br><span class="line"><span class="comment">//typedef相当于再命名</span></span><br><span class="line"><span class="comment">//struct note——Note//结点</span></span><br><span class="line"><span class="comment">//struct note*——link//指向结点的指针</span></span><br></pre></td></tr></tbody></table></figure><h2 id="构建链表">构建链表</h2><h3 id="尾插法（尾指针移动）">尾插法（尾指针移动）</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">link <span class="title">link_t</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">link h, t, p;<span class="comment">//头指针，尾指针，中间指针</span></span><br><span class="line">h = t = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));<span class="comment">//malloc第一个结点</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line">p = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));<span class="comment">//malloc新结点</span></span><br><span class="line">p-&gt;date = i;<span class="comment">//结点数据区域赋值</span></span><br><span class="line">t-&gt;next = p;<span class="comment">//将新结点和上一结点连接</span></span><br><span class="line">t = p;<span class="comment">//新结点成为尾部，t指向新结点</span></span><br><span class="line">}</span><br><span class="line">t-&gt;next = <span class="literal">NULL</span>;<span class="comment">//最后一个结点的指针域为空</span></span><br><span class="line"><span class="keyword">return</span> h;<span class="comment">//返回头指针</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong><code>尾插法</code>蕴含手动实现<code>队列</code>的思想</strong><br><strong><code>尾插法</code>就是先构建<code>头部节点</code>，然后构建<code>身体结点</code>，不断<code>延长</code>身体节点的过程。</strong></p><h3 id="头插法（头指针移动）">头插法（头指针移动）</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">link <span class="title">link_h</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">link h,p;</span><br><span class="line">h = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));<span class="comment">//malloc第一个结点</span></span><br><span class="line">h-&gt;next = <span class="literal">NULL</span>;<span class="comment">//将第一个节点指针域初始化为空</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line">p = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));<span class="comment">//malloc新结点</span></span><br><span class="line">p-&gt;date = i;<span class="comment">//结点数据区域赋值</span></span><br><span class="line">p-&gt;next = h-&gt;next;<span class="comment">//使该层新节点指向上层结点</span></span><br><span class="line">h-&gt;next = p;<span class="comment">//h-&gt;next始终指向每一层的新结点</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> h;<span class="comment">//返回头指针</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong><code>头插法</code>只需要<code>两个</code>指针变量，因为不需要<code>记录</code>头指针，头指针<code>本身</code>就用来<code>拓展</code>链表</strong></p><h3 id="头插法和尾插法的对比">头插法和尾插法的对比</h3><p><strong>①头插法构建的链表遍历时<code>正序</code>，而尾插法<code>逆序</code></strong><br><strong>②尾插法比头插法<code>节约</code>一个<code>指针</code>变量</strong></p><hr><h2 id="单链表逆置">单链表逆置</h2><h3 id="理论">理论</h3><p><strong>根据<code>头插法</code>和<code>尾插法</code>一个<code>正序</code>一个<code>逆序</code>的特点，用头插法<code>重构</code>尾插法构建好的链表</strong></p><h3 id="代码实现">代码实现</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">note</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> date;<span class="comment">//数据区域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span>* <span class="title">next</span>;</span><span class="comment">//指向结点的指针</span></span><br><span class="line">}Note,*link;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;<span class="comment">//节点个数</span></span><br><span class="line"><span class="function">link <span class="title">link_t</span><span class="params">()</span></span>;<span class="comment">//尾插法生成一个单链表</span></span><br><span class="line"><span class="function">link <span class="title">link_h</span><span class="params">()</span></span>;<span class="comment">//头插法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(link x)</span></span>;<span class="comment">//单链表输出函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(link x, <span class="keyword">int</span> m)</span></span>;<span class="comment">//根据头指针返回第m个结点的数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">print(<span class="keyword">link_t</span>());<span class="comment">//生成一个单链表，并输出</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">print(link_h());<span class="comment">//逆置单链表，并输出</span></span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function">link <span class="title">link_t</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">link h, t, p;</span><br><span class="line">h = t = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line">p = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));</span><br><span class="line">p-&gt;date = i;</span><br><span class="line">t-&gt;next = p;</span><br><span class="line">t = p;</span><br><span class="line">}</span><br><span class="line">t-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">}</span><br><span class="line"><span class="function">link <span class="title">link_h</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">link h,p;</span><br><span class="line">h = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));</span><br><span class="line">h-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line">p = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));</span><br><span class="line">p-&gt;date = Find(<span class="keyword">link_t</span>(), i);</span><br><span class="line">p-&gt;next = h-&gt;next;</span><br><span class="line">h-&gt;next = p;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(link x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">link p = x-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;date);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(link x, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">link p = x-&gt;next;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">return</span> p-&gt;date;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="要点">要点</h3><p><strong>单链表<code>输出时</code>若用 <code>p-&gt;next</code> 作为<code>循环条件</code>会导致<code>遗漏</code>最后一个<code>结点</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选数</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/X_%E9%80%89%E6%95%B0/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/S_%E6%90%9C%E7%B4%A2%F0%9F%94%8D/X_%E9%80%89%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>题目：选数</strong></p><p><strong>问题来源：</strong>[P1036 <a href="https://www.luogu.com.cn/record/52360392">NOIP2002 普及组] 选数</a></p><h2 id="完整代码：">完整代码：</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span>* p, ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> isPrime = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">sqrt</span>(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= k; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (m % i == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">isPrime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (isPrime == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">//从x单元开始的选数</span></span><br><span class="line"><span class="comment">//已选m个数</span></span><br><span class="line"><span class="comment">//m个数的和为sum</span></span><br><span class="line"><span class="comment">//需要得到k个数,一共n个数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> m,<span class="keyword">int</span> sum,<span class="keyword">int</span> k,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (m == k)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (isPrime(sum))</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; n; i++)</span><br><span class="line">dfs(i+<span class="number">1</span>,m + <span class="number">1</span>, sum + *(p + i), k, n);<span class="comment">//i+1而非x+1</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n,&amp;k);</span><br><span class="line">p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, p + i);</span><br><span class="line">dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,k,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="代码解析：">代码解析：</h2><p><strong>用 DFS 进行高级的枚举操作时，显然当枚举了 K 个数时，我们需要判断 K 个数的和是否为素数，其代码如下:</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (m == k)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (isPrime(sum))</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>枚举时我们用一个 for 循环来选选取当下 DFS 函数需要选入的数<br>代码如下：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; n; i++)</span><br><span class="line">dfs(i+<span class="number">1</span>,m + <span class="number">1</span>, sum + *(p + i), k, n);<span class="comment">//i+1而非x+1</span></span><br></pre></td></tr></tbody></table></figure><p><strong>问：为何需要一个选数的起始位点这个参数，即 x？</strong></p><p><strong>答：每一层 DFS 函数选取一个数，选取哪一个数是由 for 循环里面的 i 决定的<br>假如是 5 个数里面选 3 个数，我们希望的是选第一个数然后再选两个，完成之后，判断其和是否为素数，再把最后一个数换成其下一位的数。<br>eg： 1 2 3 4 5<br>第一次选：<br>1 2 3<br>然后：<br>1 2 4<br>再然后：<br>1 2 5<br>我们选数的基准点是第一个数，每次扩选实际上都是选的 i+1 的那个数，起始位点不变，一直变的是相对位点，所以是 i+1 这个相对位点，而非 x+1，如下：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; n; i++)</span><br><span class="line">dfs(i+<span class="number">1</span>,m + <span class="number">1</span>, sum + *(p + i), k, n);<span class="comment">//i+1而非x+1</span></span><br></pre></td></tr></tbody></table></figure><p><strong>END</strong></p>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 算法 </tag>
            
            <tag> 搜索🔍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼树（编码）</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%A0%91%E3%80%81%E5%9B%BE/H_%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%A0%91%E3%80%81%E5%9B%BE/H_%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><code>介绍</code></h2><p><strong>哈夫曼树 (Huffman Tree)</strong></p><blockquote><p>背景：著名的 哈夫曼编码 发明人 戴维・霍夫曼于 1999 年 10 月 17 日因癌症去世，享年 74 岁，他发明了著名的的 霍夫曼编码，除了霍夫曼编码以外，他还涉及出二叉最优搜索树的算法，因为其效率最高，所以被命名为霍夫曼算法，是动态规划的一个范例</p></blockquote><p><strong>通过哈夫曼树，我们往往可以得到问题的最优解</strong><br><strong>所以<code>哈夫曼树</code>也叫做<code>最优二叉树</code></strong><br><strong><code>最优二叉树</code>是在<code>叶子结点和权重</code>确定的情况下，带权路径长度（WPL）<code>最小</code>的二叉树</strong></p><hr><h2 id="什么是带权路径长度（WPL）"><code>什么是带权路径长度（WPL）</code></h2><p><img src="https://pic.imgdb.cn/item/612f23c244eaada739845c27.jpg" alt="计算WPL"><br><strong>我们要做的就是找到 WPL 最小的二叉树</strong></p><hr><h2 id="构建最优二叉树"><code>构建最优二叉树</code></h2><blockquote><p><strong>不难发现要使得 WPL 最小，那么深度越大的叶子结点权值就越小，深度小的叶子结点权值就越大，我们从下往上，深度减小的方向构建二叉树。</strong></p></blockquote><p><strong>具体步骤：</strong></p><p><strong>一、从小到大进行排序，将每一个数据，每个数据都是一个节点 ， 每个节点可以看成是一颗最简单的二叉树</strong></p><p><strong>二、取出根节点权值最小的两颗二叉树</strong></p><p><strong>三、组成一颗新的二叉树，该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和</strong></p><p><strong>四、再将这颗新的二叉树， 不断重复 1-2-3 的步骤，直到数列中，所有的数据都被处理，就得到一颗赫夫曼树</strong></p><hr><h2 id="代码实现"><code>代码实现</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HTNote</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> date;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">int</span>  p, l, r;</span><br><span class="line">}HT,*Link;</span><br><span class="line"><span class="keyword">int</span> n; Link p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>;<span class="comment">//输入数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span> n)</span></span>;<span class="comment">//寻找最小值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createHT</span><span class="params">()</span></span>;<span class="comment">//创建哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">codeHT</span><span class="params">()</span></span>;<span class="comment">//哈夫曼编码</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">createHT</span>();</span><br><span class="line"><span class="built_in">codeHT</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"请输入权值个数："</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">p = <span class="keyword">new</span> HT[<span class="number">2</span> * n];</span><br><span class="line">cout &lt;&lt; <span class="string">"请输入权值："</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">cin &gt;&gt; temp;</span><br><span class="line">*(p + i) = { temp,<span class="literal">false</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> };</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> min = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (min &gt; (p + i)-&gt;date &amp;&amp; (p + i)-&gt;flag == <span class="literal">false</span>)</span><br><span class="line">{</span><br><span class="line">min = (p + i)-&gt;date;</span><br><span class="line">k = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">(p + k)-&gt;flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createHT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> t = <span class="built_in">findMin</span>(n);</span><br><span class="line">(p + t)-&gt;flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> tt = <span class="built_in">findMin</span>(n + j - <span class="number">1</span>);</span><br><span class="line">*(p + n + j) = { (p + t)-&gt;date + (p + tt)-&gt;date ,<span class="literal">true</span> ,<span class="number">0</span>,t,tt };</span><br><span class="line">(p + t)-&gt;p = (p + tt)-&gt;p = n + j;</span><br><span class="line">t = n + j;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">codeHT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> t = i;</span><br><span class="line">cout &lt;&lt; (p + t)-&gt;date &lt;&lt; <span class="string">"--&gt;"</span>;</span><br><span class="line">stack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">while</span> ((p + t)-&gt;p != <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> ((p + (p + t)-&gt;p)-&gt;l == t)</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> ((p + (p + t)-&gt;p)-&gt;r == t)</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">t = (p + t)-&gt;p;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (s.<span class="built_in">size</span>() != <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; s.<span class="built_in">top</span>();</span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="适用情况"><code>适用情况</code></h2><p><strong>一、根节点的值等于叶子节点</strong><br><strong>二、出现最小，最优的字眼时</strong><br><strong>三、与求最小 WPL 等价时</strong></p>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树 </tag>
            
            <tag> HT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%A0%91%E3%80%81%E5%9B%BE/S_%E6%A0%91/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E6%A0%91%E3%80%81%E5%9B%BE/S_%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树的存储方式"><code>二叉树的存储方式</code></h2><h3 id="数组存储"><code>数组存储</code></h3><p><strong><code>完全</code>二叉树</strong><br><strong>一、由<code>根节点</code>从 <code>1</code> 开始编号（<code>从上到下、从左到右</code>）</strong><br><strong>二、完全二叉树因为在编号时是<code>连续的</code>，所以可以用<code>数组</code>来表示</strong><br><img src="https://pic.imgdb.cn/item/610e34165132923bf82eadb3.jpg" alt="截图"><br><strong><code>一般</code>二叉树</strong><br><strong>一、将一般二叉树<code>补全</code>为完全二叉树，<code>不存在</code>的结点可以用<code>标记数组</code>进行<code>标记</code>！</strong><br><strong>二、会导致<code>空间浪费</code> !</strong><br><img src="https://pic.imgdb.cn/item/610e36895132923bf837076b.jpg" alt="截图"></p><hr><h3 id="链表存储"><code>链表存储</code></h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">note</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> date;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span>* <span class="title">lchild</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span>* <span class="title">rchild</span>;</span></span><br><span class="line">}Note;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/610e38c65132923bf83f2ac5.jpg" alt="截图"></p><hr><h2 id="构建二叉树"><code>构建二叉树</code></h2><h3 id="前序构建"><code>前序构建</code></h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">### `中序构建`</span><br><span class="line"></span><br><span class="line">### `后序构建`</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">## `二叉树的遍历`</span><br><span class="line"></span><br><span class="line">```C</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNote</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">char</span> date;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTNote</span>* <span class="title">lchild</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTNote</span>* <span class="title">rchild</span>;</span></span><br><span class="line">}Note,* link;</span><br><span class="line"> <span class="function">link <span class="title">CreateBT</span><span class="params">()</span><span class="comment">//创建树</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"> link PA = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));</span><br><span class="line"> link PB = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));</span><br><span class="line"> link PC = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));</span><br><span class="line"> link PD = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));</span><br><span class="line"> link PE = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));</span><br><span class="line"> link PF = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Note));</span><br><span class="line"> PA-&gt;date = <span class="string">'A'</span>;</span><br><span class="line"> PB-&gt;date = <span class="string">'B'</span>;</span><br><span class="line"> PC-&gt;date = <span class="string">'C'</span>;</span><br><span class="line"> PD-&gt;date = <span class="string">'D'</span>;</span><br><span class="line"> PE-&gt;date = <span class="string">'E'</span>;</span><br><span class="line"> PF-&gt;date = <span class="string">'F'</span>;</span><br><span class="line"> PA-&gt;lchild = PB;</span><br><span class="line"> PA-&gt;rchild = PC;</span><br><span class="line"> PB-&gt;lchild = PD;</span><br><span class="line"> PB-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"> PD-&gt;lchild = PD-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"> PC-&gt;lchild = PE;</span><br><span class="line"> PC-&gt;rchild = PF;</span><br><span class="line"> PE-&gt;lchild = PE-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"> PF-&gt;lchild = PF-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"> <span class="keyword">return</span> PA;</span><br><span class="line">}</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Pre_ergodic</span><span class="params">(link p)</span></span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line"> <span class="keyword">if</span> (<span class="literal">NULL</span> != p)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%c "</span>, p-&gt;date);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> Pre_ergodic(p-&gt;lchild);</span><br><span class="line"> Pre_ergodic(p-&gt;rchild);</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> }</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">In_ergodic</span><span class="params">(link p)</span></span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line"> <span class="keyword">if</span> (<span class="literal">NULL</span> != p)</span><br><span class="line"> {</span><br><span class="line"> In_ergodic(p-&gt;lchild);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%c "</span>, p-&gt;date);</span><br><span class="line"> In_ergodic(p-&gt;rchild);</span><br><span class="line"> }</span><br><span class="line"> }</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Post_ergodic</span><span class="params">(link p)</span></span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line"> <span class="keyword">if</span> (<span class="literal">NULL</span> != p)</span><br><span class="line"> {</span><br><span class="line"> Post_ergodic(p-&gt;lchild);</span><br><span class="line"> Post_ergodic(p-&gt;rchild);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%c "</span>, p-&gt;date);</span><br><span class="line"> }</span><br><span class="line"> }</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">link p = CreateBT();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"先序遍历："</span>);</span><br><span class="line">Pre_ergodic(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"中序遍历："</span>);</span><br><span class="line">In_ergodic(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"后序遍历："</span>);</span><br><span class="line">Post_ergodic(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/B_%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/B_%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1><code>并查集</code></h1><h2 id="基础写法">基础写法</h2><p><strong>策略：一个联通分度内全部节点的值统一</strong>、<br><strong>方法：结点序号 —— 数组下标，结点的母结点 —— 数组值</strong></p><hr><p><strong><code>inti函数</code></strong><br><strong>刚开始时，所有节点彼此独立的</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">id[i] = i;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong><code>Find函数</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> id[x] == id[y];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong><code>Union函数</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> pid = id[p];</span><br><span class="line"><span class="keyword">int</span> qid = id[q];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (id[i] == pid)<span class="comment">//p所在连通分度内所有节点全部连接到q结点所在联通分度</span></span><br><span class="line">id[i] = qid;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>可以发现的是，该写法最终使每一个联通分量的每一个结点的值<code>统一</code>，每一个联通分度拥有<code>唯一</code>的值，若对于一个<code>很大的联通分量</code>连接到一个<code>小的连通分量上</code>时，要改变该连通分量上<code>有</code>节点的值，是十分<code>耗费时间</code>的！</strong><br><strong>以下是优化写法</strong></p><hr><h2 id="优化写法（1）">优化写法（1）</h2><p><strong>策略：使用算法中的<code>懒策略</code> , 我们尽量<code>避免计算</code>，直到<code>不得不</code>进行计算</strong><br><strong>方法：数组的每一项<code>只包含它的父节点的下标值</code>，两个结点 Union 时我们<code>连接他们的根结点</code>即可</strong></p><hr><p><strong><code>inti函数</code></strong><br><strong>刚开始时，所有节点彼此独立的</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">id[i] = i;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong><code>寻找根节点root函数</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span> (i != id[i])</span><br><span class="line">i = id[i];</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong><code>Find函数</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> root[x]==root[y];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong><code>Union函数</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> rp = root(p);</span><br><span class="line"><span class="keyword">int</span> rq = root(q);</span><br><span class="line">id[rp]=rq;<span class="comment">//连接根结点即可</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>总结：虽然没有了 For 循环会比基础写法要快一点，但是在某些情况下还是非常慢，例如若我们在 Find 时要回溯一颗非常瘦长的数，我们也需要耗费大量时间</strong></p><p><strong>以下是更优写法</strong></p><hr><h2 id="优化写法（2）">优化写法（2）</h2><p><strong>策略：在写法（1）的基础上，我们在 <code>Union</code> 时考虑<code>带权</code>算法</strong><br><strong>方法：在 Union 时我们将<code>权重小</code>的作为<code>子叶</code>连接到权重大的上面</strong></p><hr><p><strong><code>inti函数</code></strong><br><strong>刚开始时，所有节点彼此独立的</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line">id[i] = i;</span><br><span class="line">size[i]=<span class="number">1</span>;<span class="comment">//size[]数组全部初始化为1</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong><code>寻找根节点root函数</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span> (i != id[i])</span><br><span class="line">i = id[i];</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong><code>Find函数</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> root[x]==root[y];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong><code>Union函数</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> rp = root(p);</span><br><span class="line"><span class="keyword">int</span> rq = root(q);</span><br><span class="line"><span class="keyword">if</span>(rp==rq)<span class="keyword">return</span>;<span class="comment">//本连接就直接退出</span></span><br><span class="line"><span class="keyword">if</span> (size[rp] &lt; size(rq))</span><br><span class="line">{</span><br><span class="line">size[rq] += size[rp];<span class="comment">//权更新</span></span><br><span class="line">id[rp] = rq;<span class="comment">//小的连大的</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">size[rp] += size[rq];</span><br><span class="line">id[rq] = rp;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>总结：上述算法已经十分高效了，接下来我们考虑一种更厉害的优化方案</strong></p><hr><h2 id="优化写法（3）">优化写法（3）</h2><p><strong>策略：<code>路径压缩</code></strong><br><strong>方案：将一颗<code>树压平</code>，除了 root 结点外的其它结点全部连接到 root 节点上</strong></p><hr><p><strong><code>inti函数</code></strong><br><strong>刚开始时，所有节点彼此独立的</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line">id[i] = i;</span><br><span class="line">size[i]=<span class="number">1</span>;<span class="comment">//size[]数组全部初始化为1</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong><code>寻找根节点root函数</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span> (i != id[i])</span><br><span class="line">{</span><br><span class="line">id[i]=id[id[id]];<span class="comment">//压缩路径</span></span><br><span class="line">i = id[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong><code>Find函数</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> root[x]==root[y];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong><code>Union函数</code></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> rp = root(p);</span><br><span class="line"><span class="keyword">int</span> rq = root(q);</span><br><span class="line"><span class="keyword">if</span>(rp==rq)<span class="keyword">return</span>;<span class="comment">//本连接就直接退出</span></span><br><span class="line"><span class="keyword">if</span> (size[rp] &lt; size(rq))</span><br><span class="line">{</span><br><span class="line">size[rq] += size[rp];<span class="comment">//权更新</span></span><br><span class="line">id[rp] = rq;<span class="comment">//小的连大的</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">size[rp] += size[rq];</span><br><span class="line">id[rq] = rp;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="实际运用——渗滤"><code>实际运用——渗滤</code></h2><h3 id="题目"><code>题目</code></h3><p><strong>对一个<code>渗滤图</code>判断是否能进行渗滤 —— 从上到下是否<code>连通</code></strong></p><hr><h3 id="例图"><code>例图</code></h3><p><img src="https://pic.imgdb.cn/item/60f565585132923bf87f67f0.jpg" alt="边长为5的渗滤图"><br><strong>由右图可知，显然<code>上下并不连通</code>！！！</strong></p><hr><h3 id="代码实现-VS2019"><code>代码实现(VS2019)</code></h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span>* id, * open;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Egscanf</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"样例:\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"5\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"11010\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"00010\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"01011\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"10100\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"11011\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"******\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1为open、0为close\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="comment">//结点初始化</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * n; i++)</span><br><span class="line">{</span><br><span class="line">*(id + i) = i;</span><br><span class="line">*(open + i) = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span> (x != id[x])</span><br><span class="line">{</span><br><span class="line">id[x] = id[id[x]];<span class="comment">//压缩树</span></span><br><span class="line">x = id[x];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> root(x) == root(y);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> sx = x - n;</span><br><span class="line"><span class="keyword">int</span> xx = x + n;</span><br><span class="line"><span class="keyword">int</span> zx = x - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> yx = x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x&gt;n&amp;&amp; *(open + sx) == <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> rx = root(x);</span><br><span class="line"><span class="keyword">int</span> rsx = root(sx);</span><br><span class="line"><span class="keyword">if</span>(!Find(x,sx))</span><br><span class="line">id[rx] = sx;<span class="comment">//连接根节点即可</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (x&lt;=(n*n-n)&amp;&amp; *(open + xx) == <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> rx = root(x);</span><br><span class="line"><span class="keyword">int</span> rxx = root(xx);</span><br><span class="line"><span class="keyword">if</span> (!Find(x, xx))</span><br><span class="line">id[rx] = xx;<span class="comment">//连接根节点即可</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (((x<span class="number">-1</span>)%n!=<span class="number">0</span>)&amp;&amp; *(open + zx) == <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> rx = root(x);</span><br><span class="line"><span class="keyword">int</span> rzx = root(zx);</span><br><span class="line"><span class="keyword">if</span> (!Find(x, zx))</span><br><span class="line">id[rx] = zx;<span class="comment">//连接根节点即可</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> ((x%n!=<span class="number">0</span>)&amp;&amp; *(open + yx) == <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> rx = root(x);</span><br><span class="line"><span class="keyword">int</span> ryx = root(yx);</span><br><span class="line"><span class="keyword">if</span> (!Find(x, yx))</span><br><span class="line">id[rx] = yx;<span class="comment">//连接根节点即可</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Duru</span><span class="params">()</span><span class="comment">//读入</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入渗滤装置图的边长:"</span>);</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">id = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>((n*n+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">open = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>((n * n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span>* p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>((n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入渗滤装置图\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">{</span><br><span class="line">scanf_s(<span class="string">"%1d"</span>, p + j);</span><br><span class="line"><span class="keyword">if</span> (*(p + j) == <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">*(open + (j + (i - <span class="number">1</span>) * n)) = <span class="number">1</span>;</span><br><span class="line">Union(j + (i - <span class="number">1</span>) * n);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"已成功读入并处理该图！！！\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"命令样式:1 (一号命令、打印渗滤图)\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"命令样式:2 8(二号命令、将8号结点位置渗滤功能open)\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"命令样式:3 4 7(三号命令、查询4号结点和7号结点是否连通)\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"命令样式:4(四号命令、查询该渗滤装置是否能工作)\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入控制命令\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SX</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">id[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">id[n * n + <span class="number">2</span>] = n * n + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> roots = id[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> ri = root(i);</span><br><span class="line">id[ri] = roots;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> rootx = id[n*n+<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n*n-n+<span class="number">1</span>; i &lt;= n*n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> ri = root(i);</span><br><span class="line">id[ri] = rootx;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%5d"</span>, root(j + n * (i - <span class="number">1</span>)));</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Egscanf();</span><br><span class="line">Duru();</span><br><span class="line"><span class="keyword">int</span> o=<span class="number">4</span>, p, q;</span><br><span class="line"><span class="keyword">while</span> (o != <span class="number">-1</span>)</span><br><span class="line">{</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;o);</span><br><span class="line"><span class="keyword">if</span> (o == <span class="number">1</span>)</span><br><span class="line">print();</span><br><span class="line"><span class="keyword">if</span> (o == <span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;p);</span><br><span class="line">open[p] = <span class="number">1</span>;</span><br><span class="line">Union(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d号结点位置渗滤功能已 open\n"</span>,p);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (o == <span class="number">3</span>)</span><br><span class="line">{</span><br><span class="line">scanf_s(<span class="string">"%d%d"</span>, &amp;p, &amp;q);</span><br><span class="line"><span class="keyword">if</span> (Find(p, q))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d结点和%d结点连通\n"</span>, p, q);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d结点和%d结点不连通\n"</span>, p, q);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (o == <span class="number">4</span>)</span><br><span class="line">{</span><br><span class="line">SX();</span><br><span class="line"><span class="keyword">if</span>(Find(<span class="number">0</span>,n*n+<span class="number">2</span>))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"该渗滤装置能工作!!!\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"该渗滤装置不能工作!!!\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h1><code>End</code></h1>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Balanced Lineup</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Balanced%20Lineup/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Balanced%20Lineup/</url>
      
        <content type="html"><![CDATA[<h2 id="Balanced-Lineup"><a href="http://poj.org/problem?id=3264">Balanced Lineup</a></h2><h2 id="题解"><code>题解</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 50010</span></span><br><span class="line"><span class="keyword">int</span> h[MAX];</span><br><span class="line"><span class="keyword">int</span> Fmax[MAX][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> Fmin[MAX][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> N, Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> x &gt; y ? y : x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST_create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//初始化0列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">Fmax[i][<span class="number">0</span>] = Fmin[i][<span class="number">0</span>] = h[i];</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">log2</span>(N);<span class="comment">//log(N)/log(2.0)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)<span class="comment">//1到k列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; i++)</span><br><span class="line">{</span><br><span class="line">Fmax[i][j] = <span class="built_in">max</span>(Fmax[i][j - <span class="number">1</span>], Fmax[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">Fmin[i][j] = <span class="built_in">min</span>(Fmin[i][j - <span class="number">1</span>], Fmin[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">log2</span>(r - l + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> m1 = <span class="built_in">max</span>(Fmax[l][k], Fmax[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line"><span class="keyword">int</span> m2 = <span class="built_in">min</span>(Fmin[l][k], Fmin[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line"><span class="keyword">return</span> m1 - m2;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;Q)!=EOF)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;h[i]);</span><br><span class="line"><span class="built_in">ST_create</span>();</span><br><span class="line"><span class="keyword">while</span> (Q--)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">RMQ</span>(a, b));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> RMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bit Map</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Bit%20Map/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Bit%20Map/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><code>引言</code></h2><p><strong>一、类似于<code>桶排序</code>的思想，但我们从一个 <code>int</code> 缩小到一个 <code>bit，占用缩小</code> 32 倍 `</strong></p><p><strong>二、对于一个 <code>32位</code>系统而言，我们用 <code>bitmap</code> 可以存储 <code>42亿</code>左右的<code>巨额</code>数据量</strong></p><p><strong>三、我们能够<code>精确迅速</code>地判断某个数据是否存在某个集合中！</strong></p><h2 id="位运算"><code>位运算</code></h2><p><strong>一、大小关系</strong><br><strong>1 int 等于 4 byte</strong><br><strong>1 byte 等于 8 二进制位</strong><br><strong>二、运算符</strong><br><strong>&lt;&lt; 左移 —— 乘 2</strong><br><strong>&gt;&gt; 右移 —— 除 2</strong><br><strong>举个例子：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">1</span>;            <span class="comment">//00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,n &lt;&lt; <span class="number">1</span>);  <span class="comment">//00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">//&gt;&gt;同理</span></span><br></pre></td></tr></tbody></table></figure><p><strong>~ ——0 和 1 互换（含符号位）（取反）</strong><br><strong>举个例子：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">1</span>;            </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,~n);</span><br><span class="line"><span class="comment">//00000000 00000000 00000000 00000001(1的原码)</span></span><br><span class="line"><span class="comment">//00000000 00000000 00000000 00000001(1的补码)</span></span><br><span class="line"><span class="comment">//11111111 11111111 11111111 11111110(~取反运算得到B补码)</span></span><br><span class="line"><span class="comment">//10000000 00000000 00000000 00000010(B补码的原码，取反加1，即-2)</span></span><br></pre></td></tr></tbody></table></figure><p><strong>对任意一个二进制数取反的含义是什么？1010 取反是 0101</strong><br><strong>0100 取反是 1011，容易看出取反的本质就是找一个数和原来的相加得到每一位均为 1 的数</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;<span class="comment">//00000000 00000000 00000000 00001010</span></span><br><span class="line">num = num | (<span class="number">1</span> &lt;&lt; <span class="number">5</span>);   <span class="comment">//00000000 00000000 00000000 00101010</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="示例"><code>示例</code></h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 99999999</span></span><br><span class="line"><span class="keyword">int</span> bitmap[MAX];<span class="comment">//(32x99999999=3,199,999,968约32亿个bit)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入非负整数\n"</span>);</span><br><span class="line"><span class="keyword">while</span> (scanf_s(<span class="string">"%lld"</span>, &amp;p) != EOF)</span><br><span class="line">bitmap[p &gt;&gt; <span class="number">5</span>] = bitmap[p &gt;&gt; <span class="number">5</span>] | (<span class="number">1</span> &lt;&lt; p &amp; (<span class="number">32</span> - <span class="number">1</span>));</span><br><span class="line"><span class="comment">//删除某个数</span></span><br><span class="line"><span class="comment">//bitmap[p &gt;&gt; 5] = bitmap[p &gt;&gt; 5] &amp; ~ (1 &lt;&lt; p &amp; (32 - 1));a</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="参考文献"><code>参考文献</code></h2><p><strong><a href="http://www.manongjc.com/detail/9-xnvonaujoxqxvtt.html">位数组 (bit 数组)</a></strong></p><h2 id="END"><code>END</code></h2>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 位图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D To E</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/D%20To%20E/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/D%20To%20E/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="https://vjudge.net/problem/UVA-11175">From D to E and Back</a></strong></p><hr><h2 id="题目解析"><code>题目解析</code></h2><blockquote><p><strong>问题一：如何存图？</strong></p></blockquote><p><strong>因为要频繁地判断两节点间是否有边，所以这里采用邻接矩阵最为方便</strong></p><blockquote><p><strong>问题二：什么情况下 E 不可能存在？</strong></p></blockquote><p><img src="https://pic.imgdb.cn/item/613b366a44eaada739ffcc6a.jpg" alt="一个图"></p><hr><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">C++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 500</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,b,e) for(int i=(b);i&lt;(e);i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> map[MAX][MAX];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">REP</span>(i, <span class="number">0</span>, n)</span><br><span class="line"><span class="built_in">REP</span>(j, <span class="number">0</span>, n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">bool</span> flag1 = <span class="literal">false</span>, flag2 = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">REP</span>(k, <span class="number">0</span>, n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (map[i][k] &amp;&amp; map[j][k])</span><br><span class="line">flag1 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (map[i][k] ^ map[j][k])</span><br><span class="line">flag2 = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (flag1 &amp;&amp; flag2)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> x, n, m;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">while</span> (x--)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">memset</span>(map, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(map));</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">map[a][b] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">solve</span>(n))</span><br><span class="line">cout &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">"No"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树重建</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/E_%E4%BA%8C%E5%8F%89%E6%A0%91%E9%87%8D%E5%BB%BA/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/E_%E4%BA%8C%E5%8F%89%E6%A0%91%E9%87%8D%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="https://www.luogu.com.cn/problem/UVA536">二叉树重建</a></strong></p><h2 id="题目解析"><code>题目解析</code></h2><p><strong>本题是通过前序遍历和中序遍历得到的顺序推出后序遍历，也就是有两个字符串推出另外一个字符串</strong></p><p><strong>样例输入：DBACEGF ABCDEFG</strong></p><p><strong>一、由前序得到 root 结点 D（pre [0]），再中序中寻找到对应位置，代码如下：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (pre[<span class="number">0</span>] != in[len]){</span><br><span class="line">       len++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>二、截取 D 的左右子树</strong></p><p><strong>D 的左子树的前序遍历为 BAC、中序遍历为 ABC</strong><br><strong>D 的右子树的前序遍历为 EGF、中序遍历为 EFG</strong><br><strong>重复上述步骤</strong></p><p><strong>三、输出当前根节点</strong></p><p><strong>因为是后序遍历最后要输出根结点</strong></p><blockquote><p>用 C 语言手动实现字符串截取函数，代码如下：</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">Intercept_string</span><span class="params">(<span class="keyword">char</span> *p, <span class="keyword">int</span> s, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">char</span>* h; <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">h = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = s; i &lt; n + s; i++)</span><br><span class="line">{</span><br><span class="line">*(h+j)= *(p+i);</span><br><span class="line">j++;</span><br><span class="line">}</span><br><span class="line">*(h + j) = <span class="string">'\0'</span>; <span class="comment">//注意加上字符串截止符</span></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//p：待截取字符串首地址、s：起始位置、n：截取长度</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="完整代码"><code>完整代码</code></h2><h3 id="C语言代码"><code>C语言代码</code></h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">Intercept_string</span><span class="params">(<span class="keyword">char</span>* p, <span class="keyword">int</span> s, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">char</span>* h; <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    h = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s; i &lt; n + s; i++)</span><br><span class="line">    {</span><br><span class="line">        *(h + j) = *(p + i);</span><br><span class="line">        j++;</span><br><span class="line">    }</span><br><span class="line">    *(h + j) = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pose_ergodic</span><span class="params">(<span class="keyword">char</span> pre[], <span class="keyword">char</span> in[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(pre) &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pre[<span class="number">0</span>] != in[len])</span><br><span class="line">    {</span><br><span class="line">        len++;</span><br><span class="line">    }</span><br><span class="line">    pose_ergodic(Intercept_string(pre, <span class="number">1</span>, len), Intercept_string(in, <span class="number">0</span>, len));</span><br><span class="line">    pose_ergodic(Intercept_string(pre, len + <span class="number">1</span>, <span class="built_in">strlen</span>(pre) - <span class="number">1</span>), Intercept_string(in, len + <span class="number">1</span>, <span class="built_in">strlen</span>(in) - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, pre[<span class="number">0</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">char</span> ch1[MAX], ch2[MAX];</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, &amp;ch1,&amp;ch2))</span><br><span class="line">    {</span><br><span class="line">            getchar();</span><br><span class="line">            pose_ergodic(ch1, ch2);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="C-代码"><code>C++代码</code></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postErgodic</span><span class="params">(string pre, string in)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (pre.<span class="built_in">size</span>() != <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">len = in.<span class="built_in">find</span>(pre[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">postErgodic</span>(pre.<span class="built_in">substr</span>(<span class="number">1</span>,len),in.<span class="built_in">substr</span>(<span class="number">0</span>,len));</span><br><span class="line"><span class="built_in">postErgodic</span>(pre.<span class="built_in">substr</span>(len + <span class="number">1</span>), in.<span class="built_in">substr</span>(len + <span class="number">1</span>));</span><br><span class="line">cout &lt;&lt; pre[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">string pre, in;</span><br><span class="line"><span class="keyword">while</span> (cin&gt;&gt;pre&gt;&gt;in)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">postErgodic</span>(pre, in);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> BT </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entropy</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Entropy/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Entropy/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="http://poj.org/problem?id=1521">Entropy</a></strong></p><hr><h2 id="题目解析"><code>题目解析</code></h2><blockquote><p><strong>问题一：本题什么意思？</strong></p></blockquote><p><strong>用熵编码简化 ASCII 码，熵编码器是一种数据编码方法，通过将消息编码为删除 “浪费” 或 “额外” 信息，实现无损数据压缩。换句话说，熵编码会删除最初不需要的信息来准确编码消息。高度熵意味着信息会浪费大量信息：在 ASCII 中编码的英语文本是具有非常高熵的消息类型示例。已经压缩的消息，如 JPEG 图形或 ZIP 档案，几乎没有熵，并没有从熵编码的进一步尝试中获益。</strong></p><hr><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 30</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> statistics[MAX];<span class="comment">//字母个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="string">"END"</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">memset</span>(statistics, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(statistics));</span><br><span class="line"><span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">'_'</span>)</span><br><span class="line">statistics[<span class="number">26</span>]++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">statistics[s[i] - <span class="string">'A'</span>]++;</span><br><span class="line">}</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=<span class="number">26</span>; i++)</span><br><span class="line"><span class="keyword">if</span> (statistics[i])</span><br><span class="line">q.<span class="built_in">push</span>(statistics[i]);</span><br><span class="line"><span class="keyword">int</span> ans = n;</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt;<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> t, t1, t2;</span><br><span class="line">t1 = q.<span class="built_in">top</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">t2 = q.<span class="built_in">top</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">t = t1 + t2;</span><br><span class="line">q.<span class="built_in">push</span>(t);</span><br><span class="line">ans += t;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %.1lf\n"</span>, n * <span class="number">8</span>, ans, (<span class="keyword">double</span>)(n * <span class="number">8</span>) / ans);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Note"><code>Note</code></h2><blockquote><p><strong>将 ans 初始化为 n 意义何在？</strong></p></blockquote><p><strong>答：最后一次合并的结果的大小一定是 n（哈夫曼树的树根 = 叶子权值之和），这样可以省掉最后一次合并的运算</strong></p><blockquote><p><strong>为什么是 q.size ()&gt;2</strong></p></blockquote><p><strong>因为ans初始化为n，所以最后一次合并不用进行，即还剩下两个节点时就跳出循环了，<code>对于刚好两个结点的情况也适用！</code></strong></p><blockquote><p><strong>当 ans 初始化为 0 时怎么写？</strong></p></blockquote><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>() !=<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> t, t1, t2;</span><br><span class="line">t1 = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">t2 = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">t = t1 + t2;</span><br><span class="line">q.<span class="built_in">push</span>(t);</span><br><span class="line">ans += t;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> HT </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fence Repair</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Fence%20Repair/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Fence%20Repair/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="http://poj.org/problem?id=3253">Fence Repair</a></strong></p><hr><h2 id="题目解析"><code>题目解析</code></h2><blockquote><p><strong>问题一：该题的类型是什么？</strong></p></blockquote><p><strong>每切开一块木板就得到两块木板，两块木板的长度之和等于之前的那一块木板，类似于二叉树</strong><br><strong>本题又是一道求解最优值的问题，不难想到最优二叉树，即哈夫曼树。</strong></p><hr><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">C++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">{</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line">Q.<span class="built_in">push</span>(m);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (Q.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">cout &lt;&lt; m;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">{</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (Q.<span class="built_in">size</span>() != <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a = Q.<span class="built_in">top</span>();</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">int</span> b = Q.<span class="built_in">top</span>();</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">sum += a + b;</span><br><span class="line">Q.<span class="built_in">push</span>(a+b);</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; sum;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> HT </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Huffman 编码树</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Huffman%20%E7%BC%96%E7%A0%81%E6%A0%91/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Huffman%20%E7%BC%96%E7%A0%81%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="http://www.bailian.openjudge.cn/practice/4080/">Huffman 编码树</a></strong></p><hr><h2 id="题目解析"><code>题目解析</code></h2><blockquote><p><strong>问题一：什么是 Huffman 树？</strong></p></blockquote><p><strong><a href="https://xn--ctta.icu/2021/08/22/1.%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E6%A0%91%E3%80%81%E5%9B%BE/03.%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/">点击转到 - 哈夫曼树</a></strong></p><blockquote><p><strong>问题二：需要把整个 huffman 树构造出来吗？</strong></p></blockquote><p><strong>答：不需要，题目要求我们求 <code>WPL</code> 的大小，所以我们在<code>优先队</code>列里实现这个<code>计算过程</code>就可以了。</strong></p><blockquote><p><strong>问题三：什么是优先队列？</strong></p></blockquote><p><strong><a href="https://xn--ctta.icu/2021/08/22/5.%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/C++/">点击转到 - C++</a></strong></p><hr><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">C++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt;Q;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n, x;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">{</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">Q.<span class="built_in">push</span>(x);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (Q.<span class="built_in">size</span>()!= <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">a = Q.<span class="built_in">top</span>();</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">b = Q.<span class="built_in">top</span>();</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">Q.<span class="built_in">push</span>(a + b);</span><br><span class="line">ans += a + b;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>要点 1：生成哈夫曼树可以使得带权外部路径长度 WPL 总和最小</strong><br><strong>要点 2：新生成的结点值之和即为最终答案，所以无需等到哈夫曼树完全生成后再计算</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> HT </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inverting Huffman</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Inverting%20Huffman/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Inverting%20Huffman/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="https://www.luogu.com.cn/problem/UVA12676">Inverting Huffman</a></strong><br><strong><a href="https://blog.csdn.net/LXYDSF/article/details/113916735?ops_request_misc=%7B%22request%5Fid%22%3A%22163060658016780271549685%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=163060658016780271549685&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-113916735.first_rank_v2_pc_rank_v29&amp;utm_term=UVA12676&amp;spm=1018.2226.3001.4187">CSDN - 反转树</a></strong></p><hr><h2 id="题目解析"><code>题目解析</code></h2><blockquote><p><strong>问题一：本题有最大值吗？</strong></p></blockquote><p><strong>本题不存在最大值，因为通过等比放大，我们可以得到无数种可能，二叉树的形态不变，节点值的大小可以无限大。</strong></p><blockquote><p><strong>问题二：刚开始时基准数（temp）为什么为 1？</strong></p></blockquote><p><strong>因为我们要求最小值，最后一层结点值初始化为 1 时可得到最小值</strong></p><p><strong>且 temp 不仅是用来初始化最后一层节点的值，也用来更新每一层的最大值</strong></p><p><strong>最后一层的最大值恰好等于初始值</strong></p><blockquote><p><strong>问题三：本题要点是什么？</strong></p></blockquote><p><strong>vector 数组记录每一层 + temp 更新 + 哈夫曼树</strong></p><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">C++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 55</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;deep[MAX];<span class="comment">//向量数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n, x;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">deep[i].<span class="built_in">clear</span>();<span class="comment">//清空每一个vector</span></span><br><span class="line"><span class="keyword">int</span> maxd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">{</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">deep[x].<span class="built_in">push_back</span>(<span class="number">0</span>);<span class="comment">//几个0就代表几个元素</span></span><br><span class="line">maxd= <span class="built_in">max</span>(maxd, x);<span class="comment">//求最大深度</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = <span class="number">1</span>;<span class="comment">//基准数，初始化为1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = maxd; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; deep[i].<span class="built_in">size</span>(); j++)</span><br><span class="line"><span class="keyword">if</span> (!deep[i][j])</span><br><span class="line">deep[i][j] = temp;</span><br><span class="line"><span class="built_in">sort</span>(deep[i].<span class="built_in">begin</span>(),deep[i].<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; deep[i].<span class="built_in">size</span>(); j += <span class="number">2</span>)</span><br><span class="line">deep[i - <span class="number">1</span>].<span class="built_in">push_back</span>(deep[i][j] + deep[i][j + <span class="number">1</span>]);</span><br><span class="line">temp = *(deep[i].<span class="built_in">end</span>() - <span class="number">1</span>);<span class="comment">//第i层的最大值</span></span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; *deep[<span class="number">0</span>].<span class="built_in">begin</span>() &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> HT </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jungle Roads</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Jungle%20Roads/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Jungle%20Roads/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="http://poj.org/problem?id=1251">Jungle Roads</a></strong></p><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">C++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 30</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> map[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> n, book[MAX], dis[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memset</span>(map, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(map));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; i++ )</span><br><span class="line">{</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">dis[i] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">book[s] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//记录相邻点的距离</span></span><br><span class="line">dis[i] = map[s][i];</span><br><span class="line"><span class="keyword">int</span> m = n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> min = <span class="number">0x3f3f3f3f</span>, t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (book[i] == <span class="number">0</span> &amp;&amp; dis[i] &lt; min)</span><br><span class="line">{</span><br><span class="line">min = dis[i];</span><br><span class="line">t = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">sum += dis[t];</span><br><span class="line">book[t] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (book[i] ==<span class="number">0</span> &amp;&amp; dis[i] &gt; map[t][i])</span><br><span class="line">dis[i] = map[t][i];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; n &amp;&amp; n)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">init</span>();<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">int</span> m = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (m--)<span class="comment">//读入</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">cin &gt;&gt; ch;</span><br><span class="line"><span class="keyword">int</span> a = ch - <span class="string">'A'</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">cin &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> (b != <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (b--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">cin &gt;&gt; ch&gt;&gt;c;</span><br><span class="line">map[a][ch - <span class="string">'A'</span> + <span class="number">1</span>] = c;</span><br><span class="line">map[ch - <span class="string">'A'</span> + <span class="number">1</span>][a] = c;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">cout&lt;&lt;<span class="built_in">prim</span>(<span class="number">1</span>)&lt;&lt;endl;<span class="comment">//prim算法</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、初始化</span></span><br><span class="line"><span class="comment">二、数据读入</span></span><br><span class="line"><span class="comment">三、prim算法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="题目解析"><code>题目解析</code></h2><hr><h2 id="END"><code>END</code></h2><h1></h1>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> MST </tag>
            
            <tag> Prim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LCA</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/LCA/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/LCA/</url>
      
        <content type="html"><![CDATA[<h2 id="LCA简介"><code>LCA简介</code></h2><p><strong>LCA（Least Common Ancestors），即最近公共祖先，是指在有根树中，找出某两个结点 u 和 v 最近的公共祖先。 ——— 来自百度百科</strong></p><hr><h2 id="暴力穷举"><code>暴力穷举</code></h2><p><strong>一、建图（father 数组）</strong><br><strong>二、标记法</strong><br><strong>1、u 结点的前辈全部标记后，v 结点再向上一层一层 find 直到寻找到被标记的结点，该节点即为 LCA</strong><br><strong>2、DFS 找出结点深度，u v 跳到同一层，再同步向上跳，当跳到同一个节点时，该结点即为 LCA</strong></p><h3 id="例题：-Nearest-Common-Ancestors-待修正"><strong>例题： <a href="http://poj.org/problem?id=1330">Nearest Common Ancestors</a>(待修正)</strong></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> father[MAX], book[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">father[i] = i;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (u == v)<span class="comment">//同一结点的情况</span></span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">book[u] = <span class="number">1</span>;<span class="comment">//防止漏掉u恰好是v父亲的情况</span></span><br><span class="line"><span class="keyword">while</span> (u != father[u])</span><br><span class="line">{</span><br><span class="line">u = father[u];</span><br><span class="line">book[u] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (v != father[v])</span><br><span class="line">{</span><br><span class="line">v = father[v];</span><br><span class="line"><span class="keyword">if</span> (book[v] == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="built_in">init</span>(m);</span><br><span class="line">m--;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">father[b] = a;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> p, q;</span><br><span class="line">cin &gt;&gt; p &gt;&gt; q;</span><br><span class="line">cout &lt;&lt; <span class="built_in">LCA</span>(p, q)&lt;&lt;endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="例题：How-far-away-？"><strong>例题：<a href="https://acm.hdu.edu.cn/showproblem.php?pid=2586">How far away ？</a></strong></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">40005</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k, F[MAX][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAX], dist[MAX], d[MAX], cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> t, c, next;</span><br><span class="line">}e[MAX&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> t, n, f;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">{</span><br><span class="line">cin &gt;&gt; n &gt;&gt; f;</span><br><span class="line">n--;</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (f--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> p, q;</span><br><span class="line">cin &gt;&gt; p &gt;&gt; q;</span><br><span class="line">cout &lt;&lt; <span class="built_in">LCA</span>(p, q) &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> LCA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的遍历</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/T_%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/T_%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="https://www.luogu.com.cn/problem/P3916">图的遍历</a></strong></p><hr><h2 id="题目解析"><code>题目解析</code></h2><blockquote><p><strong>问题一：选择什么建图方式？</strong></p></blockquote><p><strong>优先考虑链式前向星或邻接表，因为我们要遍历整个图，所以通常情况下从 a 节点出发遍历能到达的节点，而上述两种建图方法恰好保留某点所有邻接点的值。</strong></p><blockquote><p><strong>问题二：单纯的 DFS 可以吗？</strong></p></blockquote><p><strong>这个当然可以，但是比较费时，可能会时间超限。</strong></p><blockquote><p><strong>问题三：有什么巧妙地做法？</strong></p></blockquote><p><strong>倒叙构建该有向图，然后从编号最大点开始 DFS，其所能到达的点能到达的最大点就是该编号，用一个 maxn 数组记录该值。</strong></p><hr><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">C++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> to, next;</span><br><span class="line">}edge[MAX];</span><br><span class="line"><span class="keyword">int</span> n, m, cnt, head[MAX], maxn[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">edge[++cnt].to = v;<span class="comment">//从1开始时就不用初始化为-1了</span></span><br><span class="line">edge[cnt].next = head[u];</span><br><span class="line">head[u] = cnt; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (maxn[u])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">maxn[u] = v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = edge[i].next)</span><br><span class="line"><span class="built_in">dfs</span>(v, edge[i].to);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="built_in">add</span>(v, u);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--)</span><br><span class="line"><span class="built_in">dfs</span>(i, i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; i++)</span><br><span class="line">cout &lt;&lt; maxn[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 算法 </tag>
            
            <tag> 搜索🔍 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新二叉树</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/X_%E6%96%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/X_%E6%96%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="https://www.luogu.com.cn/problem/P1305">P1305 新二叉树</a></strong></p><hr><h2 id="题目解析"><code>题目解析</code></h2><blockquote><p><strong>问题一：数组存储 or 链式存储 ？</strong></p></blockquote><p><strong>如果采用链式存储的话<code>每次读数据</code>的时都要<code>寻找</code>当前读入的数据的<code>根节点</code>的位置，并不高效！</strong><br><strong>所以我们采用<code>数组存储</code></strong></p><blockquote><p><strong>问题二：如何用数组存储？</strong></p></blockquote><p><strong>题目给出的数据是父亲和两个孩子</strong><br><strong>所以我们可以记录根结点、然后用 L 数组记录左孩子、R 数组记录右孩子</strong></p><blockquote><p><strong>问题三：数据输入时出现断层会有影响吗？</strong></p></blockquote><p><strong>不会，因为给出的数据一定会构成<code>二叉树</code>，某一次数据的断层并不影响<code>最终</code>的整体连接效果。</strong></p><hr><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="keyword">int</span> l[MAX], r[MAX], root;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_ergodic</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (t != <span class="string">'*'</span> - <span class="string">'a'</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, t + <span class="string">'a'</span>);</span><br><span class="line"><span class="built_in">pre_ergodic</span>(l[t]);</span><br><span class="line"><span class="built_in">pre_ergodic</span>(r[t]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;ch);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">0</span>) root = ch[<span class="number">0</span>] - <span class="string">'a'</span>;</span><br><span class="line">l[ch[<span class="number">0</span>] - <span class="string">'a'</span>] = ch[<span class="number">1</span>] - <span class="string">'a'</span>;</span><br><span class="line">r[ch[<span class="number">0</span>] - <span class="string">'a'</span>] = ch[<span class="number">2</span>] - <span class="string">'a'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">pre_ergodic</span>(root);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> BT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树</title>
      <link href="/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Z_%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2021/09/16/S_%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/S_%E7%AE%97%E6%B3%95/T_%E5%9B%BE%E8%AE%BA/Z_%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源"><code>题目来源</code></h2><p><strong><a href="https://www.luogu.com.cn/problem/P3366">最小生成树</a></strong></p><h2 id="完整代码"><code>完整代码</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 5010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> map[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> book[MAX], dis[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memset</span>(map, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(map));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">{</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">dis[i] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">book[s] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">dis[i] = map[s][i];</span><br><span class="line"><span class="keyword">int</span> m = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> min = <span class="number">0x3f3f3f3f</span>, t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (min &gt; dis[i] &amp;&amp; book[i] == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">min = dis[i];</span><br><span class="line">t = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">sum += dis[t];</span><br><span class="line">book[t] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (dis[i] &gt; map[t][i] &amp;&amp; book[i] == <span class="number">0</span>)</span><br><span class="line">dis[i] = map[t][i];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">init</span>();<span class="comment">//初始化</span></span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (map[a][b]&gt;c)</span><br><span class="line">{</span><br><span class="line">map[a][b] = c;</span><br><span class="line">map[b][a] = c;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> p=<span class="built_in">prim</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (book[i] == <span class="number">0</span>)</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">cout &lt;&lt; <span class="string">"orz"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; p;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="题目解析"><code>题目解析</code></h2><p><strong>一、初始化</strong><br><strong>二、读入数据</strong><br><strong>三、Prim 算法</strong></p><h2 id="END"><code>END</code></h2>]]></content>
      
      
      <categories>
          
          <category> S_算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> MST </tag>
            
            <tag> Prim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SnakeEating</title>
      <link href="/2021/09/16/S_%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/SnakeEating/"/>
      <url>/2021/09/16/S_%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/SnakeEating/</url>
      
        <content type="html"><![CDATA[<h1>贪吃蛇</h1><h2 id="运行条件">运行条件</h2><h3 id="需要安装-EasyX">需要安装 <a href="https://easyx.cn/">EasyX</a></h3><p><strong>方式一：<a href="https://easyx.cn/">EasyX</a></strong><br><strong>方式二：见运行附件</strong></p><h3 id="VC-6-0-运行需要设置多线程">VC++6.0 运行需要设置多线程</h3><p><strong>方法：Project-&gt;Settings-&gt;C/C+±&gt;Code Generation-&gt;Use run-time libray-&gt;Debug Multithread，或 Multithread，或 Debug Multithread DLL， 或 Multithread DLL 都可以</strong></p><h3 id="VS-2019-运行需要使用多字节字符集">VS 2019 运行需要使用多字节字符集</h3><p><strong>方法：项目 -&gt; 属性 -&gt; 高级 -&gt; 字符集 -&gt; 使用多字节字符集</strong></p><h3 id="Music-和-Picture-文件需要放在对应目录下">Music 和 Picture 文件需要放在对应目录下</h3><p><strong><a href="https://pan.baidu.com/s/1ue9ZXmyYwIoZz9z0Dl27Ng">运行附件（百度云）</a> 提取码：<code>lsd7</code></strong><br><strong><a href="https://www.aliyundrive.com/s/pk3Rnd2io9Q">运行附件（阿里云）</a> 提取码：<code>7lpl</code></strong></p><hr><h2 id="更新说明">更新说明</h2><h3 id="引入多线程">引入多线程</h3><h3 id="加入感谢名单">加入感谢名单</h3><h3 id="BGM—GET-微调">BGM—GET 微调</h3><h3 id="吃-food-时增加分数显示">吃 food 时增加分数显示</h3><h3 id="开始时自动切换为英文输入法问题">开始时自动切换为英文输入法问题</h3><h3 id="修复-game-over-后需要按两次-enter-键">修复 game over 后需要按两次 enter 键</h3><h3 id="引导画面文字播报与-BGM-踩点，缩短时间">引导画面文字播报与 BGM 踩点，缩短时间</h3><h3 id="修复进入游戏后连敲三下-Enter-的闪退问题">修复进入游戏后连敲三下 Enter 的闪退问题</h3><hr><h2 id="完整代码-VC-6-0">完整代码 (VC++6.0)</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;process.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mmsystem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"winmm.lib"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lx 640</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ly 480</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sup 7<span class="comment">//换肤模式突变点</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> key,thread,flag, mark, p, ans, i = <span class="number">1</span>, threadend = <span class="number">1</span>;; <span class="keyword">char</span> s[<span class="number">1000</span>]; <span class="keyword">double</span> speed = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DIR</span>//4个方向,<span class="title">enum</span>为枚举类型</span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">PAUS,</span><br><span class="line">UP,</span><br><span class="line">DOWN,</span><br><span class="line">LEFT,</span><br><span class="line">RIGHT,</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Food</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">int</span> r;<span class="comment">//半径</span></span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line">DWORD color;</span><br><span class="line">}food;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Snake</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">int</span> speed;</span><br><span class="line"><span class="keyword">int</span> dir;</span><br><span class="line">DWORD color1;</span><br><span class="line">DWORD color2;</span><br><span class="line">POINT coor[MAX];</span><br><span class="line">}snake;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BGM_ALL</span><span class="params">()</span></span>;<span class="comment">//全局BGM</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> __stdcall <span class="title">BGM_GET</span><span class="params">(<span class="keyword">void</span>* pArguments)</span></span>;<span class="comment">//吃食物BGM</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BGM_FAIL</span><span class="params">()</span></span>;<span class="comment">//失败BGM</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Duce</span><span class="params">()</span></span>;<span class="comment">//引导菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Startmenu</span><span class="params">()</span></span>;<span class="comment">//开始菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Overmenu</span><span class="params">()</span></span>;<span class="comment">//结束菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Snakeinit</span><span class="params">()</span></span>;<span class="comment">//蛇初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foodinit</span><span class="params">()</span></span>;    <span class="comment">//食物初始化  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Drawframe</span><span class="params">()</span></span>;<span class="comment">//画边框</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Skinsystem</span><span class="params">(<span class="keyword">int</span> i)</span></span>;<span class="comment">//皮肤系统</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Drawsnake</span><span class="params">()</span></span>;<span class="comment">//普通切换皮肤模式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SupDrawsnake</span><span class="params">()</span></span>;<span class="comment">//快速切换皮肤模式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Drawfood</span><span class="params">()</span></span>;<span class="comment">//画食物</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Draw</span><span class="params">()</span></span>;<span class="comment">//绘图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Firstcontrol</span><span class="params">()</span></span>;<span class="comment">//按键交互</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Keycontrol</span><span class="params">()</span></span>;<span class="comment">//首次控制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Snakemove</span><span class="params">()</span></span>;<span class="comment">//蛇移动</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eatfood</span><span class="params">()</span></span>;<span class="comment">//吃食物</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Generatefood</span><span class="params">()</span></span>;<span class="comment">//生成食物</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Snakebump</span><span class="params">()</span></span>;<span class="comment">//蛇撞墙</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Eatself</span><span class="params">()</span></span>;<span class="comment">//咬自己</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>;<span class="comment">//结束输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reset</span><span class="params">()</span></span>;<span class="comment">//重置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thank</span><span class="params">()</span></span>;<span class="comment">//内测感谢名录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift</span><span class="params">()</span></span>;<span class="comment">//按下Shift键</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//多线程开始</span></span><br><span class="line">HANDLE   hThread;</span><br><span class="line"><span class="keyword">unsigned</span>   threadID;</span><br><span class="line">hThread = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;BGM_GET, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;threadID);</span><br><span class="line">BGM_ALL();</span><br><span class="line">Init();</span><br><span class="line">Startmenu();</span><br><span class="line"><span class="keyword">if</span> (!key)<span class="comment">//第一次开始按下shift键</span></span><br><span class="line">{</span><br><span class="line">Shift();</span><br><span class="line">key = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">Sleep(<span class="keyword">long</span>(speed));</span><br><span class="line">Draw();</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">Firstcontrol();</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">Snakemove();</span><br><span class="line"><span class="keyword">if</span> (Eatself() || Snakebump())</span><br><span class="line">{</span><br><span class="line">mciSendString(<span class="string">"close BGM1"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">BGM_FAIL();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">Eatfood();</span><br><span class="line">}</span><br><span class="line">Overmenu();</span><br><span class="line"><span class="keyword">switch</span> (_getch())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">{</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">speed = <span class="number">80</span>;</span><br><span class="line">flag = mark = ans = <span class="number">0</span>;</span><br><span class="line">Reset();</span><br><span class="line">threadend = <span class="number">0</span>;</span><br><span class="line">WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">CloseHandle(hThread);</span><br><span class="line">threadend = <span class="number">1</span>;</span><br><span class="line">main();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">27</span>:</span><br><span class="line">Thank();</span><br><span class="line">closegraph();</span><br><span class="line">Print();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//多线程结束</span></span><br><span class="line">WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">CloseHandle(hThread);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BGM_ALL</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">mciSendString(<span class="string">"open ./Music/Scheming_Weasel.mp3 alias BGM1"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">"play BGM1 repeat"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> __stdcall <span class="title">BGM_GET</span><span class="params">(<span class="keyword">void</span>* pArguments)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (thread)</span><br><span class="line">{</span><br><span class="line">mciSendString(<span class="string">"open ./Music/Get.wav alias BGM2"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">"play BGM2 wait"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">"close BGM2 "</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">thread = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (!threadend)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BGM_FAIL</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">mciSendString(<span class="string">"open ./Music/Gameover.wav alias BGM3"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">"play BGM3 wait"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">"close BGM3 "</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Duce</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) {</span><br><span class="line">p = <span class="number">1</span>;</span><br><span class="line">Sleep(<span class="number">300</span>);</span><br><span class="line">IMAGE one;<span class="comment">//定义一个图片名.</span></span><br><span class="line">loadimage(&amp;one, <span class="string">"Picture\\01.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;one);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line">Sleep(<span class="number">1500</span>);</span><br><span class="line">IMAGE two;<span class="comment">//定义一个图片名.</span></span><br><span class="line">loadimage(&amp;two, <span class="string">"Picture\\02.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;two);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line">Sleep(<span class="number">1500</span>);</span><br><span class="line">IMAGE three;</span><br><span class="line">loadimage(&amp;three, <span class="string">"Picture\\03.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;three);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line">Sleep(<span class="number">1400</span>);</span><br><span class="line">IMAGE four;</span><br><span class="line">loadimage(&amp;four, <span class="string">"Picture\\04.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;four);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line">Sleep(<span class="number">1500</span>);</span><br><span class="line">IMAGE five;</span><br><span class="line">loadimage(&amp;five, <span class="string">"Picture\\05.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;five);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line">Sleep(<span class="number">1400</span>);</span><br><span class="line">cleardevice();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Startmenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Duce();</span><br><span class="line"><span class="keyword">while</span> (_kbhit())</span><br><span class="line">getchar();</span><br><span class="line">IMAGE welcome;</span><br><span class="line">loadimage(&amp;welcome, <span class="string">"Picture\\00.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;welcome);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (_getch() == <span class="number">13</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Snakeinit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">srand(GetTickCount());</span><br><span class="line">snake.color1 = RGB(<span class="number">0</span>, <span class="number">235</span>, <span class="number">229</span>);</span><br><span class="line">snake.size = <span class="number">4</span>;</span><br><span class="line">snake.speed = <span class="number">10</span>;</span><br><span class="line">snake.dir = PAUS;</span><br><span class="line"><span class="keyword">int</span> randomx = rand() % (lx - <span class="number">100</span>) + <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> randomy = rand() % (ly - <span class="number">100</span>) + <span class="number">50</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">{</span><br><span class="line">snake.coor[i].x = (randomx / <span class="number">10</span>) * <span class="number">10</span> - <span class="number">10</span> * i;<span class="comment">//（除10乘10类方格化处理）</span></span><br><span class="line">snake.coor[i].y = (randomy / <span class="number">10</span>) * <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foodinit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">food.flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!food.flag)</span><br><span class="line">{</span><br><span class="line">Generatefood();</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; snake.size; j++)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fabs</span>(snake.coor[j].x - food.x) &lt;= food.r &amp;&amp; <span class="built_in">fabs</span>(snake.coor[j].y - food.y) &lt;= food.r)</span><br><span class="line">Generatefood();</span><br><span class="line">food.flag = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">initgraph(lx, ly);<span class="comment">//初始化窗口，大小640*480,/*SHOWCONSOLE*/</span></span><br><span class="line">Snakeinit();<span class="comment">//蛇初始化</span></span><br><span class="line">Foodinit();<span class="comment">//食物初始化</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Drawframe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">setlinestyle(PS_SOLID, <span class="number">20</span>);</span><br><span class="line">setlinecolor(RGB(<span class="number">93</span>, <span class="number">107</span>, <span class="number">153</span>));</span><br><span class="line">rectangle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">640</span>, <span class="number">480</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Skinsystem</span><span class="params">(<span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">switch</span> (q)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//YES</span></span><br><span class="line"><span class="comment">//蛇头</span></span><br><span class="line">setfillcolor(RGB(<span class="number">93</span>, <span class="number">107</span>, <span class="number">153</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//蛇身</span></span><br><span class="line">setfillcolor(RGB(<span class="number">150</span>, <span class="number">157</span>, <span class="number">177</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//YES</span></span><br><span class="line"><span class="comment">//蛇头</span></span><br><span class="line">setfillcolor(RGB(<span class="number">186</span>, <span class="number">63</span>, <span class="number">110</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//蛇身</span></span><br><span class="line">setfillcolor(RGB(<span class="number">248</span>, <span class="number">237</span>, <span class="number">203</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//YES</span></span><br><span class="line">setfillcolor(RGB(<span class="number">127</span>, <span class="number">205</span>, <span class="number">238</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line">setfillcolor(RGB(<span class="number">244</span>, <span class="number">241</span>, <span class="number">236</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//YES</span></span><br><span class="line"><span class="comment">//蛇头</span></span><br><span class="line">setfillcolor(RGB(<span class="number">221</span>, <span class="number">192</span>, <span class="number">179</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//蛇身</span></span><br><span class="line">setfillcolor(RGB(<span class="number">244</span>, <span class="number">241</span>, <span class="number">236</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//YES</span></span><br><span class="line">setfillcolor(RGB(<span class="number">113</span>, <span class="number">111</span>, <span class="number">114</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line">setfillcolor(RGB(<span class="number">244</span>, <span class="number">241</span>, <span class="number">236</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//蛇头</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//YES</span></span><br><span class="line">setfillcolor(RGB(<span class="number">206</span>, <span class="number">124</span>, <span class="number">128</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//蛇身</span></span><br><span class="line">setfillcolor(RGB(<span class="number">170</span>, <span class="number">175</span>, <span class="number">231</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:<span class="comment">//YES</span></span><br><span class="line">setfillcolor(RGB(<span class="number">223</span>, <span class="number">165</span>, <span class="number">161</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//蛇身</span></span><br><span class="line">setfillcolor(RGB(<span class="number">123</span>, <span class="number">130</span>, <span class="number">184</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SupDrawsnake</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">7</span>)</span><br><span class="line">{</span><br><span class="line">Skinsystem(i);</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">Skinsystem(<span class="number">1</span>);</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Drawsnake</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">7</span>)</span><br><span class="line">Skinsystem(i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">Skinsystem(<span class="number">1</span>);</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Drawfood</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">srand(GetTickCount());</span><br><span class="line"><span class="keyword">if</span> (food.flag)</span><br><span class="line">{</span><br><span class="line">setfillcolor(RGB(rand() % <span class="number">256</span>, rand() % <span class="number">256</span>, rand() % <span class="number">256</span>));</span><br><span class="line">solidcircle(food.x, food.y, food.r);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Draw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cleardevice();</span><br><span class="line">BeginBatchDraw();<span class="comment">//双缓冲绘图</span></span><br><span class="line">setbkcolor(RGB(<span class="number">204</span>, <span class="number">213</span>, <span class="number">240</span>));<span class="comment">//背景色</span></span><br><span class="line">cleardevice();<span class="comment">//清空绘图设备</span></span><br><span class="line">Drawframe();<span class="comment">//画边框</span></span><br><span class="line"><span class="comment">//画蛇(两种模式)</span></span><br><span class="line"><span class="keyword">if</span> (ans % Sup == <span class="number">0</span> &amp;&amp; ans &gt;= <span class="number">1</span>)</span><br><span class="line">SupDrawsnake();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Drawsnake();</span><br><span class="line">Drawfood();<span class="comment">//画食物</span></span><br><span class="line">EndBatchDraw();<span class="comment">//双缓冲绘图结束</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Firstcontrol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">switch</span> (_getch())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="string">'W'</span>:</span><br><span class="line"><span class="keyword">case</span><span class="number">'</span>w<span class="number">'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">72</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != DOWN)</span><br><span class="line">snake.dir = UP;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'S'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != UP)</span><br><span class="line">snake.dir = DOWN;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">75</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != RIGHT)</span><br><span class="line">snake.dir = LEFT;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">77</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != LEFT)</span><br><span class="line">snake.dir = RIGHT;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">Firstcontrol();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Keycontrol</span><span class="params">()</span><span class="comment">//按键控制</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (_kbhit())</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> key = _getch();</span><br><span class="line"><span class="comment">//72,80,75,77</span></span><br><span class="line"><span class="keyword">switch</span> (key)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="string">'W'</span>:<span class="comment">//上</span></span><br><span class="line"><span class="keyword">case</span><span class="number">'</span>w<span class="number">'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">72</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != DOWN)</span><br><span class="line">snake.dir = UP;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'S'</span>:<span class="comment">//下</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != UP)</span><br><span class="line">snake.dir = DOWN;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:<span class="comment">//左</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">75</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != RIGHT)</span><br><span class="line">snake.dir = LEFT;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'D'</span>:<span class="comment">//右</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">77</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != LEFT)</span><br><span class="line">snake.dir = RIGHT;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Snakemove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = snake.size - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">snake.coor[i] = snake.coor[i - <span class="number">1</span>];</span><br><span class="line">Keycontrol();</span><br><span class="line"><span class="keyword">switch</span> (snake.dir)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> UP:</span><br><span class="line">snake.coor[<span class="number">0</span>].y -= snake.speed;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DOWN:</span><br><span class="line">snake.coor[<span class="number">0</span>].y += snake.speed;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> LEFT:</span><br><span class="line">snake.coor[<span class="number">0</span>].x -= snake.speed;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> RIGHT:</span><br><span class="line">snake.coor[<span class="number">0</span>].x += snake.speed;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PAUS:</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eatfood</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (food.flag &amp;&amp; <span class="built_in">fabs</span>(snake.coor[<span class="number">0</span>].x - food.x) &lt;= food.r &amp;&amp; <span class="built_in">fabs</span>(snake.coor[<span class="number">0</span>].y - food.y) &lt;= food.r)</span><br><span class="line">{</span><br><span class="line">thread = <span class="number">1</span>;<span class="comment">//多线程开始执行</span></span><br><span class="line">i++;</span><br><span class="line">ans++;</span><br><span class="line">snake.color1 = food.color;</span><br><span class="line"><span class="keyword">if</span> (speed &gt; <span class="number">60</span>)</span><br><span class="line">speed -= <span class="number">0.05</span>;</span><br><span class="line">food.flag = <span class="literal">false</span>;</span><br><span class="line">mark += food.r;</span><br><span class="line">snake.size += food.r*<span class="number">2</span>/<span class="number">3</span>;</span><br><span class="line"><span class="comment">//显示分数</span></span><br><span class="line">settextstyle(<span class="number">26</span>, <span class="number">0</span>, <span class="string">"微软雅黑"</span>);</span><br><span class="line">settextcolor(COLORREF RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">sprintf</span>(s, <span class="string">"%d"</span>, mark);</span><br><span class="line">outtextxy(food.x, food.y, s);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">while</span> (!food.flag)</span><br><span class="line">{</span><br><span class="line">Generatefood();</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; snake.size; j++)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fabs</span>(snake.coor[j].x - food.x) &lt;= food.r &amp;&amp; <span class="built_in">fabs</span>(snake.coor[j].y - food.y) &lt;= food.r)</span><br><span class="line">Generatefood();</span><br><span class="line">food.flag = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Generatefood</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">srand(GetTickCount());</span><br><span class="line">food.x = <span class="number">10</span> + (rand() % <span class="number">60</span> + <span class="number">1</span>) * <span class="number">10</span>;</span><br><span class="line">food.y = <span class="number">10</span> + (rand() % <span class="number">44</span> + <span class="number">1</span>) * <span class="number">10</span>;</span><br><span class="line">food.color = RGB(rand() % <span class="number">256</span>, rand() % <span class="number">256</span>, rand() % <span class="number">256</span>);</span><br><span class="line">food.r = rand() % <span class="number">6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Eatself</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; snake.size; j++)</span><br><span class="line"><span class="keyword">if</span> (snake.coor[j].x == snake.coor[<span class="number">0</span>].x &amp;&amp; snake.coor[j].y == snake.coor[<span class="number">0</span>].y)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Snakebump</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (snake.coor[<span class="number">0</span>].x &lt;= k || snake.coor[<span class="number">0</span>].x &gt;= lx - k || snake.coor[<span class="number">0</span>].y &lt;= k || snake.coor[<span class="number">0</span>].y &gt;= ly - k)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Overmenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE Game_over;<span class="comment">//定义一个图片名.</span></span><br><span class="line">loadimage(&amp;Game_over, <span class="string">"Picture\\game_over.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;Game_over);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (_getch() == <span class="string">'\x0d'</span>)<span class="comment">//回车</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//统计信息</span></span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">"楷体"</span>);</span><br><span class="line">settextcolor(COLORREF RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">outtextxy(<span class="number">220</span>, <span class="number">100</span>, <span class="string">"GAME OVER"</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(s, <span class="string">"%d"</span>, mark);</span><br><span class="line">outtextxy(<span class="number">220</span>, <span class="number">150</span>, <span class="string">"你的分数为"</span>);</span><br><span class="line">outtextxy(<span class="number">380</span>, <span class="number">150</span>, s);</span><br><span class="line">outtextxy(<span class="number">220</span>, <span class="number">200</span>, <span class="string">"按Enter重新游戏  "</span>);</span><br><span class="line">outtextxy(<span class="number">220</span>, <span class="number">250</span>, <span class="string">"按Esc退出游戏  "</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thank</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">IMAGE thank;<span class="comment">//定义一个图片名.</span></span><br><span class="line">loadimage(&amp;thank, <span class="string">"Picture\\06.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;thank);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line">Sleep(<span class="number">4000</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"感谢您的陪伴！\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"您的分数是:   %d  分\n"</span>, mark);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"游戏开发者:\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"桃花涣小鱼干\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= snake.size; i++)</span><br><span class="line">snake.coor[i].x = snake.coor[i].y = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">keybd_event(<span class="number">0x10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">keybd_event(<span class="number">0x10</span>, <span class="number">0</span>, KEYEVENTF_KEYUP, <span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="完整代码-VS-2019">完整代码 (VS 2019)</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;process.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mmsystem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"winmm.lib"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lx 640</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ly 480</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sup 7<span class="comment">//换肤模式突变点</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> key,thread,flag, mark, p, ans, i = <span class="number">1</span>, threadend = <span class="number">1</span>;; <span class="keyword">char</span> s[<span class="number">1000</span>]; <span class="keyword">double</span> speed = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DIR</span>//4个方向,<span class="title">enum</span>为枚举类型</span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">PAUS,</span><br><span class="line">UP,</span><br><span class="line">DOWN,</span><br><span class="line">LEFT,</span><br><span class="line">RIGHT,</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Food</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">int</span> r;<span class="comment">//半径</span></span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line">DWORD color;</span><br><span class="line">}food;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Snake</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">int</span> speed;</span><br><span class="line"><span class="keyword">int</span> dir;</span><br><span class="line">DWORD color1;</span><br><span class="line">DWORD color2;</span><br><span class="line">POINT coor[MAX];</span><br><span class="line">}snake;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BGM_ALL</span><span class="params">()</span></span>;<span class="comment">//全局BGM</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> __stdcall <span class="title">BGM_GET</span><span class="params">(<span class="keyword">void</span>* pArguments)</span></span>;   <span class="comment">//吃食物BGM</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BGM_FAIL</span><span class="params">()</span></span>;<span class="comment">//失败BGM</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Duce</span><span class="params">()</span></span>;<span class="comment">//引导菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Startmenu</span><span class="params">()</span></span>;<span class="comment">//开始菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Overmenu</span><span class="params">()</span></span>;<span class="comment">//结束菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Snakeinit</span><span class="params">()</span></span>;<span class="comment">//蛇初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foodinit</span><span class="params">()</span></span>;    <span class="comment">//食物初始化  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Drawframe</span><span class="params">()</span></span>;<span class="comment">//画边框</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Skinsystem</span><span class="params">(<span class="keyword">int</span> i)</span></span>;<span class="comment">//皮肤系统</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Drawsnake</span><span class="params">()</span></span>;<span class="comment">//普通切换皮肤模式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SupDrawsnake</span><span class="params">()</span></span>;<span class="comment">//快速切换皮肤模式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Drawfood</span><span class="params">()</span></span>;<span class="comment">//画食物</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Draw</span><span class="params">()</span></span>;<span class="comment">//绘图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Firstcontrol</span><span class="params">()</span></span>;<span class="comment">//按键交互</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Keycontrol</span><span class="params">()</span></span>;<span class="comment">//首次控制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Snakemove</span><span class="params">()</span></span>;<span class="comment">//蛇移动</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eatfood</span><span class="params">()</span></span>;<span class="comment">//吃食物</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Generatefood</span><span class="params">()</span></span>;<span class="comment">//生成食物</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Snakebump</span><span class="params">()</span></span>;<span class="comment">//蛇撞墙</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Eatself</span><span class="params">()</span></span>;<span class="comment">//咬自己</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>;<span class="comment">//结束输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reset</span><span class="params">()</span></span>;<span class="comment">//重置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thank</span><span class="params">()</span></span>;<span class="comment">//内测感谢名录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift</span><span class="params">()</span></span>;<span class="comment">//按下Shift键</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//多线程开始</span></span><br><span class="line">HANDLE   hThread;</span><br><span class="line"><span class="keyword">unsigned</span>   threadID;</span><br><span class="line">hThread = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;BGM_GET, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;threadID);</span><br><span class="line">BGM_ALL();</span><br><span class="line">Init();</span><br><span class="line">Startmenu();</span><br><span class="line"><span class="keyword">if</span> (!key)<span class="comment">//第一次开始按下shift键</span></span><br><span class="line">{</span><br><span class="line">Shift();</span><br><span class="line">key = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">Sleep(speed);</span><br><span class="line">Draw();</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">Firstcontrol();</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">Snakemove();</span><br><span class="line"><span class="keyword">if</span> (Eatself() || Snakebump())</span><br><span class="line">{</span><br><span class="line">mciSendString(<span class="string">"close BGM1"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">BGM_FAIL();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">Eatfood();</span><br><span class="line">}</span><br><span class="line">Overmenu();</span><br><span class="line"><span class="keyword">switch</span> (_getch())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">{</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">speed = <span class="number">80</span>;</span><br><span class="line">flag = mark = ans = <span class="number">0</span>;</span><br><span class="line">Reset();</span><br><span class="line">threadend = <span class="number">0</span>;</span><br><span class="line">WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">CloseHandle(hThread);</span><br><span class="line">threadend = <span class="number">1</span>;</span><br><span class="line">main();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">27</span>:</span><br><span class="line">Thank();</span><br><span class="line">closegraph();</span><br><span class="line">Print();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//多线程结束</span></span><br><span class="line">WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">CloseHandle(hThread);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BGM_ALL</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">mciSendString(<span class="string">"open ./Music/Scheming_Weasel.mp3 alias BGM1"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">"play BGM1 repeat"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> __stdcall <span class="title">BGM_GET</span><span class="params">(<span class="keyword">void</span>* pArguments)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (thread)</span><br><span class="line">{</span><br><span class="line">mciSendString(<span class="string">"open ./Music/Get.wav alias BGM2"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">"play BGM2 wait"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">"close BGM2 "</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">thread = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (!threadend)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BGM_FAIL</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">mciSendString(<span class="string">"open ./Music/Gameover.wav alias BGM3"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">"play BGM3 wait"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">"close BGM3 "</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Duce</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) {</span><br><span class="line">p = <span class="number">1</span>;</span><br><span class="line">Sleep(<span class="number">300</span>);</span><br><span class="line">IMAGE one;<span class="comment">//定义一个图片名.</span></span><br><span class="line">loadimage(&amp;one, <span class="string">"Picture\\01.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;one);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line">Sleep(<span class="number">1500</span>);</span><br><span class="line">IMAGE two;<span class="comment">//定义一个图片名.</span></span><br><span class="line">loadimage(&amp;two, <span class="string">"Picture\\02.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;two);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line">Sleep(<span class="number">1500</span>);</span><br><span class="line">IMAGE three;</span><br><span class="line">loadimage(&amp;three, <span class="string">"Picture\\03.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;three);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line">Sleep(<span class="number">1400</span>);</span><br><span class="line">IMAGE four;</span><br><span class="line">loadimage(&amp;four, <span class="string">"Picture\\04.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;four);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line">Sleep(<span class="number">1500</span>);</span><br><span class="line">IMAGE five;</span><br><span class="line">loadimage(&amp;five, <span class="string">"Picture\\05.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;five);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line">Sleep(<span class="number">1400</span>);</span><br><span class="line">cleardevice();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Startmenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//Duce();</span></span><br><span class="line"><span class="keyword">while</span> (_kbhit())</span><br><span class="line">getchar();</span><br><span class="line">IMAGE welcome;</span><br><span class="line">loadimage(&amp;welcome, <span class="string">"Picture\\00.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;welcome);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (_getch() == <span class="number">13</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Snakeinit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">srand(GetTickCount());</span><br><span class="line">snake.color1 = RGB(<span class="number">0</span>, <span class="number">235</span>, <span class="number">229</span>);</span><br><span class="line">snake.size = <span class="number">4</span>;</span><br><span class="line">snake.speed = <span class="number">10</span>;</span><br><span class="line">snake.dir = PAUS;</span><br><span class="line"><span class="keyword">int</span> randomx = rand() % (lx - <span class="number">100</span>) + <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> randomy = rand() % (ly - <span class="number">100</span>) + <span class="number">50</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">{</span><br><span class="line">snake.coor[i].x = (randomx / <span class="number">10</span>) * <span class="number">10</span> - <span class="number">10</span> * i;<span class="comment">//（除10乘10类方格化处理）</span></span><br><span class="line">snake.coor[i].y = (randomy / <span class="number">10</span>) * <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foodinit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">food.flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!food.flag)</span><br><span class="line">{</span><br><span class="line">Generatefood();</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; snake.size; j++)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fabs</span>(snake.coor[j].x - food.x) &lt;= food.r &amp;&amp; <span class="built_in">fabs</span>(snake.coor[j].y - food.y) &lt;= food.r)</span><br><span class="line">Generatefood();</span><br><span class="line">food.flag = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">initgraph(lx, ly);<span class="comment">//初始化窗口，大小640*480,/*SHOWCONSOLE*/</span></span><br><span class="line">Snakeinit();<span class="comment">//蛇初始化</span></span><br><span class="line">Foodinit();<span class="comment">//食物初始化</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Drawframe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">setlinestyle(PS_SOLID, <span class="number">20</span>);</span><br><span class="line">setlinecolor(RGB(<span class="number">93</span>, <span class="number">107</span>, <span class="number">153</span>));</span><br><span class="line">rectangle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">640</span>, <span class="number">480</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Skinsystem</span><span class="params">(<span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">switch</span> (q)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//YES</span></span><br><span class="line"><span class="comment">//蛇头</span></span><br><span class="line">setfillcolor(RGB(<span class="number">93</span>, <span class="number">107</span>, <span class="number">153</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//蛇身</span></span><br><span class="line">setfillcolor(RGB(<span class="number">150</span>, <span class="number">157</span>, <span class="number">177</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//YES</span></span><br><span class="line"><span class="comment">//蛇头</span></span><br><span class="line">setfillcolor(RGB(<span class="number">186</span>, <span class="number">63</span>, <span class="number">110</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//蛇身</span></span><br><span class="line">setfillcolor(RGB(<span class="number">248</span>, <span class="number">237</span>, <span class="number">203</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//YES</span></span><br><span class="line">setfillcolor(RGB(<span class="number">127</span>, <span class="number">205</span>, <span class="number">238</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line">setfillcolor(RGB(<span class="number">244</span>, <span class="number">241</span>, <span class="number">236</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//YES</span></span><br><span class="line"><span class="comment">//蛇头</span></span><br><span class="line">setfillcolor(RGB(<span class="number">221</span>, <span class="number">192</span>, <span class="number">179</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//蛇身</span></span><br><span class="line">setfillcolor(RGB(<span class="number">244</span>, <span class="number">241</span>, <span class="number">236</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//YES</span></span><br><span class="line">setfillcolor(RGB(<span class="number">113</span>, <span class="number">111</span>, <span class="number">114</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line">setfillcolor(RGB(<span class="number">244</span>, <span class="number">241</span>, <span class="number">236</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//蛇头</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//YES</span></span><br><span class="line">setfillcolor(RGB(<span class="number">206</span>, <span class="number">124</span>, <span class="number">128</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//蛇身</span></span><br><span class="line">setfillcolor(RGB(<span class="number">170</span>, <span class="number">175</span>, <span class="number">231</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:<span class="comment">//YES</span></span><br><span class="line">setfillcolor(RGB(<span class="number">223</span>, <span class="number">165</span>, <span class="number">161</span>));</span><br><span class="line">solidcircle(snake.coor[<span class="number">0</span>].x, snake.coor[<span class="number">0</span>].y, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//蛇身</span></span><br><span class="line">setfillcolor(RGB(<span class="number">123</span>, <span class="number">130</span>, <span class="number">184</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= snake.size - <span class="number">1</span>; i++)</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SupDrawsnake</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">7</span>)</span><br><span class="line">{</span><br><span class="line">Skinsystem(i);</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">Skinsystem(<span class="number">1</span>);</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Drawsnake</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">7</span>)</span><br><span class="line">Skinsystem(i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">Skinsystem(<span class="number">1</span>);</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Drawfood</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">srand(GetTickCount());</span><br><span class="line"><span class="keyword">if</span> (food.flag)</span><br><span class="line">{</span><br><span class="line">setfillcolor(RGB(rand() % <span class="number">256</span>, rand() % <span class="number">256</span>, rand() % <span class="number">256</span>));</span><br><span class="line">solidcircle(food.x, food.y, food.r);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Draw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cleardevice();</span><br><span class="line">BeginBatchDraw();<span class="comment">//双缓冲绘图</span></span><br><span class="line">setbkcolor(RGB(<span class="number">204</span>, <span class="number">213</span>, <span class="number">240</span>));<span class="comment">//背景色</span></span><br><span class="line">cleardevice();<span class="comment">//清空绘图设备</span></span><br><span class="line">Drawframe();<span class="comment">//画边框</span></span><br><span class="line"><span class="comment">//画蛇(两种模式)</span></span><br><span class="line"><span class="keyword">if</span> (ans % Sup == <span class="number">0</span> &amp;&amp; ans &gt;= <span class="number">1</span>)</span><br><span class="line">SupDrawsnake();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Drawsnake();</span><br><span class="line">Drawfood();<span class="comment">//画食物</span></span><br><span class="line">EndBatchDraw();<span class="comment">//双缓冲绘图结束</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Firstcontrol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">switch</span> (_getch())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="string">'W'</span>:</span><br><span class="line"><span class="keyword">case</span><span class="number">'</span>w<span class="number">'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">72</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != DOWN)</span><br><span class="line">snake.dir = UP;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'S'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != UP)</span><br><span class="line">snake.dir = DOWN;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">75</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != RIGHT)</span><br><span class="line">snake.dir = LEFT;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">77</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != LEFT)</span><br><span class="line">snake.dir = RIGHT;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">Firstcontrol();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Keycontrol</span><span class="params">()</span><span class="comment">//按键控制</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (_kbhit())</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> key = _getch();</span><br><span class="line"><span class="comment">//72,80,75,77</span></span><br><span class="line"><span class="keyword">switch</span> (key)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="string">'W'</span>:<span class="comment">//上</span></span><br><span class="line"><span class="keyword">case</span><span class="number">'</span>w<span class="number">'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">72</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != DOWN)</span><br><span class="line">snake.dir = UP;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'S'</span>:<span class="comment">//下</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != UP)</span><br><span class="line">snake.dir = DOWN;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:<span class="comment">//左</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">75</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != RIGHT)</span><br><span class="line">snake.dir = LEFT;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'D'</span>:<span class="comment">//右</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">77</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != LEFT)</span><br><span class="line">snake.dir = RIGHT;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Snakemove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = snake.size - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">snake.coor[i] = snake.coor[i - <span class="number">1</span>];</span><br><span class="line">Keycontrol();</span><br><span class="line"><span class="keyword">switch</span> (snake.dir)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> UP:</span><br><span class="line">snake.coor[<span class="number">0</span>].y -= snake.speed;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DOWN:</span><br><span class="line">snake.coor[<span class="number">0</span>].y += snake.speed;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> LEFT:</span><br><span class="line">snake.coor[<span class="number">0</span>].x -= snake.speed;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> RIGHT:</span><br><span class="line">snake.coor[<span class="number">0</span>].x += snake.speed;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PAUS:</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eatfood</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (food.flag &amp;&amp; <span class="built_in">fabs</span>(snake.coor[<span class="number">0</span>].x - food.x) &lt;= food.r &amp;&amp; <span class="built_in">fabs</span>(snake.coor[<span class="number">0</span>].y - food.y) &lt;= food.r)</span><br><span class="line">{</span><br><span class="line">thread = <span class="number">1</span>;<span class="comment">//多线程开始执行</span></span><br><span class="line">i++;</span><br><span class="line">ans++;</span><br><span class="line">snake.color1 = food.color;</span><br><span class="line"><span class="keyword">if</span> (speed &gt; <span class="number">60</span>)</span><br><span class="line">speed -= <span class="number">0.05</span>;</span><br><span class="line">food.flag = <span class="literal">false</span>;</span><br><span class="line">mark += food.r*<span class="number">2</span>/<span class="number">3</span>;</span><br><span class="line">snake.size += food.r*<span class="number">2</span>/<span class="number">3</span>;</span><br><span class="line"><span class="comment">//显示分数</span></span><br><span class="line">settextstyle(<span class="number">25</span>, <span class="number">0</span>, <span class="string">"微软雅黑"</span>);</span><br><span class="line">settextcolor(COLORREF RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">sprintf_s(s, <span class="string">"%d"</span>, mark);</span><br><span class="line">outtextxy(food.x, food.y, s);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">while</span> (!food.flag)</span><br><span class="line">{</span><br><span class="line">Generatefood();</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; snake.size; j++)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fabs</span>(snake.coor[j].x - food.x) &lt;= food.r &amp;&amp; <span class="built_in">fabs</span>(snake.coor[j].y - food.y) &lt;= food.r)</span><br><span class="line">Generatefood();</span><br><span class="line">food.flag = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Generatefood</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">srand(GetTickCount());</span><br><span class="line">food.x = <span class="number">10</span> + (rand() % <span class="number">60</span> + <span class="number">1</span>) * <span class="number">10</span>;</span><br><span class="line">food.y = <span class="number">10</span> + (rand() % <span class="number">44</span> + <span class="number">1</span>) * <span class="number">10</span>;</span><br><span class="line">food.color = RGB(rand() % <span class="number">256</span>, rand() % <span class="number">256</span>, rand() % <span class="number">256</span>);</span><br><span class="line">food.r = rand() % <span class="number">6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Eatself</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; snake.size; j++)</span><br><span class="line"><span class="keyword">if</span> (snake.coor[j].x == snake.coor[<span class="number">0</span>].x &amp;&amp; snake.coor[j].y == snake.coor[<span class="number">0</span>].y)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Snakebump</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (snake.coor[<span class="number">0</span>].x &lt;= k || snake.coor[<span class="number">0</span>].x &gt;= lx - k || snake.coor[<span class="number">0</span>].y &lt;= k || snake.coor[<span class="number">0</span>].y &gt;= ly - k)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Overmenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE Game_over;<span class="comment">//定义一个图片名.</span></span><br><span class="line">loadimage(&amp;Game_over, <span class="string">"Picture\\game_over.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;Game_over);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (_getch() == <span class="string">'\x0d'</span>)<span class="comment">//回车</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//统计信息</span></span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">"楷体"</span>);</span><br><span class="line">settextcolor(COLORREF RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">outtextxy(<span class="number">220</span>, <span class="number">100</span>, <span class="string">"GAME OVER"</span>);</span><br><span class="line">sprintf_s(s, <span class="string">"%d"</span>, mark);</span><br><span class="line">outtextxy(<span class="number">220</span>, <span class="number">150</span>, <span class="string">"你的分数为"</span>);</span><br><span class="line">outtextxy(<span class="number">380</span>, <span class="number">150</span>, s);</span><br><span class="line">outtextxy(<span class="number">220</span>, <span class="number">200</span>, <span class="string">"按Enter重新游戏  "</span>);</span><br><span class="line">outtextxy(<span class="number">220</span>, <span class="number">250</span>, <span class="string">"按Esc退出游戏  "</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thank</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">IMAGE thank;<span class="comment">//定义一个图片名.</span></span><br><span class="line">loadimage(&amp;thank, <span class="string">"Picture\\06.png"</span>, lx, ly, <span class="number">1</span>);<span class="comment">//从图片文件获取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;thank);<span class="comment">//绘制图像到屏幕，图片左上角坐标为(0,0)</span></span><br><span class="line">Sleep(<span class="number">4000</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"感谢您的陪伴！\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"您的分数是:   %d  分\n"</span>, mark);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"游戏开发者:\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"桃花涣小鱼干\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= snake.size; i++)</span><br><span class="line">snake.coor[i].x = snake.coor[i].y = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">keybd_event(<span class="number">0x10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">keybd_event(<span class="number">0x10</span>, <span class="number">0</span>, KEYEVENTF_KEYUP, <span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="感谢名录"><code>感谢名录</code></h2><p><font size="5" color="#D1DAF2"><strong>Do_r</strong></font></p><p><font size="5" color="#0E0E0E"><strong>Jake</strong></font></p><p><font size="5" color="#007CFF"><strong>Mine</strong></font></p><p><font size="5" color="#9D87D2"><strong>Paraboy</strong></font></p><p><font size="5" color="#8FD1EC"><strong>Tremor.</strong></font></p><p><font size="5" color="#B884F2"><strong>Yeyu</strong></font></p><p><font size="5" color="#8FD1EC"><strong>沫殇心</strong></font></p><h2 id="感谢陪伴！"><code>感谢陪伴！</code></h2><h1><code>END</code></h1>]]></content>
      
      
      <categories>
          
          <category> S_实践项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> Easyx </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/2021/09/16/B_%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/"/>
      <url>/2021/09/16/B_%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/</url>
      
        <content type="html"><![CDATA[<h1><code>输入输出</code></h1><h2 id="Hello-World"><code>Hello World</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span><span class="comment">//i:输入o:输出stream:流</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//使用标准命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"Hello World"</span> &lt;&lt; endl;<span class="comment">//endl结束输入并回车</span></span><br><span class="line">cout &lt;&lt; endl;<span class="comment">//一个 &lt;&lt; 对应一个输出内容</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="IO-整数"><code>IO(整数)</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span><span class="comment">//i:输入o:输出stream:流</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//使用标准命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">cout &lt;&lt; a &lt;&lt;<span class="string">' '</span>&lt;&lt; b;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="IO-字符"><code>IO(字符)</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span><span class="comment">//i:输入o:输出stream:流</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//使用标准命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">char</span> a,b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;<span class="comment">//输入时加不加空格都可以(空格不会读入)</span></span><br><span class="line">cout &lt;&lt; a &lt;&lt;<span class="string">' '</span>&lt;&lt; b;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="IO-字符串"><code>IO(字符串)</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span><span class="comment">//i:输入o:输出stream:流</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//使用标准命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">string ch1,ch2;</span><br><span class="line">cin &gt;&gt; ch1 &gt;&gt; ch2;</span><br><span class="line">cout &lt;&lt; ch1 &lt;&lt;<span class="string">' '</span>&lt;&lt; ch2;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//cin遇到空格、Tab、回车时均会停止读取</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="IO-混合型"><code>IO(混合型)</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span><span class="comment">//i:输入o:输出stream:流</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//使用标准命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">string ch;</span><br><span class="line"><span class="keyword">double</span> m;</span><br><span class="line">cin &gt;&gt; ch &gt;&gt; m;</span><br><span class="line">cout &lt;&lt; ch &lt;&lt; <span class="string">' '</span> &lt;&lt; m &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="精度控制"><code>精度控制</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span><span class="comment">//i:输入o:输出stream:流</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span><span class="comment">//格式控制！！！</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//使用标准命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">double</span> PI=<span class="number">3.1415926535897</span>;</span><br><span class="line">cout &lt;&lt; PI &lt;&lt; endl;<span class="comment">//cout默认输出6位(包含整数位)</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>) &lt;&lt; PI;<span class="comment">//设置精度为 10(输出10位)</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="输出当前精度"><code>输出当前精度</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cout.precision()当前精度大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span><span class="comment">//i:输入o:输出stream:流</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span><span class="comment">//格式控制！！！</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//使用标准命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">double</span> PI=<span class="number">3.1415926535897</span>;</span><br><span class="line">cout &lt;&lt; PI &lt;&lt; endl;<span class="comment">//cout默认输出6位(包含整数位)</span></span><br><span class="line">cout &lt;&lt; cout.<span class="built_in">precision</span>()&lt;&lt;endl;<span class="comment">//精度为 6</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>) &lt;&lt; PI&lt;&lt;endl;<span class="comment">//设置精度为 10(输出10位)</span></span><br><span class="line">cout &lt;&lt; cout.<span class="built_in">precision</span>();<span class="comment">//精度为 10</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="设置小数点后精度-定点输出"><code>设置小数点后精度(定点输出)</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cout.precision()当前精度大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span><span class="comment">//i:输入o:输出stream:流</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span><span class="comment">//格式控制！！！</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//使用标准命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">double</span> PI = <span class="number">3.1415926535897</span>;</span><br><span class="line">cout &lt;&lt; fixed;<span class="comment">//定点输出(即小数点前固定不变)</span></span><br><span class="line">cout &lt;&lt; PI &lt;&lt; endl;<span class="comment">//cout默认输出6位</span></span><br><span class="line">cout &lt;&lt; cout.<span class="built_in">precision</span>() &lt;&lt; endl;<span class="comment">//精度为 6</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>) &lt;&lt; PI &lt;&lt; endl;<span class="comment">//设置精度为 10</span></span><br><span class="line">cout &lt;&lt; cout.<span class="built_in">precision</span>();<span class="comment">//精度为 10</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="设置域宽"><code>设置域宽</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cout.width()当前域宽的大小</span></span><br><span class="line"><span class="comment">//setfill()设置填充值，作用效果=1</span></span><br><span class="line"><span class="comment">//setw()设置域宽(默认为0、右对齐,作用效果=1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span><span class="comment">//i:输入o:输出stream:流</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span><span class="comment">//格式控制！！！</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//使用标准命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">double</span> PI=<span class="number">3.14</span>;</span><br><span class="line">cout &lt;&lt; cout.<span class="built_in">width</span>()&lt;&lt;endl;<span class="comment">//输出当前域宽</span></span><br><span class="line">cout &lt;&lt; PI&lt;&lt;endl;<span class="comment">//输出PI</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>)&lt;&lt;PI &lt;&lt; endl;<span class="comment">//设置域宽为6并输出</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setfill</span>(<span class="string">'*'</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>)&lt;&lt; PI &lt;&lt; endl;<span class="comment">//设置填充值和域宽并输出</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="左对齐"><code>左对齐</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cout &lt;&lt; left</span></span><br><span class="line"><span class="comment">//对其以后的cout统一左对齐输出</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span><span class="comment">//i:输入o:输出stream:流</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span><span class="comment">//格式控制！！！</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//使用标准命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line">cout &lt;&lt; cout.<span class="built_in">width</span>() &lt;&lt; endl;<span class="comment">//输出当前域宽</span></span><br><span class="line">cout &lt;&lt; PI &lt;&lt; endl;<span class="comment">//输出PI</span></span><br><span class="line">cout &lt;&lt; left;<span class="comment">//设置左对齐</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>) &lt;&lt; PI &lt;&lt; endl;<span class="comment">//设置域宽为6并输出</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setfill</span>(<span class="string">'*'</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>) &lt;&lt; PI &lt;&lt; endl;<span class="comment">//设置填充值和域宽并输出</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="大佬的博客-CSDN"><strong><a href="https://blog.csdn.net/long0801/article/details/76643278?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=C++%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-6-.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187">大佬的博客 CSDN</a></strong></h2><h1><code>函数高级</code></h1><h2 id="默认参数"><code>默认参数</code></h2><p><strong>错误示范</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b=<span class="number">12</span>, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; a + b + c &lt;&lt; endl;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Note：b有了默认参数以后，后面的也必须有默认参数</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a = <span class="number">10</span>, <span class="keyword">int</span> b=<span class="number">90</span>, <span class="keyword">int</span> c=<span class="number">78</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">fun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; a + b + c &lt;&lt; endl;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Note：声明和实现只能有一个带默认参数</strong></p><h2 id="函数重载"><code>函数重载</code></h2><p><strong>01.函数名相同</strong></p><p><strong>02.同一作用域</strong></p><p><strong>03.函数参数类型、个数或顺序不同</strong></p><p><strong>Note：函数返回值不可作为函数重载的条件</strong></p><h1><code>对象特征</code></h1><h2 id="类对象作为类成员"><code>类对象作为类成员</code></h2><p><strong>内部其他类先有，自身再有，析构相反</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> aa;</span><br><span class="line"><span class="built_in">A</span>(<span class="keyword">int</span> ta) :<span class="built_in">aa</span>(ta) {}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> bb;</span><br><span class="line">A a;</span><br><span class="line"><span class="comment">//A a=n(隐式类型转换，基本类型—&gt;定义类)</span></span><br><span class="line"><span class="built_in">B</span>(<span class="keyword">int</span> m, <span class="keyword">int</span> n) :<span class="built_in">bb</span>(m), <span class="built_in">a</span>(n){}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="function">B <span class="title">b</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="静态成员"><code>静态成员</code></h2><h3 id="变量"><code>变量</code></h3><p><strong>静态变量：储存于全局数据区域的局部变量，效果和全局变量有一拼</strong></p><p><strong>01.默认赋值</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a ;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出结果：0（static变量编译器默认赋值为0）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"string: (begin)%s(end)\n"</span>, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出结果：string: (begin)(end)</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a=<span class="number">1</span> ;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">a++;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2（第二次static int a = 1 失去作用，始终只有一个a）</span></span><br></pre></td></tr></tbody></table></figure><p><strong>可以看出来这个a是在两个f（）中共同使用，不会因为重新声明而覆盖掉，也不会在第一次f（）函数结束时释放掉，static 变量适用于多模块编程，可以将static型变量理解为<code>声明在局部区域的全局变量，但其全局性也只对该局部区域开放</code>。例如上述例子中a对两个f（）函数的区域都开放，若不是同一个局部区域，则无效，例子如下：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">a++;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">a++;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line"><span class="built_in">p</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">//f()中的a的局部全局性在f（）内部</span></span><br><span class="line"><span class="comment">//p()中的a的局部全局性在p（）内部</span></span><br><span class="line"><span class="comment">//上述两个a具有不同的局部全局性</span></span><br></pre></td></tr></tbody></table></figure><p><strong>和全局变量比起来，static可以控制变量的可见范围（隐藏），即局部全局性</strong></p><p><strong>一、 static全局变量与普通的全局变量有什么区别 ?<br>全局变量(外部变量)的说明之前再冠以static 就构成了静态的全局变量。<br>全局变量本身就是静态存储方式， 静态全局变量当然也是静态存储方式。 这两者在<code>存储方式</code>上并无不同。<br>这两者的区别在于非静态全局变量的<code>作用域</code>是整个<code>源程序</code>， 当一个源程序由多个源文件组成时，非静态的全局变量在<code>各个源文件</code>中都是有效的。 而静态全局变量则限制了其作用域， 即只在<code>定义该变量的源文件内</code>有效， 在同一源程序的其它源文件中不能使用它。由于静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用，因此可以避免在其它源文件中引起错误。<br>static全局变量只初使化一次，防止在其他文件单元中被引用;<br>二、static局部变量和普通局部变量有什么区别 ？<br>把局部变量改变为静态变量后是改变了它的<code>存储方式</code>即改变了它的<code>生存期</code>。把全局变量改变为静态变量后是改变了它的<code>作用域</code>，限制了它的使用范围。      static局部变量只被初始化一次，下一次依据上一次结果值；<br>三、static函数与普通函数有什么区别？<br>static函数与普通函数作用域不同,仅在本文件。只在当前源文件中使用的函数应该说明为内部函数(static修饰的函数)，内部函数应该在当前源文件中说明和定义。对于可在当前源文件以外使用的函数，应该在一个头文件中说明，要使用这些函数的源文件要包含这个头文件.<br>static函数在内存中只有一份，普通函数在每个被调用中维持一份拷贝。<br>四、static的三条重要作用，首先static的最主要功能是隐藏，其次因为static变量存放在静态存储区，所以它具备持久性和默认值0。</strong></p><p><strong>02.类内静态变量</strong></p><p><strong>类内声明、类外初始化</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> A::a = <span class="number">100</span>;<span class="comment">//类型、作用域、名</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Commodity</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Commodity</span>(string n=<span class="string">"xxx"</span>,<span class="keyword">int</span> q=<span class="number">0</span>,<span class="keyword">double</span> p=<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">num = n;</span><br><span class="line">quantity = q;</span><br><span class="line">price = p;</span><br><span class="line">}</span><br><span class="line">~<span class="built_in">Commodity</span>() {};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">total</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">double</span> discount = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (quantity &gt; <span class="number">10</span>)</span><br><span class="line">discount = <span class="number">0.98</span>;</span><br><span class="line">n += quantity;</span><br><span class="line">sum += price * quantity * discount * <span class="keyword">this</span>-&gt;discount;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">average</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> sum / n;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"总个数："</span> &lt;&lt; n &lt;&lt; endl &lt;&lt; <span class="string">"总售价："</span></span><br><span class="line">&lt;&lt; sum &lt;&lt; endl &lt;&lt; <span class="string">"平均售价："</span> &lt;&lt; <span class="built_in">average</span>();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string num;<span class="comment">//编号</span></span><br><span class="line"><span class="keyword">int</span> quantity;<span class="comment">//数量</span></span><br><span class="line"><span class="keyword">double</span> price;<span class="comment">//单价</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> sum;<span class="comment">//总售价</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> discount;<span class="comment">//折扣</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> n;<span class="comment">//总销售量</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">double</span> Commodity::sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> Commodity::discount = <span class="number">0.85</span>;</span><br><span class="line"><span class="keyword">int</span> Commodity::n = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Commodity commo[<span class="number">3</span>] =</span><br><span class="line">{</span><br><span class="line"><span class="built_in">Commodity</span>(<span class="string">"101"</span>,<span class="number">5</span>,<span class="number">23.5</span>),<span class="built_in">Commodity</span>(<span class="string">"102"</span>,<span class="number">12</span>,<span class="number">24.56</span>),<span class="built_in">Commodity</span>(<span class="string">"103"</span>,<span class="number">100</span>,<span class="number">21.5</span>)</span><br><span class="line">};</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">commo[i].<span class="built_in">total</span>();</span><br><span class="line">Commodity::<span class="built_in">display</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Note：简单而言就是三个售货员共用同一组sum、discount、n</strong></p><h3 id="函数"><code>函数</code></h3><h1><code>友元</code></h1><p><strong>01.友元使原本不可访问的成员能够访问，破坏了数据的隐藏性</strong></p><h2 id="全局函数"><code>全局函数</code></h2><p><strong>复制加分号，放到最上方，加 friend</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(A&amp; a)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(string n)</span><br><span class="line">{</span><br><span class="line">name = n;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(A&amp; a)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; a.name;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="function">A <span class="title">a</span><span class="params">(<span class="string">"张三"</span>)</span></span>;</span><br><span class="line"><span class="built_in">get</span>(a);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="友元类"><code>友元类</code></h2><p><strong>同上</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(string n)</span><br><span class="line">{</span><br><span class="line">name = n;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(A&amp; a)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; a.name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="function">A <span class="title">a</span><span class="params">(<span class="string">"张三"</span>)</span></span>;</span><br><span class="line">B b;</span><br><span class="line">b.<span class="built_in">func</span>(a);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="成员函数（待）"><code>成员函数（待）</code></h2><h1><code>运算符重载</code></h1><p><strong>01.实现自定义数据类型的运算</strong></p><p><strong>02.不是所有的运算符都可以重载</strong></p><p><strong>03.'&gt;&gt;‘和’&lt;&lt;'只能被友元函数重载（猜测：因为要连续输出）</strong></p><h2 id="成员函数重载"><code>成员函数重载</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">Student</span>(string n=<span class="string">"x"</span>, <span class="keyword">double</span> s=<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">name = n;</span><br><span class="line">score = s;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//重载 &gt;</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(Student&amp; t)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;score &gt; t.score ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//重载 =</span></span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>=(Student&amp; t)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">this</span>-&gt;name = t.name;</span><br><span class="line"><span class="keyword">this</span>-&gt;score = t.score;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//showStudent</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; name &lt;&lt; <span class="string">' '</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">double</span> score;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortStudent</span><span class="params">(vector&lt;Student&gt;&amp; t)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Student tt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=t.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (t[j] &gt; t[j + <span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line">tt = t[j];</span><br><span class="line">t[j] = t[j + <span class="number">1</span>];</span><br><span class="line">t[j + <span class="number">1</span>] = tt;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(vector&lt;Student&gt;&amp; t)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); i++)</span><br><span class="line">t[i].<span class="built_in">showStudent</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Student.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">vector&lt;Student&gt; a;</span><br><span class="line">cout &lt;&lt; <span class="string">"请输入 Name AND Score、输入0 0则退出输入\n"</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">double</span> score;</span><br><span class="line">cin &gt;&gt; name &gt;&gt; score;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="string">"0"</span> &amp;&amp; score == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="function">Student <span class="title">t</span><span class="params">(name, score)</span></span>;</span><br><span class="line">a.<span class="built_in">push_back</span>(t);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">sortStudent</span>(a);</span><br><span class="line"><span class="built_in">show</span>(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="友元函数重载（待）"><code>友元函数重载（待）</code></h2><h1><code>继承</code></h1><h2 id="构造和析构顺序"><code>构造和析构顺序</code></h2><p><strong>先构造后析构（先进后出）</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>() </span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"A"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">~<span class="built_in">A</span>() { cout &lt;&lt; <span class="string">"A析构"</span> &lt;&lt; endl; };</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"B"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">~<span class="built_in">B</span>() { cout &lt;&lt; <span class="string">"B析构"</span> &lt;&lt; endl; };</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> B</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">C</span>()</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"C"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">~<span class="built_in">C</span>() { cout &lt;&lt; <span class="string">"C析构"</span> &lt;&lt; endl; };</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">C c;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//结果如下</span></span><br><span class="line"><span class="comment">//A</span></span><br><span class="line"><span class="comment">//B</span></span><br><span class="line"><span class="comment">//C</span></span><br><span class="line"><span class="comment">//C析构</span></span><br><span class="line"><span class="comment">//B析构</span></span><br><span class="line"><span class="comment">//A析构</span></span><br></pre></td></tr></tbody></table></figure><h2 id="6派生类构造函数">6<code>派生类构造函数</code></h2><p><strong>01.如果被派生的类无构造函数，那系统自动分配默认构造函数,子类的构造时不用再去赋值基类，系统分配默认构造函数自动为其赋值</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> z;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="keyword">int</span> c) :<span class="built_in">z</span>(c) {}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{ cout &lt;&lt;z; }</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="function">B <span class="title">b</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">b.<span class="built_in">show</span>();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>02.主类拥有构造函数时，系统不在分配默认构造函数，子类的构造函数必须使用基类的构造函数为主类赋值，否者报错！！！</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="keyword">int</span> n, <span class="keyword">int</span> m) :<span class="built_in">x</span>(n), <span class="built_in">y</span>(m) {}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> z;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c) :<span class="built_in">A</span>(a,b),<span class="built_in">z</span>(c) {}<span class="comment">//a,b虽继承，但B不能访问a,b，所以使用基类构造函数对a,b初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{ cout &lt;&lt;z; }</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="function">B <span class="title">b</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">b.<span class="built_in">show</span>();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Sum：基类的公有成员成为派生类的公有成员，基类的私有部分也成为派生类的一部分，但只能通过基类的公有和保护方法访问。<br>派生类需要自己的构造函数，派生类不能访问基类的私有数据，所以派生类构造函数要调用基类构造函数来初始化基类的私有数据。基类对象应在程序进入派生类构造函数前被创建，用初始化列表实现。</strong></p><h2 id="同名成员处理"><code>同名成员处理</code></h2><h3 id="成员属性"><code>成员属性</code></h3><p><strong>01.自己的直接用</strong></p><p><strong>02.基类的加作用域</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">{</span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">{</span><br><span class="line">a = <span class="number">200</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">B b;</span><br><span class="line">cout &lt;&lt; b.a&lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; b.A::a &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="成员函数"><code>成员函数</code></h3><p><strong>01.自己的直接用</strong></p><p><strong>02.基类的加作用域</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"A-fun()"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; t &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"B-fun()"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">B b;</span><br><span class="line">b.<span class="built_in">fun</span>();</span><br><span class="line">b.A::<span class="built_in">fun</span>();</span><br><span class="line">b.A::<span class="built_in">fun</span>(<span class="number">100</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="同名静态成员处理"><code>同名静态成员处理</code></h2><h3 id="静态成员属性"><code>静态成员属性</code></h3><p><strong>自己的直接用，父类的加作用域</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> A::a = <span class="number">100</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> B::a = <span class="number">200</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">B b;</span><br><span class="line">cout &lt;&lt; b.a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; b.A::a &lt;&lt; endl;</span><br><span class="line"><span class="comment">//通过类名来访问</span></span><br><span class="line">cout &lt;&lt; B::a&lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; B::A::a &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="静态成员函数"><code>静态成员函数</code></h3><p><strong>自己的直接用，父类的加作用域</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"A-func()"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"B-func()"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">B b;</span><br><span class="line">b.<span class="built_in">func</span>();</span><br><span class="line">b.A::<span class="built_in">func</span>();</span><br><span class="line"><span class="comment">//通过类名访问</span></span><br><span class="line">B::<span class="built_in">func</span>();</span><br><span class="line">B::A::<span class="built_in">func</span>();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="多继承语法"><code>多继承语法</code></h2><p><strong>加对应作用域即可</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">{</span><br><span class="line">t = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">{</span><br><span class="line">t = <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A,<span class="keyword">public</span> B</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">C</span>()</span><br><span class="line">{</span><br><span class="line">t = <span class="number">3</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">C c;</span><br><span class="line">cout &lt;&lt; c.t &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; c.B::t &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; c.A::t &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="菱形继承"><code>菱形继承</code></h2><p><strong>问题：多份继承，资源浪费,实例如下：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//动物</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">};</span><br><span class="line"><span class="comment">//羊</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span>:</span><span class="keyword">public</span> Animal</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="comment">//驼</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuo</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="comment">//羊驼</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SheepTuo</span> :</span><span class="keyword">public</span> Sheep, <span class="keyword">public</span> Tuo</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">SheepTuo sp;</span><br><span class="line"><span class="comment">//继承两个age,资源浪费</span></span><br><span class="line">sp.Sheep::age = <span class="number">1</span>;</span><br><span class="line">sp.Tuo::age = <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>解决方案：使用虚继承，基类变成虚基类，多继承时自动合并，相当于直接从基类继承。</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//动物</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">};</span><br><span class="line"><span class="comment">//羊</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="comment">//驼</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuo</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="comment">//羊驼</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SheepTuo</span> :</span><span class="keyword">public</span> Sheep, <span class="keyword">public</span> Tuo</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">SheepTuo sp;</span><br><span class="line">sp.age = <span class="number">18</span>;<span class="comment">//直接访问</span></span><br><span class="line">sp.Sheep::age = <span class="number">1</span>;<span class="comment">//通过内部virtual base pointer找到从Animal中继承的age</span></span><br><span class="line">sp.Tuo::age = <span class="number">2</span>;<span class="comment">//通过内部virtual base pointer找到从Animal中继承的age</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>多态</code></h1><h2 id="基本概念"><code>基本概念</code></h2><p><strong>条件：</strong></p><p><strong>01.有继承关系</strong></p><p><strong>02.子类重写（除了{}内其他完全相同）父类虚函数，重写时virtual可不写</strong></p><p><strong>使用方法：</strong></p><p><strong>父类指针或引用执行子类对象，例子如下</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="keyword">virtual</span> <span class="title">func</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"动物在说话"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span><span class="keyword">public</span> Animal</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"猫在说话"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"狗在说话"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSpeak</span><span class="params">(Animal&amp; a)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">a.<span class="built_in">func</span>();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Dog a;</span><br><span class="line"><span class="built_in">doSpeak</span>(a);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="底层原理"><code>底层原理</code></h2><p><strong>虚函数定义后实际上保留的是一个指向函数的指针，子类继承后如果重写父类虚函数，那么原来的指针会被子类的指针替换掉。在调用时父类指针或引用的地址由重写的虚函数来确认，不同的继承类虚函数，运行不同的重写函数，可以拥有多种运行状态，即：多态性、简单理解可以认为是基类虚函数可以被子类虚函数覆盖掉。</strong></p><h2 id="计算器类"><code>计算器类</code></h2><p><strong>普通写法</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">(<span class="keyword">char</span> oper)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (oper == <span class="string">'+'</span>)</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line"><span class="keyword">if</span> (oper == <span class="string">'-'</span>)</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line"><span class="keyword">if</span> (oper == <span class="string">'*'</span>)</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Calculator c;</span><br><span class="line">c.a = <span class="number">1</span>;</span><br><span class="line">c.b = <span class="number">2</span>;</span><br><span class="line">cout &lt;&lt; c.<span class="built_in">getResult</span>(<span class="string">'*'</span>) &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>多态写法</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MUL</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CU</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">AbstractCalculator* ac = <span class="keyword">new</span> Add;</span><br><span class="line">ac-&gt;a = <span class="number">1</span>;</span><br><span class="line">ac-&gt;b = <span class="number">2</span>;</span><br><span class="line">cout &lt;&lt; ac-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> ac;</span><br><span class="line">ac = <span class="keyword">new</span> Sub;</span><br><span class="line">ac-&gt;a = <span class="number">1</span>;</span><br><span class="line">ac-&gt;b = <span class="number">2</span>;</span><br><span class="line">cout &lt;&lt; ac-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> ac;</span><br><span class="line">ac = <span class="keyword">new</span> MUL;</span><br><span class="line">ac-&gt;a = <span class="number">1</span>;</span><br><span class="line">ac-&gt;b = <span class="number">2</span>;</span><br><span class="line">cout &lt;&lt; ac-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> ac;</span><br><span class="line">ac = <span class="keyword">new</span> CU;</span><br><span class="line">ac-&gt;a = <span class="number">1</span>;</span><br><span class="line">ac-&gt;b = <span class="number">2</span>;</span><br><span class="line">cout &lt;&lt; ac-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> ac;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="纯虚函数和抽象类"><code>纯虚函数和抽象类</code></h2><p><strong>来源：父类的虚函数的实现是无意义的，主要都是调用子类重写的内容，因此可以将虚函数改为纯虚函数。</strong></p><p><strong>一个拥有纯虚函数的类也称为抽象类。</strong></p><p><strong>语法：纯虚函数的基础上加一个=0</strong></p><p><strong>特点：无法实体化对象，子类必须重写基类的纯虚函数，否者也是抽象类。</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无法实例化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//纯虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Base b;</span><br><span class="line"><span class="keyword">new</span> Base;</span><br><span class="line">    <span class="comment">//报错</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子类未重写也无法实例化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//纯虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Son s;<span class="comment">//报错</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确写法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//纯虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"hahaha"</span>;</span><br><span class="line">};<span class="comment">//';'和上面的';'一致</span></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Base *b = <span class="keyword">new</span> Son;</span><br><span class="line">b-&gt;<span class="built_in">func</span>();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="56-59"><code>56-59</code></h2><h1><code>文件操作</code></h1><p><strong>头文件：fstream</strong></p><p><strong>文件分类：文本文件（ASCII）、二进制文件（01）</strong></p><p><strong>打开方式：</strong></p><p><strong>ios::in(文件读入、读)</strong></p><p><strong>ios::out(输出到文件、写)</strong></p><p><strong>ios::app(追加方式写文件Append)</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//写</span></span><br><span class="line">ofstream ofs;</span><br><span class="line"></span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">"text.txt"</span>, ios::out);<span class="comment">//会覆盖</span></span><br><span class="line">ofs &lt;&lt; <span class="string">"张三"</span> &lt;&lt; endl;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">"text.txt"</span>, ios::app);<span class="comment">//不会覆盖(追加)</span></span><br><span class="line">ofs &lt;&lt; <span class="string">"张三"</span> &lt;&lt; endl;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//读</span></span><br><span class="line">ifstream ifs;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">"text.txt"</span>, ios::in);</span><br><span class="line">string s;</span><br><span class="line">ifs &gt;&gt; s;</span><br><span class="line">cout &lt;&lt; s;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>模板</code></h1><p><strong>Note：模板只是一个框架，且不是万能的</strong></p><h2 id="函数模板"><code>函数模板</code></h2><p><strong>基本用法</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="comment">//template &lt;class T&gt;也可以</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">T temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">mySwap</span>(a, b);<span class="comment">//自动类型推导</span></span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">" "</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="keyword">double</span> c = <span class="number">1.1</span>, d = <span class="number">2.2</span>;</span><br><span class="line">mySwap&lt;<span class="keyword">double</span>&gt;(c, d);<span class="comment">//显示指定类型</span></span><br><span class="line">cout &lt;&lt; c &lt;&lt; <span class="string">" "</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">string e, f;</span><br><span class="line">e = <span class="string">"哈哈"</span>;</span><br><span class="line">f = <span class="string">"嘿嘿"</span>;</span><br><span class="line"><span class="built_in">mySwap</span>(e, f);</span><br><span class="line">cout &lt;&lt; e &lt;&lt; <span class="string">" "</span> &lt;&lt; f &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>注意事项</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">T temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> c=<span class="string">'c'</span>;</span><br><span class="line"><span class="built_in">mySwap</span>(a, c);<span class="comment">//自动类型推导</span></span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">" "</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//类型不一致导致错误</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"fun被调用"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">fun&lt;<span class="keyword">int</span>&gt;();<span class="comment">//未用到T时必须指明类型(也可用来强制类型转化)</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>一个模板对应一个函数！！！！</strong></p><p><strong>排序函数模板</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">T temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySort</span><span class="params">(T a[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> k = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (a[j] &lt; a[k])</span><br><span class="line"><span class="built_in">mySwap</span>(a[j], a[k]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(T a[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a[] = { <span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">6</span> };</span><br><span class="line"><span class="built_in">mySort</span>(a, <span class="built_in"><span class="keyword">sizeof</span></span>(a) / <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">myPrint</span>(a, <span class="built_in"><span class="keyword">sizeof</span></span>(a) / <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">char</span> b[] = <span class="string">"ecdaf"</span>;</span><br><span class="line"><span class="built_in">mySort</span>(b, <span class="built_in"><span class="keyword">sizeof</span></span>(b)<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">myPrint</span>(b, <span class="built_in"><span class="keyword">sizeof</span></span>(b)<span class="number">-1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>加&lt;&gt;调用模板函数，否则默认调用普通函数</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"普通函数"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"模板函数"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">fun</span>();<span class="comment">//普通函数</span></span><br><span class="line"><span class="comment">//fun&lt;&gt;();//报错</span></span><br><span class="line">fun&lt;<span class="keyword">int</span>&gt;();<span class="comment">//模板函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>模板函数也可以重载</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"普通函数"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(T a,T b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"模板函数"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(T a,T b,T c )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"重载的模板函数"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>, c = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">fun</span>(a,b);<span class="comment">//普通函数</span></span><br><span class="line">fun&lt;&gt;(a,b);<span class="comment">//模板函数</span></span><br><span class="line"><span class="built_in">fun</span>(a, b, c);<span class="comment">//重载的模板函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>优先不强转调用模板函数，例子如下：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"普通函数"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(T a,T b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"模板函数"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">char</span> a = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">char</span> b = <span class="string">'b'</span>;</span><br><span class="line"><span class="built_in">fun</span>(a,b);<span class="comment">//调用模板函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>模板的具体化（实现更多功能）</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string na,<span class="keyword">int</span> nu)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">this</span>-&gt;name = na;</span><br><span class="line"><span class="keyword">this</span>-&gt;number = nu;</span><br><span class="line">}</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">int</span> number;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equal</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a == b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equal</span><span class="params">(Person a, Person b)</span><span class="comment">//模板具体化，实现Person的比较</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (a.name == b.name &amp;&amp; a.number == b.number)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="function">Person <span class="title">a</span><span class="params">(<span class="string">"张三"</span>, <span class="number">111</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">b</span><span class="params">(<span class="string">"张三"</span>, <span class="number">111</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">equal</span>(a, b))</span><br><span class="line">cout &lt;&lt; <span class="string">"a==b"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">"a!=b"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="类模板"><code>类模板</code></h2><p><strong>语法</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="comment">//////</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>简例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">typeName</span>,<span class="keyword">class</span> <span class="title">typeAge</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(typeName name, typeAge age)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; name &lt;&lt; <span class="string">" "</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">typeName name;</span><br><span class="line">typeAge age;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Person &lt;string, <span class="keyword">int</span>&gt;<span class="built_in">a</span>(<span class="string">"张三"</span>, <span class="number">111</span>);</span><br><span class="line">a.<span class="built_in">show</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Note：和函数模板相比较，类模板无自动类型推导，例子如下：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">typeName</span>,<span class="keyword">class</span> <span class="title">typeAge</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(typeName name, typeAge age)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; name &lt;&lt; endl &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">typeName name;</span><br><span class="line">typeAge age;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="function">Person <span class="title">a</span><span class="params">(<span class="string">"张三"</span>, <span class="number">111</span>)</span></span>;</span><br><span class="line">a.<span class="built_in">show</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//错误信息：缺少Person模板参数信息</span></span><br></pre></td></tr></tbody></table></figure><p><strong>类模板可以设置默认参数，如下</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">typeName</span>=</span>string,<span class="class"><span class="keyword">class</span> <span class="title">typeAge</span>=</span><span class="keyword">int</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(typeName name, typeAge age)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; name &lt;&lt; endl &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">typeName name;</span><br><span class="line">typeAge age;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Person &lt;&gt;<span class="built_in">a</span>(<span class="string">"张三"</span>, <span class="number">111</span>);</span><br><span class="line">a.<span class="built_in">show</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="176-184"><code>176-184</code></h2><h1><code>异常处理</code></h1><p><strong>C++异常处理由检查try，抛出throw和捕捉catch三部分组成</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">throw</span> a;</span><br><span class="line">}</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">double</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"哈哈哈"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line">}</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span>(...)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"hahah"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>STL</code></h1><h2 id="vector"><code>vector</code></h2><h3 id="简介"><code>简介</code></h3><p><strong>vector：向量</strong><br><strong>一个低维空间的向量可以在无数个高维空间上进行表示，所以一个 vector 的大小是可拓展的</strong><br><strong>vector 可以看成一个单端数组，左闭右开。</strong></p><p><strong>写法：vector&lt;数据类型&gt; 变量名</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; a;<span class="comment">//定义一个放int的向量a</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>vector 与普通数组区别 在于数组是<code>静态</code>空间，而 vector 可以<code>动态</code>扩展，且动态扩展并不是在原空间之后续接新空间，而是<code>找更大的内存空间</code>，然后将原数据<code>拷贝</code>新空间，<code>释放</code>原空间！</p></blockquote><hr><h3 id="CSDN-Voctor"><code>CSDN_Voctor</code></h3><p><strong><a href="https://blog.csdn.net/weixin_41743247/article/details/90635931?ops_request_misc=%7B%22request%5Fid%22%3A%22163073130216780366569702%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=163073130216780366569702&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-90635931.first_rank_v2_pc_rank_v29&amp;utm_term=vector&amp;spm=1018.2226.3001.4187">voctor</a></strong></p><hr><h2 id="优先队列"><code>优先队列</code></h2><p><strong>一、头文件：queue</strong></p><p><strong>二、写法：priority_queue &lt;数据类型，容器类型，排序方式&gt;</strong></p><h3 id="例子（1）">例子（1）</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt;Q;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>priority_queue: 优先队列<br>数据类型:int 型<br>容器类型:vector<br>比较方式:greater (更大、升序排列、从 top 到 basic 越来越大)<br>vector 容器基本内涵<br>vector 数据结构和数组非常相似，也称为单端数组<br>vector 与普通数组区别 在于数组是<code>静态</code>空间，而 vector 可以<code>动态</code>扩展<br>且动态扩展并不是在原空间之后续接新空间，而是<code>找更大的内存空间</code>，然后将原数据<code>拷贝</code>新空间，<code>释放</code>原空间！<br>后两个 &gt;&gt; 之间一定要有<code>空格</code>，因为 “&gt;&gt;” 是<code>位移</code>运算！！！</p></blockquote><p><strong>相关链接：[bitMap - 位运算](<a href="https://xn--ctta.icu/2021/07/27/1.%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/05.%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95/Bit">https://帆帆.icu/2021/07/27/1.算法与数据结构/01.算法/05.图论算法/Bit</a> Map/)</strong></p><hr><h3 id="例子（2）">例子（2）</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">C++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt;Q;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n, x;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">{</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">Q.<span class="built_in">push</span>(x);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (Q.<span class="built_in">size</span>()!= <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">a = Q.<span class="built_in">top</span>();</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">b = Q.<span class="built_in">top</span>();</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">Q.<span class="built_in">push</span>(a + b);</span><br><span class="line">ans += a + b;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="sort函数"><code>sort函数</code></h2><p><strong>头文件：algorithm</strong><br><strong>写法如下：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="built_in">sort</span>(起始地址,结束地址,排序方式);</span><br></pre></td></tr></tbody></table></figure><h3 id="排序int型"><code>排序int型</code></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">   <span class="keyword">int</span> a[<span class="number">10</span>]={<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span>};</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">   cout&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class="line">   <span class="built_in">sort</span>(a,a+<span class="number">10</span>);<span class="comment">//无第三个参数时默认从小到大排序</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">   cout&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">complare</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><span class="comment">//排序规则</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">     <span class="keyword">return</span> a&gt;b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">     <span class="keyword">int</span> a[<span class="number">10</span>]={<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span>};</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">     cout&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class="line">     <span class="comment">//从大到小排序</span></span><br><span class="line">     <span class="built_in">sort</span>(a,a+<span class="number">10</span>,complare);<span class="comment">//在这里就不需要对complare函数传入参数了，这是规则</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="排序结构体"><code>排序结构体</code></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">double</span> score;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">complare</span><span class="params">(Student t1,Student t2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> t1.score &lt; t2.score;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Student s[] = {</span><br><span class="line">{<span class="string">"zhan"</span>,<span class="number">89</span> },</span><br><span class="line">{<span class="string">"dwad"</span>,<span class="number">92</span>}</span><br><span class="line">};</span><br><span class="line"><span class="built_in">sort</span>(s, s + <span class="number">2</span>, complare);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; i++)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; s[i].name &lt;&lt; <span class="string">" "</span> &lt;&lt; s[i].score &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Note: 在定义排序规则的函数里面，返回的是&lt;就是从小往大排，反之亦然，事实上还可以使用运算符重载的方法来排序结构体，后文将会提到。</strong></p><h1><code>细节补充</code></h1><h2 id="的用法"><code>&amp;的用法</code></h2><h3 id="逻辑运算符号：与"><code>逻辑运算符号：与</code></h3><p><strong>略</strong></p><h3 id="取地址符"><code>取地址符</code></h3><p><strong>略</strong></p><h3 id="位运算"><code>位运算</code></h3><p><strong>见c语言文章或bitmap算法</strong></p><h3 id="引用-换名字"><code>引用(换名字)</code></h3><p><strong>eg1：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;b = a;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>eg2（函数传入参数时起别名）:</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">temp = a; a = b; b = temp;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">solve</span>(a, b);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">" "</span> &lt;&lt; b;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>eg3（常量引用）：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;a = <span class="number">89</span>;</span><br><span class="line"><span class="comment">//等同于 int temp=89;int &amp;a=temp;</span></span><br><span class="line">cout &lt;&lt; a;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="宏"><code>宏</code></h2><p><strong>C语言中，有两种宏，宏其实是一个代码片段，在用到宏时，会被替换掉。</strong></p><h3 id="替换变量"><code>替换变量</code></h3><p><strong>eg：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100<span class="comment">//简单替换</span></span></span><br></pre></td></tr></tbody></table></figure><p><strong>如果宏的代码依然是宏的话，那么会一直往下替换</strong></p><h3 id="替换函数"><code>替换函数</code></h3><p><strong>宏还可以来替换函数（可传入参数）</strong></p><p><strong>eg:(宏定义取大函数)</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">99999</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">MAX</span>(a, b);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>eg:(宏定义for循环)</strong></p><p>//</p><h2 id="宽字符"><code>宽字符</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">setlocale</span>(LC_ALL, <span class="string">"chs"</span>);<span class="comment">//设置中文</span></span><br><span class="line"><span class="keyword">wchar_t</span> s[] = <span class="string">L"好是一个好人"</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> c = s[<span class="number">0</span>];<span class="comment">//双字节对等，unsigned!!!</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19968</span>; i &lt;= <span class="number">40869</span>; i++)</span><br><span class="line">{</span><br><span class="line">j++;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L"%lc\n"</span>, i);</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="cerr和clog"><code>cerr和clog</code></h2><p><a href="https://blog.csdn.net/bsmmaoshenbo/article/details/50778068?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163766738616780255274112%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163766738616780255274112&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-50778068.pc_search_result_cache&amp;utm_term=cerr&amp;spm=1018.2226.3001.4187">Cerr和Clog</a></p><h2 id="浅拷贝的问题"><code>浅拷贝的问题</code></h2><p><strong>堆区的内存重复释放！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> B_编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
